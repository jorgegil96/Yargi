Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    RANGE

Grammar

Rule 0     S' -> file
Rule 1     file -> interface_r class classr
Rule 2     interface_r -> INTERFACE CID interface_body interface_r
Rule 3     interface_r -> empty
Rule 4     interface_body -> LLAVEIZQ interface_fun interface_fun_r LLAVEDER
Rule 5     interface_fun -> FUN ID PARIZQ fun2 PARDER COLON
Rule 6     interface_fun_r -> interface_fun interface_fun_r
Rule 7     interface_fun_r -> empty
Rule 8     classr -> class classr
Rule 9     classr -> empty
Rule 10    class -> CLASS CID classparams class2 body
Rule 11    class -> DATA CLASS CID classparams
Rule 12    class2 -> DOSPUNTOS class_extras
Rule 13    class2 -> empty
Rule 14    class_extras -> CID class_extras_2
Rule 15    class_extras_2 -> COMA CID class_extras_2
Rule 16    class_extras_2 -> PARIZQ vars2 PARDER
Rule 17    classparams -> PARIZQ classparams2 PARDER
Rule 18    classparams -> empty
Rule 19    classparams2 -> vars3 tipo ID classparams3
Rule 20    classparams2 -> empty
Rule 21    classparams3 -> COMA vars3 tipo ID classparams3
Rule 22    classparams3 -> empty
Rule 23    varcte -> ID
Rule 24    varcte -> INTNUM
Rule 25    varcte -> FLOATNUM
Rule 26    varcte -> TRUE
Rule 27    varcte -> FALSE
Rule 28    varcte -> STRINGVAL
Rule 29    varcte -> NULL
Rule 30    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 31    varcte -> ID PUNTO ID varcte_param_fun
Rule 32    varcte -> ID PARIZQ llamada_param PARDER
Rule 33    varcte_param_fun -> PARIZQ llamada_param PARDER
Rule 34    varcte_param_fun -> empty
Rule 35    expresion -> megaexp
Rule 36    expresionr -> COMA expresion expresionr
Rule 37    expresionr -> empty
Rule 38    expresion2 -> expresion expresionr
Rule 39    expresion2 -> empty
Rule 40    superexp -> exp oplog
Rule 41    oplog -> MAYORQUE exp
Rule 42    oplog -> MENORQUE exp
Rule 43    oplog -> DIFERENTE exp
Rule 44    oplog -> MAYOROIGUAL exp
Rule 45    oplog -> MENOROIGUAL exp
Rule 46    oplog -> IGUALIGUAL exp
Rule 47    oplog -> empty
Rule 48    megaexp -> superexp megaexpr
Rule 49    megaexpr -> AND superexp megaexpr
Rule 50    megaexpr -> OR superexp megaexpr
Rule 51    megaexpr -> empty
Rule 52    vars -> vars3 tipo vars2 COLON
Rule 53    vars -> vars3 tipo LIST vars2 COLON
Rule 54    varsr -> COMA ID varsr
Rule 55    varsr -> empty
Rule 56    vars2 -> ID varsr
Rule 57    vars3 -> PRIVATE
Rule 58    vars3 -> empty
Rule 59    estatuto -> asignacion estatuto
Rule 60    estatuto -> condicion estatuto
Rule 61    estatuto -> escritura estatuto
Rule 62    estatuto -> for estatuto
Rule 63    estatuto -> while estatuto
Rule 64    estatuto -> when estatuto
Rule 65    estatuto -> llamada estatuto
Rule 66    estatuto -> obj_call estatuto
Rule 67    estatuto -> empty
Rule 68    asignacion -> ID asignacion3 IGUAL asignacion2 COLON
Rule 69    asignacion2 -> expresion
Rule 70    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 71    asignacion2 -> READ PARIZQ assign_read PARDER
Rule 72    asignacion2 -> CID PARIZQ class_call_args expresionr PARDER
Rule 73    class_call_args -> expresion
Rule 74    class_call_args -> empty
Rule 75    assign_read -> STRINGVAL
Rule 76    assign_read -> empty
Rule 77    asignacion2r -> COMA expresion asignacion2r
Rule 78    asignacion2r -> empty
Rule 79    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 80    asignacion3 -> PUNTO ID
Rule 81    asignacion3 -> empty
Rule 82    condicion -> IF condicion2 estatutor
Rule 83    condicion2 -> PARIZQ expresion PARDER bloque
Rule 84    condicionr -> ELSE IF condicion2
Rule 85    condicionr -> empty
Rule 86    bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 87    bloque2 -> RETURN bloque3
Rule 88    bloque2 -> empty
Rule 89    bloque3 -> expresion COLON
Rule 90    bloque3 -> empty
Rule 91    estatutor -> ELSE bloque
Rule 92    estatutor -> empty
Rule 93    escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON
Rule 94    esc1 -> expresion
Rule 95    esc1 -> STRING
Rule 96    esc2 -> COMA esc1 esc2
Rule 97    esc2 -> empty
Rule 98    tipo -> INT
Rule 99    tipo -> FLOAT
Rule 100   tipo -> BOOL
Rule 101   tipo -> STRING
Rule 102   tipo -> CID
Rule 103   factor -> PARIZQ expresion PARDER
Rule 104   factor -> factor2 varcte
Rule 105   terminor -> POR factor terminor
Rule 106   terminor -> SOBRE factor terminor
Rule 107   terminor -> empty
Rule 108   termino -> factor terminor
Rule 109   exp -> termino expr
Rule 110   expr -> MAS termino expr
Rule 111   expr -> MENOS termino expr
Rule 112   expr -> empty
Rule 113   varcter -> COMA varcte varcter
Rule 114   varcter -> empty
Rule 115   factor2 -> MAS
Rule 116   factor2 -> MENOS
Rule 117   factor2 -> empty
Rule 118   for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 119   for2 -> ID
Rule 120   for2 -> range
Rule 121   range -> INTNUM PUNTOSRANGO INTNUM
Rule 122   range -> ID PUNTOSRANGO ID
Rule 123   range -> ID PUNTOSRANGO INTNUM
Rule 124   range -> INTNUM PUNTOSRANGO ID
Rule 125   while -> WHILE PARIZQ expresion PARDER bloque
Rule 126   when -> WHEN LLAVEIZQ when2 LLAVEDER
Rule 127   when2 -> expresion FLECHITA bloque when2
Rule 128   when2 -> ELSE FLECHITA bloque
Rule 129   when2 -> empty
Rule 130   fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 131   fun2 -> tipo ID funparamr
Rule 132   fun2 -> empty
Rule 133   funparamr -> COMA tipo ID funparamr
Rule 134   funparamr -> empty
Rule 135   fun3 -> DOSPUNTOS tipo
Rule 136   fun3 -> empty
Rule 137   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 138   opc1 -> vars multvarsdecl
Rule 139   opc1 -> empty
Rule 140   opc2 -> estatuto
Rule 141   opc2 -> empty
Rule 142   body -> LLAVEIZQ body2 funr body_main LLAVEDER
Rule 143   body -> empty
Rule 144   body_main -> MAIN PARIZQ PARDER mainbloque
Rule 145   body_main -> empty
Rule 146   body2 -> vars multvarsdecl
Rule 147   body2 -> empty
Rule 148   mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER
Rule 149   multvarsdecl -> vars multvarsdecl
Rule 150   multvarsdecl -> empty
Rule 151   funr -> fun funr
Rule 152   funr -> empty
Rule 153   llamada -> ID PARIZQ llamada_param PARDER COLON
Rule 154   llamada -> empty
Rule 155   obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON
Rule 156   obj_call -> empty
Rule 157   llamada_param -> expresion expresionr
Rule 158   llamada_param -> empty
Rule 159   empty -> <empty>

Terminals, with rules where they appear

AND                  : 49
BOOL                 : 100
CID                  : 2 10 11 14 15 72 102
CLASS                : 10 11
COLON                : 5 52 53 68 89 93 153 155
COMA                 : 15 21 36 54 77 96 113 133
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 30 70 79
CORCHIZQ             : 30 70 79
DATA                 : 11
DIFERENTE            : 43
DOSPUNTOS            : 12 135
ELSE                 : 84 91 128
EOL                  : 
FALSE                : 27
FLECHITA             : 127 128
FLOAT                : 99
FLOATNUM             : 25
FOR                  : 118
FUN                  : 5 130
GLOBAL               : 
ID                   : 5 19 21 23 30 31 31 32 54 56 68 80 118 119 122 122 123 124 130 131 133 153 155 155
IF                   : 82 84
IGUAL                : 68
IGUALIGUAL           : 46
IN                   : 118
INT                  : 98
INTERFACE            : 2
INTNUM               : 24 121 121 123 124
LIST                 : 53
LLAVEDER             : 4 86 126 137 142 148
LLAVEIZQ             : 4 86 126 137 142 148
MAIN                 : 144
MAS                  : 110 115
MAYOROIGUAL          : 44
MAYORQUE             : 41
MENOROIGUAL          : 45
MENORQUE             : 42
MENOS                : 111 116
NULL                 : 29
OR                   : 50
PARDER               : 5 16 17 32 33 71 72 83 93 103 118 125 130 144 153 155
PARIZQ               : 5 16 17 32 33 71 72 83 93 103 118 125 130 144 153 155
POR                  : 105
PRIVATE              : 57
PUNTO                : 31 80 155
PUNTOSRANGO          : 121 122 123 124
RANGE                : 
READ                 : 71
RETURN               : 87
SOBRE                : 106
STRING               : 95 101
STRINGVAL            : 28 75
TRUE                 : 26
WHEN                 : 126
WHILE                : 125
WRITE                : 93
error                : 

Nonterminals, with rules where they appear

asignacion           : 59
asignacion2          : 68
asignacion2r         : 70 77
asignacion3          : 68
assign_read          : 71
bloque               : 83 91 118 125 127 128
bloque2              : 86 137
bloque3              : 87
body                 : 10
body2                : 142 148
body_main            : 142
class                : 1 8
class2               : 10
class_call_args      : 72
class_extras         : 12
class_extras_2       : 14 15
classparams          : 10 11
classparams2         : 17
classparams3         : 19 21
classr               : 1 8
condicion            : 60
condicion2           : 82 84
condicionr           : 
empty                : 3 7 9 13 18 20 22 34 37 39 47 51 55 58 67 74 76 78 81 85 88 90 92 97 107 112 114 117 129 132 134 136 139 141 143 145 147 150 152 154 156 158
esc1                 : 93 96
esc2                 : 93 96
escritura            : 61
estatuto             : 59 60 61 62 63 64 65 66 86 140 148
estatutor            : 82
exp                  : 40 41 42 43 44 45 46
expr                 : 109 110 111
expresion            : 36 38 69 70 73 77 79 83 89 94 103 125 127 157
expresion2           : 
expresionr           : 36 38 72 157
factor               : 105 106 108
factor2              : 104
file                 : 0
for                  : 62
for2                 : 118
fun                  : 151
fun2                 : 5 130
fun3                 : 130
funbody              : 130
funparamr            : 131 133
funr                 : 142 151
interface_body       : 2
interface_fun        : 4 6
interface_fun_r      : 4 6
interface_r          : 1 2
llamada              : 65
llamada_param        : 32 33 153 155
mainbloque           : 144
megaexp              : 35
megaexpr             : 48 49 50
multvarsdecl         : 138 146 149
obj_call             : 66
opc1                 : 137
opc2                 : 137
oplog                : 40
range                : 120
superexp             : 48 49 50
termino              : 109 110 111
terminor             : 105 106 108
tipo                 : 19 21 52 53 131 133 135
varcte               : 30 104 113
varcte_param_fun     : 31
varcter              : 113
vars                 : 138 146 149
vars2                : 16 52 53
vars3                : 19 21 52 53 130
varsr                : 54 56
when                 : 64
when2                : 126 127
while                : 63

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . interface_r class classr
    (2) interface_r -> . INTERFACE CID interface_body interface_r
    (3) interface_r -> . empty
    (159) empty -> .

    INTERFACE       shift and go to state 3
    CLASS           reduce using rule 159 (empty -> .)
    DATA            reduce using rule 159 (empty -> .)

    file                           shift and go to state 1
    interface_r                    shift and go to state 2
    empty                          shift and go to state 4

state 1

    (0) S' -> file .



state 2

    (1) file -> interface_r . class classr
    (10) class -> . CLASS CID classparams class2 body
    (11) class -> . DATA CLASS CID classparams

    CLASS           shift and go to state 6
    DATA            shift and go to state 7

    class                          shift and go to state 5

state 3

    (2) interface_r -> INTERFACE . CID interface_body interface_r

    CID             shift and go to state 8


state 4

    (3) interface_r -> empty .

    CLASS           reduce using rule 3 (interface_r -> empty .)
    DATA            reduce using rule 3 (interface_r -> empty .)


state 5

    (1) file -> interface_r class . classr
    (8) classr -> . class classr
    (9) classr -> . empty
    (10) class -> . CLASS CID classparams class2 body
    (11) class -> . DATA CLASS CID classparams
    (159) empty -> .

    CLASS           shift and go to state 6
    DATA            shift and go to state 7
    $end            reduce using rule 159 (empty -> .)

    class                          shift and go to state 9
    classr                         shift and go to state 10
    empty                          shift and go to state 11

state 6

    (10) class -> CLASS . CID classparams class2 body

    CID             shift and go to state 12


state 7

    (11) class -> DATA . CLASS CID classparams

    CLASS           shift and go to state 13


state 8

    (2) interface_r -> INTERFACE CID . interface_body interface_r
    (4) interface_body -> . LLAVEIZQ interface_fun interface_fun_r LLAVEDER

    LLAVEIZQ        shift and go to state 15

    interface_body                 shift and go to state 14

state 9

    (8) classr -> class . classr
    (8) classr -> . class classr
    (9) classr -> . empty
    (10) class -> . CLASS CID classparams class2 body
    (11) class -> . DATA CLASS CID classparams
    (159) empty -> .

    CLASS           shift and go to state 6
    DATA            shift and go to state 7
    $end            reduce using rule 159 (empty -> .)

    class                          shift and go to state 9
    classr                         shift and go to state 16
    empty                          shift and go to state 11

state 10

    (1) file -> interface_r class classr .

    $end            reduce using rule 1 (file -> interface_r class classr .)


state 11

    (9) classr -> empty .

    $end            reduce using rule 9 (classr -> empty .)


state 12

    (10) class -> CLASS CID . classparams class2 body
    (17) classparams -> . PARIZQ classparams2 PARDER
    (18) classparams -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 18
    DOSPUNTOS       reduce using rule 159 (empty -> .)
    LLAVEIZQ        reduce using rule 159 (empty -> .)
    CLASS           reduce using rule 159 (empty -> .)
    DATA            reduce using rule 159 (empty -> .)
    $end            reduce using rule 159 (empty -> .)

    classparams                    shift and go to state 17
    empty                          shift and go to state 19

state 13

    (11) class -> DATA CLASS . CID classparams

    CID             shift and go to state 20


state 14

    (2) interface_r -> INTERFACE CID interface_body . interface_r
    (2) interface_r -> . INTERFACE CID interface_body interface_r
    (3) interface_r -> . empty
    (159) empty -> .

    INTERFACE       shift and go to state 3
    CLASS           reduce using rule 159 (empty -> .)
    DATA            reduce using rule 159 (empty -> .)

    interface_r                    shift and go to state 21
    empty                          shift and go to state 4

state 15

    (4) interface_body -> LLAVEIZQ . interface_fun interface_fun_r LLAVEDER
    (5) interface_fun -> . FUN ID PARIZQ fun2 PARDER COLON

    FUN             shift and go to state 23

    interface_fun                  shift and go to state 22

state 16

    (8) classr -> class classr .

    $end            reduce using rule 8 (classr -> class classr .)


state 17

    (10) class -> CLASS CID classparams . class2 body
    (12) class2 -> . DOSPUNTOS class_extras
    (13) class2 -> . empty
    (159) empty -> .

    DOSPUNTOS       shift and go to state 25
    LLAVEIZQ        reduce using rule 159 (empty -> .)
    CLASS           reduce using rule 159 (empty -> .)
    DATA            reduce using rule 159 (empty -> .)
    $end            reduce using rule 159 (empty -> .)

    class2                         shift and go to state 24
    empty                          shift and go to state 26

state 18

    (17) classparams -> PARIZQ . classparams2 PARDER
    (19) classparams2 -> . vars3 tipo ID classparams3
    (20) classparams2 -> . empty
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty
    (159) empty -> .

    PRIVATE         shift and go to state 30
    PARDER          reduce using rule 159 (empty -> .)
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    CID             reduce using rule 159 (empty -> .)

    classparams2                   shift and go to state 27
    vars3                          shift and go to state 28
    empty                          shift and go to state 29

state 19

    (18) classparams -> empty .

    DOSPUNTOS       reduce using rule 18 (classparams -> empty .)
    LLAVEIZQ        reduce using rule 18 (classparams -> empty .)
    CLASS           reduce using rule 18 (classparams -> empty .)
    DATA            reduce using rule 18 (classparams -> empty .)
    $end            reduce using rule 18 (classparams -> empty .)


state 20

    (11) class -> DATA CLASS CID . classparams
    (17) classparams -> . PARIZQ classparams2 PARDER
    (18) classparams -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 18
    CLASS           reduce using rule 159 (empty -> .)
    DATA            reduce using rule 159 (empty -> .)
    $end            reduce using rule 159 (empty -> .)

    classparams                    shift and go to state 31
    empty                          shift and go to state 19

state 21

    (2) interface_r -> INTERFACE CID interface_body interface_r .

    CLASS           reduce using rule 2 (interface_r -> INTERFACE CID interface_body interface_r .)
    DATA            reduce using rule 2 (interface_r -> INTERFACE CID interface_body interface_r .)


state 22

    (4) interface_body -> LLAVEIZQ interface_fun . interface_fun_r LLAVEDER
    (6) interface_fun_r -> . interface_fun interface_fun_r
    (7) interface_fun_r -> . empty
    (5) interface_fun -> . FUN ID PARIZQ fun2 PARDER COLON
    (159) empty -> .

    FUN             shift and go to state 23
    LLAVEDER        reduce using rule 159 (empty -> .)

    interface_fun                  shift and go to state 32
    interface_fun_r                shift and go to state 33
    empty                          shift and go to state 34

state 23

    (5) interface_fun -> FUN . ID PARIZQ fun2 PARDER COLON

    ID              shift and go to state 35


state 24

    (10) class -> CLASS CID classparams class2 . body
    (142) body -> . LLAVEIZQ body2 funr body_main LLAVEDER
    (143) body -> . empty
    (159) empty -> .

    LLAVEIZQ        shift and go to state 37
    CLASS           reduce using rule 159 (empty -> .)
    DATA            reduce using rule 159 (empty -> .)
    $end            reduce using rule 159 (empty -> .)

    body                           shift and go to state 36
    empty                          shift and go to state 38

state 25

    (12) class2 -> DOSPUNTOS . class_extras
    (14) class_extras -> . CID class_extras_2

    CID             shift and go to state 40

    class_extras                   shift and go to state 39

state 26

    (13) class2 -> empty .

    LLAVEIZQ        reduce using rule 13 (class2 -> empty .)
    CLASS           reduce using rule 13 (class2 -> empty .)
    DATA            reduce using rule 13 (class2 -> empty .)
    $end            reduce using rule 13 (class2 -> empty .)


state 27

    (17) classparams -> PARIZQ classparams2 . PARDER

    PARDER          shift and go to state 41


state 28

    (19) classparams2 -> vars3 . tipo ID classparams3
    (98) tipo -> . INT
    (99) tipo -> . FLOAT
    (100) tipo -> . BOOL
    (101) tipo -> . STRING
    (102) tipo -> . CID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    BOOL            shift and go to state 45
    STRING          shift and go to state 46
    CID             shift and go to state 47

    tipo                           shift and go to state 42

state 29

    (20) classparams2 -> empty .
    (58) vars3 -> empty .

    PARDER          reduce using rule 20 (classparams2 -> empty .)
    INT             reduce using rule 58 (vars3 -> empty .)
    FLOAT           reduce using rule 58 (vars3 -> empty .)
    BOOL            reduce using rule 58 (vars3 -> empty .)
    STRING          reduce using rule 58 (vars3 -> empty .)
    CID             reduce using rule 58 (vars3 -> empty .)


state 30

    (57) vars3 -> PRIVATE .

    INT             reduce using rule 57 (vars3 -> PRIVATE .)
    FLOAT           reduce using rule 57 (vars3 -> PRIVATE .)
    BOOL            reduce using rule 57 (vars3 -> PRIVATE .)
    STRING          reduce using rule 57 (vars3 -> PRIVATE .)
    CID             reduce using rule 57 (vars3 -> PRIVATE .)
    FUN             reduce using rule 57 (vars3 -> PRIVATE .)


state 31

    (11) class -> DATA CLASS CID classparams .

    CLASS           reduce using rule 11 (class -> DATA CLASS CID classparams .)
    DATA            reduce using rule 11 (class -> DATA CLASS CID classparams .)
    $end            reduce using rule 11 (class -> DATA CLASS CID classparams .)


state 32

    (6) interface_fun_r -> interface_fun . interface_fun_r
    (6) interface_fun_r -> . interface_fun interface_fun_r
    (7) interface_fun_r -> . empty
    (5) interface_fun -> . FUN ID PARIZQ fun2 PARDER COLON
    (159) empty -> .

    FUN             shift and go to state 23
    LLAVEDER        reduce using rule 159 (empty -> .)

    interface_fun                  shift and go to state 32
    interface_fun_r                shift and go to state 48
    empty                          shift and go to state 34

state 33

    (4) interface_body -> LLAVEIZQ interface_fun interface_fun_r . LLAVEDER

    LLAVEDER        shift and go to state 49


state 34

    (7) interface_fun_r -> empty .

    LLAVEDER        reduce using rule 7 (interface_fun_r -> empty .)


state 35

    (5) interface_fun -> FUN ID . PARIZQ fun2 PARDER COLON

    PARIZQ          shift and go to state 50


state 36

    (10) class -> CLASS CID classparams class2 body .

    CLASS           reduce using rule 10 (class -> CLASS CID classparams class2 body .)
    DATA            reduce using rule 10 (class -> CLASS CID classparams class2 body .)
    $end            reduce using rule 10 (class -> CLASS CID classparams class2 body .)


state 37

    (142) body -> LLAVEIZQ . body2 funr body_main LLAVEDER
    (146) body2 -> . vars multvarsdecl
    (147) body2 -> . empty
    (52) vars -> . vars3 tipo vars2 COLON
    (53) vars -> . vars3 tipo LIST vars2 COLON
    (159) empty -> .
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    FUN             reduce using rule 159 (empty -> .)
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    CID             reduce using rule 159 (empty -> .)
    PRIVATE         shift and go to state 30

  ! PRIVATE         [ reduce using rule 159 (empty -> .) ]

    body2                          shift and go to state 51
    vars                           shift and go to state 52
    empty                          shift and go to state 53
    vars3                          shift and go to state 54

state 38

    (143) body -> empty .

    CLASS           reduce using rule 143 (body -> empty .)
    DATA            reduce using rule 143 (body -> empty .)
    $end            reduce using rule 143 (body -> empty .)


state 39

    (12) class2 -> DOSPUNTOS class_extras .

    LLAVEIZQ        reduce using rule 12 (class2 -> DOSPUNTOS class_extras .)
    CLASS           reduce using rule 12 (class2 -> DOSPUNTOS class_extras .)
    DATA            reduce using rule 12 (class2 -> DOSPUNTOS class_extras .)
    $end            reduce using rule 12 (class2 -> DOSPUNTOS class_extras .)


state 40

    (14) class_extras -> CID . class_extras_2
    (15) class_extras_2 -> . COMA CID class_extras_2
    (16) class_extras_2 -> . PARIZQ vars2 PARDER

    COMA            shift and go to state 56
    PARIZQ          shift and go to state 57

    class_extras_2                 shift and go to state 55

state 41

    (17) classparams -> PARIZQ classparams2 PARDER .

    DOSPUNTOS       reduce using rule 17 (classparams -> PARIZQ classparams2 PARDER .)
    LLAVEIZQ        reduce using rule 17 (classparams -> PARIZQ classparams2 PARDER .)
    CLASS           reduce using rule 17 (classparams -> PARIZQ classparams2 PARDER .)
    DATA            reduce using rule 17 (classparams -> PARIZQ classparams2 PARDER .)
    $end            reduce using rule 17 (classparams -> PARIZQ classparams2 PARDER .)


state 42

    (19) classparams2 -> vars3 tipo . ID classparams3

    ID              shift and go to state 58


state 43

    (98) tipo -> INT .

    ID              reduce using rule 98 (tipo -> INT .)
    LIST            reduce using rule 98 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 98 (tipo -> INT .)


state 44

    (99) tipo -> FLOAT .

    ID              reduce using rule 99 (tipo -> FLOAT .)
    LIST            reduce using rule 99 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 99 (tipo -> FLOAT .)


state 45

    (100) tipo -> BOOL .

    ID              reduce using rule 100 (tipo -> BOOL .)
    LIST            reduce using rule 100 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 100 (tipo -> BOOL .)


state 46

    (101) tipo -> STRING .

    ID              reduce using rule 101 (tipo -> STRING .)
    LIST            reduce using rule 101 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 101 (tipo -> STRING .)


state 47

    (102) tipo -> CID .

    ID              reduce using rule 102 (tipo -> CID .)
    LIST            reduce using rule 102 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 102 (tipo -> CID .)


state 48

    (6) interface_fun_r -> interface_fun interface_fun_r .

    LLAVEDER        reduce using rule 6 (interface_fun_r -> interface_fun interface_fun_r .)


state 49

    (4) interface_body -> LLAVEIZQ interface_fun interface_fun_r LLAVEDER .

    INTERFACE       reduce using rule 4 (interface_body -> LLAVEIZQ interface_fun interface_fun_r LLAVEDER .)
    CLASS           reduce using rule 4 (interface_body -> LLAVEIZQ interface_fun interface_fun_r LLAVEDER .)
    DATA            reduce using rule 4 (interface_body -> LLAVEIZQ interface_fun interface_fun_r LLAVEDER .)


state 50

    (5) interface_fun -> FUN ID PARIZQ . fun2 PARDER COLON
    (131) fun2 -> . tipo ID funparamr
    (132) fun2 -> . empty
    (98) tipo -> . INT
    (99) tipo -> . FLOAT
    (100) tipo -> . BOOL
    (101) tipo -> . STRING
    (102) tipo -> . CID
    (159) empty -> .

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    BOOL            shift and go to state 45
    STRING          shift and go to state 46
    CID             shift and go to state 47
    PARDER          reduce using rule 159 (empty -> .)

    fun2                           shift and go to state 59
    tipo                           shift and go to state 60
    empty                          shift and go to state 61

state 51

    (142) body -> LLAVEIZQ body2 . funr body_main LLAVEDER
    (151) funr -> . fun funr
    (152) funr -> . empty
    (130) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (159) empty -> .
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty

    MAIN            reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    FUN             reduce using rule 159 (empty -> .)
    PRIVATE         shift and go to state 30

    funr                           shift and go to state 62
    fun                            shift and go to state 63
    empty                          shift and go to state 64
    vars3                          shift and go to state 65

state 52

    (146) body2 -> vars . multvarsdecl
    (149) multvarsdecl -> . vars multvarsdecl
    (150) multvarsdecl -> . empty
    (52) vars -> . vars3 tipo vars2 COLON
    (53) vars -> . vars3 tipo LIST vars2 COLON
    (159) empty -> .
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    FUN             reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    IF              reduce using rule 159 (empty -> .)
    WRITE           reduce using rule 159 (empty -> .)
    FOR             reduce using rule 159 (empty -> .)
    WHILE           reduce using rule 159 (empty -> .)
    WHEN            reduce using rule 159 (empty -> .)
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    CID             reduce using rule 159 (empty -> .)
    PRIVATE         shift and go to state 30

  ! PRIVATE         [ reduce using rule 159 (empty -> .) ]

    vars                           shift and go to state 66
    multvarsdecl                   shift and go to state 67
    empty                          shift and go to state 68
    vars3                          shift and go to state 54

state 53

    (147) body2 -> empty .
    (58) vars3 -> empty .

    PRIVATE         reduce using rule 147 (body2 -> empty .)
    MAIN            reduce using rule 147 (body2 -> empty .)
    LLAVEDER        reduce using rule 147 (body2 -> empty .)
    FUN             reduce using rule 147 (body2 -> empty .)
    ID              reduce using rule 147 (body2 -> empty .)
    IF              reduce using rule 147 (body2 -> empty .)
    WRITE           reduce using rule 147 (body2 -> empty .)
    FOR             reduce using rule 147 (body2 -> empty .)
    WHILE           reduce using rule 147 (body2 -> empty .)
    WHEN            reduce using rule 147 (body2 -> empty .)
    INT             reduce using rule 58 (vars3 -> empty .)
    FLOAT           reduce using rule 58 (vars3 -> empty .)
    BOOL            reduce using rule 58 (vars3 -> empty .)
    STRING          reduce using rule 58 (vars3 -> empty .)
    CID             reduce using rule 58 (vars3 -> empty .)


state 54

    (52) vars -> vars3 . tipo vars2 COLON
    (53) vars -> vars3 . tipo LIST vars2 COLON
    (98) tipo -> . INT
    (99) tipo -> . FLOAT
    (100) tipo -> . BOOL
    (101) tipo -> . STRING
    (102) tipo -> . CID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    BOOL            shift and go to state 45
    STRING          shift and go to state 46
    CID             shift and go to state 47

    tipo                           shift and go to state 69

state 55

    (14) class_extras -> CID class_extras_2 .

    LLAVEIZQ        reduce using rule 14 (class_extras -> CID class_extras_2 .)
    CLASS           reduce using rule 14 (class_extras -> CID class_extras_2 .)
    DATA            reduce using rule 14 (class_extras -> CID class_extras_2 .)
    $end            reduce using rule 14 (class_extras -> CID class_extras_2 .)


state 56

    (15) class_extras_2 -> COMA . CID class_extras_2

    CID             shift and go to state 70


state 57

    (16) class_extras_2 -> PARIZQ . vars2 PARDER
    (56) vars2 -> . ID varsr

    ID              shift and go to state 72

    vars2                          shift and go to state 71

state 58

    (19) classparams2 -> vars3 tipo ID . classparams3
    (21) classparams3 -> . COMA vars3 tipo ID classparams3
    (22) classparams3 -> . empty
    (159) empty -> .

    COMA            shift and go to state 74
    PARDER          reduce using rule 159 (empty -> .)

    classparams3                   shift and go to state 73
    empty                          shift and go to state 75

state 59

    (5) interface_fun -> FUN ID PARIZQ fun2 . PARDER COLON

    PARDER          shift and go to state 76


state 60

    (131) fun2 -> tipo . ID funparamr

    ID              shift and go to state 77


state 61

    (132) fun2 -> empty .

    PARDER          reduce using rule 132 (fun2 -> empty .)


state 62

    (142) body -> LLAVEIZQ body2 funr . body_main LLAVEDER
    (144) body_main -> . MAIN PARIZQ PARDER mainbloque
    (145) body_main -> . empty
    (159) empty -> .

    MAIN            shift and go to state 79
    LLAVEDER        reduce using rule 159 (empty -> .)

    body_main                      shift and go to state 78
    empty                          shift and go to state 80

state 63

    (151) funr -> fun . funr
    (151) funr -> . fun funr
    (152) funr -> . empty
    (130) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (159) empty -> .
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty

    MAIN            reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    FUN             reduce using rule 159 (empty -> .)
    PRIVATE         shift and go to state 30

    fun                            shift and go to state 63
    funr                           shift and go to state 81
    empty                          shift and go to state 64
    vars3                          shift and go to state 65

state 64

    (152) funr -> empty .
    (58) vars3 -> empty .

    MAIN            reduce using rule 152 (funr -> empty .)
    LLAVEDER        reduce using rule 152 (funr -> empty .)
    FUN             reduce using rule 58 (vars3 -> empty .)


state 65

    (130) fun -> vars3 . FUN ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 82


state 66

    (149) multvarsdecl -> vars . multvarsdecl
    (149) multvarsdecl -> . vars multvarsdecl
    (150) multvarsdecl -> . empty
    (52) vars -> . vars3 tipo vars2 COLON
    (53) vars -> . vars3 tipo LIST vars2 COLON
    (159) empty -> .
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    FUN             reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    IF              reduce using rule 159 (empty -> .)
    WRITE           reduce using rule 159 (empty -> .)
    FOR             reduce using rule 159 (empty -> .)
    WHILE           reduce using rule 159 (empty -> .)
    WHEN            reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    CID             reduce using rule 159 (empty -> .)
    PRIVATE         shift and go to state 30

  ! PRIVATE         [ reduce using rule 159 (empty -> .) ]

    vars                           shift and go to state 66
    multvarsdecl                   shift and go to state 83
    empty                          shift and go to state 68
    vars3                          shift and go to state 54

state 67

    (146) body2 -> vars multvarsdecl .

    PRIVATE         reduce using rule 146 (body2 -> vars multvarsdecl .)
    MAIN            reduce using rule 146 (body2 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 146 (body2 -> vars multvarsdecl .)
    FUN             reduce using rule 146 (body2 -> vars multvarsdecl .)
    ID              reduce using rule 146 (body2 -> vars multvarsdecl .)
    IF              reduce using rule 146 (body2 -> vars multvarsdecl .)
    WRITE           reduce using rule 146 (body2 -> vars multvarsdecl .)
    FOR             reduce using rule 146 (body2 -> vars multvarsdecl .)
    WHILE           reduce using rule 146 (body2 -> vars multvarsdecl .)
    WHEN            reduce using rule 146 (body2 -> vars multvarsdecl .)


state 68

    (150) multvarsdecl -> empty .
    (58) vars3 -> empty .

    PRIVATE         reduce using rule 150 (multvarsdecl -> empty .)
    MAIN            reduce using rule 150 (multvarsdecl -> empty .)
    LLAVEDER        reduce using rule 150 (multvarsdecl -> empty .)
    FUN             reduce using rule 150 (multvarsdecl -> empty .)
    ID              reduce using rule 150 (multvarsdecl -> empty .)
    IF              reduce using rule 150 (multvarsdecl -> empty .)
    WRITE           reduce using rule 150 (multvarsdecl -> empty .)
    FOR             reduce using rule 150 (multvarsdecl -> empty .)
    WHILE           reduce using rule 150 (multvarsdecl -> empty .)
    WHEN            reduce using rule 150 (multvarsdecl -> empty .)
    RETURN          reduce using rule 150 (multvarsdecl -> empty .)
    INT             reduce using rule 58 (vars3 -> empty .)
    FLOAT           reduce using rule 58 (vars3 -> empty .)
    BOOL            reduce using rule 58 (vars3 -> empty .)
    STRING          reduce using rule 58 (vars3 -> empty .)
    CID             reduce using rule 58 (vars3 -> empty .)


state 69

    (52) vars -> vars3 tipo . vars2 COLON
    (53) vars -> vars3 tipo . LIST vars2 COLON
    (56) vars2 -> . ID varsr

    LIST            shift and go to state 85
    ID              shift and go to state 72

    vars2                          shift and go to state 84

state 70

    (15) class_extras_2 -> COMA CID . class_extras_2
    (15) class_extras_2 -> . COMA CID class_extras_2
    (16) class_extras_2 -> . PARIZQ vars2 PARDER

    COMA            shift and go to state 56
    PARIZQ          shift and go to state 57

    class_extras_2                 shift and go to state 86

state 71

    (16) class_extras_2 -> PARIZQ vars2 . PARDER

    PARDER          shift and go to state 87


state 72

    (56) vars2 -> ID . varsr
    (54) varsr -> . COMA ID varsr
    (55) varsr -> . empty
    (159) empty -> .

    COMA            shift and go to state 89
    PARDER          reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)

    varsr                          shift and go to state 88
    empty                          shift and go to state 90

state 73

    (19) classparams2 -> vars3 tipo ID classparams3 .

    PARDER          reduce using rule 19 (classparams2 -> vars3 tipo ID classparams3 .)


state 74

    (21) classparams3 -> COMA . vars3 tipo ID classparams3
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty
    (159) empty -> .

    PRIVATE         shift and go to state 30
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    CID             reduce using rule 159 (empty -> .)

    vars3                          shift and go to state 91
    empty                          shift and go to state 92

state 75

    (22) classparams3 -> empty .

    PARDER          reduce using rule 22 (classparams3 -> empty .)


state 76

    (5) interface_fun -> FUN ID PARIZQ fun2 PARDER . COLON

    COLON           shift and go to state 93


state 77

    (131) fun2 -> tipo ID . funparamr
    (133) funparamr -> . COMA tipo ID funparamr
    (134) funparamr -> . empty
    (159) empty -> .

    COMA            shift and go to state 95
    PARDER          reduce using rule 159 (empty -> .)

    funparamr                      shift and go to state 94
    empty                          shift and go to state 96

state 78

    (142) body -> LLAVEIZQ body2 funr body_main . LLAVEDER

    LLAVEDER        shift and go to state 97


state 79

    (144) body_main -> MAIN . PARIZQ PARDER mainbloque

    PARIZQ          shift and go to state 98


state 80

    (145) body_main -> empty .

    LLAVEDER        reduce using rule 145 (body_main -> empty .)


state 81

    (151) funr -> fun funr .

    MAIN            reduce using rule 151 (funr -> fun funr .)
    LLAVEDER        reduce using rule 151 (funr -> fun funr .)


state 82

    (130) fun -> vars3 FUN . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 99


state 83

    (149) multvarsdecl -> vars multvarsdecl .

    PRIVATE         reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    MAIN            reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    FUN             reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    ID              reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    IF              reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    WRITE           reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    FOR             reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    WHILE           reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    WHEN            reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)
    RETURN          reduce using rule 149 (multvarsdecl -> vars multvarsdecl .)


state 84

    (52) vars -> vars3 tipo vars2 . COLON

    COLON           shift and go to state 100


state 85

    (53) vars -> vars3 tipo LIST . vars2 COLON
    (56) vars2 -> . ID varsr

    ID              shift and go to state 72

    vars2                          shift and go to state 101

state 86

    (15) class_extras_2 -> COMA CID class_extras_2 .

    LLAVEIZQ        reduce using rule 15 (class_extras_2 -> COMA CID class_extras_2 .)
    CLASS           reduce using rule 15 (class_extras_2 -> COMA CID class_extras_2 .)
    DATA            reduce using rule 15 (class_extras_2 -> COMA CID class_extras_2 .)
    $end            reduce using rule 15 (class_extras_2 -> COMA CID class_extras_2 .)


state 87

    (16) class_extras_2 -> PARIZQ vars2 PARDER .

    LLAVEIZQ        reduce using rule 16 (class_extras_2 -> PARIZQ vars2 PARDER .)
    CLASS           reduce using rule 16 (class_extras_2 -> PARIZQ vars2 PARDER .)
    DATA            reduce using rule 16 (class_extras_2 -> PARIZQ vars2 PARDER .)
    $end            reduce using rule 16 (class_extras_2 -> PARIZQ vars2 PARDER .)


state 88

    (56) vars2 -> ID varsr .

    PARDER          reduce using rule 56 (vars2 -> ID varsr .)
    COLON           reduce using rule 56 (vars2 -> ID varsr .)


state 89

    (54) varsr -> COMA . ID varsr

    ID              shift and go to state 102


state 90

    (55) varsr -> empty .

    PARDER          reduce using rule 55 (varsr -> empty .)
    COLON           reduce using rule 55 (varsr -> empty .)


state 91

    (21) classparams3 -> COMA vars3 . tipo ID classparams3
    (98) tipo -> . INT
    (99) tipo -> . FLOAT
    (100) tipo -> . BOOL
    (101) tipo -> . STRING
    (102) tipo -> . CID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    BOOL            shift and go to state 45
    STRING          shift and go to state 46
    CID             shift and go to state 47

    tipo                           shift and go to state 103

state 92

    (58) vars3 -> empty .

    INT             reduce using rule 58 (vars3 -> empty .)
    FLOAT           reduce using rule 58 (vars3 -> empty .)
    BOOL            reduce using rule 58 (vars3 -> empty .)
    STRING          reduce using rule 58 (vars3 -> empty .)
    CID             reduce using rule 58 (vars3 -> empty .)


state 93

    (5) interface_fun -> FUN ID PARIZQ fun2 PARDER COLON .

    FUN             reduce using rule 5 (interface_fun -> FUN ID PARIZQ fun2 PARDER COLON .)
    LLAVEDER        reduce using rule 5 (interface_fun -> FUN ID PARIZQ fun2 PARDER COLON .)


state 94

    (131) fun2 -> tipo ID funparamr .

    PARDER          reduce using rule 131 (fun2 -> tipo ID funparamr .)


state 95

    (133) funparamr -> COMA . tipo ID funparamr
    (98) tipo -> . INT
    (99) tipo -> . FLOAT
    (100) tipo -> . BOOL
    (101) tipo -> . STRING
    (102) tipo -> . CID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    BOOL            shift and go to state 45
    STRING          shift and go to state 46
    CID             shift and go to state 47

    tipo                           shift and go to state 104

state 96

    (134) funparamr -> empty .

    PARDER          reduce using rule 134 (funparamr -> empty .)


state 97

    (142) body -> LLAVEIZQ body2 funr body_main LLAVEDER .

    CLASS           reduce using rule 142 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)
    DATA            reduce using rule 142 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)
    $end            reduce using rule 142 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)


state 98

    (144) body_main -> MAIN PARIZQ . PARDER mainbloque

    PARDER          shift and go to state 105


state 99

    (130) fun -> vars3 FUN ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 106


state 100

    (52) vars -> vars3 tipo vars2 COLON .

    PRIVATE         reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    INT             reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    FLOAT           reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    BOOL            reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    STRING          reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    CID             reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    MAIN            reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    LLAVEDER        reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    FUN             reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    ID              reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    IF              reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    WRITE           reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    FOR             reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    WHILE           reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    WHEN            reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)
    RETURN          reduce using rule 52 (vars -> vars3 tipo vars2 COLON .)


state 101

    (53) vars -> vars3 tipo LIST vars2 . COLON

    COLON           shift and go to state 107


state 102

    (54) varsr -> COMA ID . varsr
    (54) varsr -> . COMA ID varsr
    (55) varsr -> . empty
    (159) empty -> .

    COMA            shift and go to state 89
    PARDER          reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)

    varsr                          shift and go to state 108
    empty                          shift and go to state 90

state 103

    (21) classparams3 -> COMA vars3 tipo . ID classparams3

    ID              shift and go to state 109


state 104

    (133) funparamr -> COMA tipo . ID funparamr

    ID              shift and go to state 110


state 105

    (144) body_main -> MAIN PARIZQ PARDER . mainbloque
    (148) mainbloque -> . LLAVEIZQ body2 estatuto LLAVEDER

    LLAVEIZQ        shift and go to state 112

    mainbloque                     shift and go to state 111

state 106

    (130) fun -> vars3 FUN ID PARIZQ . fun2 PARDER fun3 funbody
    (131) fun2 -> . tipo ID funparamr
    (132) fun2 -> . empty
    (98) tipo -> . INT
    (99) tipo -> . FLOAT
    (100) tipo -> . BOOL
    (101) tipo -> . STRING
    (102) tipo -> . CID
    (159) empty -> .

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    BOOL            shift and go to state 45
    STRING          shift and go to state 46
    CID             shift and go to state 47
    PARDER          reduce using rule 159 (empty -> .)

    fun2                           shift and go to state 113
    tipo                           shift and go to state 60
    empty                          shift and go to state 61

state 107

    (53) vars -> vars3 tipo LIST vars2 COLON .

    PRIVATE         reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    INT             reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    FLOAT           reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    BOOL            reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    STRING          reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    CID             reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    MAIN            reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    LLAVEDER        reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    FUN             reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    ID              reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    IF              reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    WRITE           reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    FOR             reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    WHILE           reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    WHEN            reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)
    RETURN          reduce using rule 53 (vars -> vars3 tipo LIST vars2 COLON .)


state 108

    (54) varsr -> COMA ID varsr .

    PARDER          reduce using rule 54 (varsr -> COMA ID varsr .)
    COLON           reduce using rule 54 (varsr -> COMA ID varsr .)


state 109

    (21) classparams3 -> COMA vars3 tipo ID . classparams3
    (21) classparams3 -> . COMA vars3 tipo ID classparams3
    (22) classparams3 -> . empty
    (159) empty -> .

    COMA            shift and go to state 74
    PARDER          reduce using rule 159 (empty -> .)

    classparams3                   shift and go to state 114
    empty                          shift and go to state 75

state 110

    (133) funparamr -> COMA tipo ID . funparamr
    (133) funparamr -> . COMA tipo ID funparamr
    (134) funparamr -> . empty
    (159) empty -> .

    COMA            shift and go to state 95
    PARDER          reduce using rule 159 (empty -> .)

    funparamr                      shift and go to state 115
    empty                          shift and go to state 96

state 111

    (144) body_main -> MAIN PARIZQ PARDER mainbloque .

    LLAVEDER        reduce using rule 144 (body_main -> MAIN PARIZQ PARDER mainbloque .)


state 112

    (148) mainbloque -> LLAVEIZQ . body2 estatuto LLAVEDER
    (146) body2 -> . vars multvarsdecl
    (147) body2 -> . empty
    (52) vars -> . vars3 tipo vars2 COLON
    (53) vars -> . vars3 tipo LIST vars2 COLON
    (159) empty -> .
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty

    ID              reduce using rule 159 (empty -> .)
    IF              reduce using rule 159 (empty -> .)
    WRITE           reduce using rule 159 (empty -> .)
    FOR             reduce using rule 159 (empty -> .)
    WHILE           reduce using rule 159 (empty -> .)
    WHEN            reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    CID             reduce using rule 159 (empty -> .)
    PRIVATE         shift and go to state 30

    body2                          shift and go to state 116
    vars                           shift and go to state 52
    empty                          shift and go to state 53
    vars3                          shift and go to state 54

state 113

    (130) fun -> vars3 FUN ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 117


state 114

    (21) classparams3 -> COMA vars3 tipo ID classparams3 .

    PARDER          reduce using rule 21 (classparams3 -> COMA vars3 tipo ID classparams3 .)


state 115

    (133) funparamr -> COMA tipo ID funparamr .

    PARDER          reduce using rule 133 (funparamr -> COMA tipo ID funparamr .)


state 116

    (148) mainbloque -> LLAVEIZQ body2 . estatuto LLAVEDER
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    LLAVEDER        reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    estatuto                       shift and go to state 118
    asignacion                     shift and go to state 119
    condicion                      shift and go to state 120
    escritura                      shift and go to state 121
    for                            shift and go to state 122
    while                          shift and go to state 123
    when                           shift and go to state 124
    llamada                        shift and go to state 125
    obj_call                       shift and go to state 126
    empty                          shift and go to state 127

state 117

    (130) fun -> vars3 FUN ID PARIZQ fun2 PARDER . fun3 funbody
    (135) fun3 -> . DOSPUNTOS tipo
    (136) fun3 -> . empty
    (159) empty -> .

    DOSPUNTOS       shift and go to state 135
    LLAVEIZQ        reduce using rule 159 (empty -> .)

    fun3                           shift and go to state 134
    empty                          shift and go to state 136

state 118

    (148) mainbloque -> LLAVEIZQ body2 estatuto . LLAVEDER

    LLAVEDER        shift and go to state 137


state 119

    (59) estatuto -> asignacion . estatuto
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    LLAVEDER        reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    asignacion                     shift and go to state 119
    estatuto                       shift and go to state 138
    condicion                      shift and go to state 120
    escritura                      shift and go to state 121
    for                            shift and go to state 122
    while                          shift and go to state 123
    when                           shift and go to state 124
    llamada                        shift and go to state 125
    obj_call                       shift and go to state 126
    empty                          shift and go to state 127

state 120

    (60) estatuto -> condicion . estatuto
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    LLAVEDER        reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    condicion                      shift and go to state 120
    estatuto                       shift and go to state 139
    asignacion                     shift and go to state 119
    escritura                      shift and go to state 121
    for                            shift and go to state 122
    while                          shift and go to state 123
    when                           shift and go to state 124
    llamada                        shift and go to state 125
    obj_call                       shift and go to state 126
    empty                          shift and go to state 127

state 121

    (61) estatuto -> escritura . estatuto
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    LLAVEDER        reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    escritura                      shift and go to state 121
    estatuto                       shift and go to state 140
    asignacion                     shift and go to state 119
    condicion                      shift and go to state 120
    for                            shift and go to state 122
    while                          shift and go to state 123
    when                           shift and go to state 124
    llamada                        shift and go to state 125
    obj_call                       shift and go to state 126
    empty                          shift and go to state 127

state 122

    (62) estatuto -> for . estatuto
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    LLAVEDER        reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    for                            shift and go to state 122
    estatuto                       shift and go to state 141
    asignacion                     shift and go to state 119
    condicion                      shift and go to state 120
    escritura                      shift and go to state 121
    while                          shift and go to state 123
    when                           shift and go to state 124
    llamada                        shift and go to state 125
    obj_call                       shift and go to state 126
    empty                          shift and go to state 127

state 123

    (63) estatuto -> while . estatuto
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    LLAVEDER        reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    while                          shift and go to state 123
    estatuto                       shift and go to state 142
    asignacion                     shift and go to state 119
    condicion                      shift and go to state 120
    escritura                      shift and go to state 121
    for                            shift and go to state 122
    when                           shift and go to state 124
    llamada                        shift and go to state 125
    obj_call                       shift and go to state 126
    empty                          shift and go to state 127

state 124

    (64) estatuto -> when . estatuto
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    LLAVEDER        reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    when                           shift and go to state 124
    estatuto                       shift and go to state 143
    asignacion                     shift and go to state 119
    condicion                      shift and go to state 120
    escritura                      shift and go to state 121
    for                            shift and go to state 122
    while                          shift and go to state 123
    llamada                        shift and go to state 125
    obj_call                       shift and go to state 126
    empty                          shift and go to state 127

state 125

    (65) estatuto -> llamada . estatuto
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    LLAVEDER        reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    llamada                        shift and go to state 125
    estatuto                       shift and go to state 144
    asignacion                     shift and go to state 119
    condicion                      shift and go to state 120
    escritura                      shift and go to state 121
    for                            shift and go to state 122
    while                          shift and go to state 123
    when                           shift and go to state 124
    obj_call                       shift and go to state 126
    empty                          shift and go to state 127

state 126

    (66) estatuto -> obj_call . estatuto
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    LLAVEDER        reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    obj_call                       shift and go to state 126
    estatuto                       shift and go to state 145
    asignacion                     shift and go to state 119
    condicion                      shift and go to state 120
    escritura                      shift and go to state 121
    for                            shift and go to state 122
    while                          shift and go to state 123
    when                           shift and go to state 124
    llamada                        shift and go to state 125
    empty                          shift and go to state 127

state 127

    (67) estatuto -> empty .
    (154) llamada -> empty .
    (156) obj_call -> empty .

  ! reduce/reduce conflict for LLAVEDER resolved using rule 67 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 67 (estatuto -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for WHEN resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 67 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 67 (estatuto -> empty .)
    LLAVEDER        reduce using rule 67 (estatuto -> empty .)
    RETURN          reduce using rule 67 (estatuto -> empty .)
    ID              reduce using rule 154 (llamada -> empty .)
    IF              reduce using rule 154 (llamada -> empty .)
    WRITE           reduce using rule 154 (llamada -> empty .)
    FOR             reduce using rule 154 (llamada -> empty .)
    WHILE           reduce using rule 154 (llamada -> empty .)
    WHEN            reduce using rule 154 (llamada -> empty .)

  ! LLAVEDER        [ reduce using rule 154 (llamada -> empty .) ]
  ! RETURN          [ reduce using rule 154 (llamada -> empty .) ]
  ! ID              [ reduce using rule 156 (obj_call -> empty .) ]
  ! IF              [ reduce using rule 156 (obj_call -> empty .) ]
  ! WRITE           [ reduce using rule 156 (obj_call -> empty .) ]
  ! FOR             [ reduce using rule 156 (obj_call -> empty .) ]
  ! WHILE           [ reduce using rule 156 (obj_call -> empty .) ]
  ! WHEN            [ reduce using rule 156 (obj_call -> empty .) ]
  ! LLAVEDER        [ reduce using rule 156 (obj_call -> empty .) ]
  ! RETURN          [ reduce using rule 156 (obj_call -> empty .) ]


state 128

    (68) asignacion -> ID . asignacion3 IGUAL asignacion2 COLON
    (153) llamada -> ID . PARIZQ llamada_param PARDER COLON
    (155) obj_call -> ID . PUNTO ID PARIZQ llamada_param PARDER COLON
    (79) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (80) asignacion3 -> . PUNTO ID
    (81) asignacion3 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 147
    PUNTO           shift and go to state 148
    CORCHIZQ        shift and go to state 149
    IGUAL           reduce using rule 159 (empty -> .)

    asignacion3                    shift and go to state 146
    empty                          shift and go to state 150

state 129

    (82) condicion -> IF . condicion2 estatutor
    (83) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 152

    condicion2                     shift and go to state 151

state 130

    (93) escritura -> WRITE . PARIZQ esc1 esc2 PARDER COLON

    PARIZQ          shift and go to state 153


state 131

    (118) for -> FOR . PARIZQ ID IN for2 PARDER bloque

    PARIZQ          shift and go to state 154


state 132

    (125) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 155


state 133

    (126) when -> WHEN . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 156


state 134

    (130) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 . funbody
    (137) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 158

    funbody                        shift and go to state 157

state 135

    (135) fun3 -> DOSPUNTOS . tipo
    (98) tipo -> . INT
    (99) tipo -> . FLOAT
    (100) tipo -> . BOOL
    (101) tipo -> . STRING
    (102) tipo -> . CID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    BOOL            shift and go to state 45
    STRING          shift and go to state 46
    CID             shift and go to state 47

    tipo                           shift and go to state 159

state 136

    (136) fun3 -> empty .

    LLAVEIZQ        reduce using rule 136 (fun3 -> empty .)


state 137

    (148) mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .

    LLAVEDER        reduce using rule 148 (mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .)


state 138

    (59) estatuto -> asignacion estatuto .

    LLAVEDER        reduce using rule 59 (estatuto -> asignacion estatuto .)
    RETURN          reduce using rule 59 (estatuto -> asignacion estatuto .)


state 139

    (60) estatuto -> condicion estatuto .

    LLAVEDER        reduce using rule 60 (estatuto -> condicion estatuto .)
    RETURN          reduce using rule 60 (estatuto -> condicion estatuto .)


state 140

    (61) estatuto -> escritura estatuto .

    LLAVEDER        reduce using rule 61 (estatuto -> escritura estatuto .)
    RETURN          reduce using rule 61 (estatuto -> escritura estatuto .)


state 141

    (62) estatuto -> for estatuto .

    LLAVEDER        reduce using rule 62 (estatuto -> for estatuto .)
    RETURN          reduce using rule 62 (estatuto -> for estatuto .)


state 142

    (63) estatuto -> while estatuto .

    LLAVEDER        reduce using rule 63 (estatuto -> while estatuto .)
    RETURN          reduce using rule 63 (estatuto -> while estatuto .)


state 143

    (64) estatuto -> when estatuto .

    LLAVEDER        reduce using rule 64 (estatuto -> when estatuto .)
    RETURN          reduce using rule 64 (estatuto -> when estatuto .)


state 144

    (65) estatuto -> llamada estatuto .

    LLAVEDER        reduce using rule 65 (estatuto -> llamada estatuto .)
    RETURN          reduce using rule 65 (estatuto -> llamada estatuto .)


state 145

    (66) estatuto -> obj_call estatuto .

    LLAVEDER        reduce using rule 66 (estatuto -> obj_call estatuto .)
    RETURN          reduce using rule 66 (estatuto -> obj_call estatuto .)


state 146

    (68) asignacion -> ID asignacion3 . IGUAL asignacion2 COLON

    IGUAL           shift and go to state 160


state 147

    (153) llamada -> ID PARIZQ . llamada_param PARDER COLON
    (157) llamada_param -> . expresion expresionr
    (158) llamada_param -> . empty
    (35) expresion -> . megaexp
    (159) empty -> .
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty

    PARDER          reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172

    llamada_param                  shift and go to state 162
    expresion                      shift and go to state 163
    empty                          shift and go to state 164
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170

state 148

    (155) obj_call -> ID PUNTO . ID PARIZQ llamada_param PARDER COLON
    (80) asignacion3 -> PUNTO . ID

    ID              shift and go to state 173


state 149

    (79) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    expresion                      shift and go to state 174
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 150

    (81) asignacion3 -> empty .

    IGUAL           reduce using rule 81 (asignacion3 -> empty .)


state 151

    (82) condicion -> IF condicion2 . estatutor
    (91) estatutor -> . ELSE bloque
    (92) estatutor -> . empty
    (159) empty -> .

    ELSE            shift and go to state 177
    ID              reduce using rule 159 (empty -> .)
    IF              reduce using rule 159 (empty -> .)
    WRITE           reduce using rule 159 (empty -> .)
    FOR             reduce using rule 159 (empty -> .)
    WHILE           reduce using rule 159 (empty -> .)
    WHEN            reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)

    estatutor                      shift and go to state 176
    empty                          shift and go to state 178

state 152

    (83) condicion2 -> PARIZQ . expresion PARDER bloque
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    expresion                      shift and go to state 179
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 153

    (93) escritura -> WRITE PARIZQ . esc1 esc2 PARDER COLON
    (94) esc1 -> . expresion
    (95) esc1 -> . STRING
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    STRING          shift and go to state 182
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    esc1                           shift and go to state 180
    expresion                      shift and go to state 181
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 154

    (118) for -> FOR PARIZQ . ID IN for2 PARDER bloque

    ID              shift and go to state 183


state 155

    (125) while -> WHILE PARIZQ . expresion PARDER bloque
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    expresion                      shift and go to state 184
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 156

    (126) when -> WHEN LLAVEIZQ . when2 LLAVEDER
    (127) when2 -> . expresion FLECHITA bloque when2
    (128) when2 -> . ELSE FLECHITA bloque
    (129) when2 -> . empty
    (35) expresion -> . megaexp
    (159) empty -> .
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty

    ELSE            shift and go to state 187
    LLAVEDER        reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172

    when2                          shift and go to state 185
    expresion                      shift and go to state 186
    empty                          shift and go to state 188
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170

state 157

    (130) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .

    PRIVATE         reduce using rule 130 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    FUN             reduce using rule 130 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    MAIN            reduce using rule 130 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    LLAVEDER        reduce using rule 130 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)


state 158

    (137) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (138) opc1 -> . vars multvarsdecl
    (139) opc1 -> . empty
    (52) vars -> . vars3 tipo vars2 COLON
    (53) vars -> . vars3 tipo LIST vars2 COLON
    (159) empty -> .
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty

    ID              reduce using rule 159 (empty -> .)
    IF              reduce using rule 159 (empty -> .)
    WRITE           reduce using rule 159 (empty -> .)
    FOR             reduce using rule 159 (empty -> .)
    WHILE           reduce using rule 159 (empty -> .)
    WHEN            reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    CID             reduce using rule 159 (empty -> .)
    PRIVATE         shift and go to state 30

    opc1                           shift and go to state 189
    vars                           shift and go to state 190
    empty                          shift and go to state 191
    vars3                          shift and go to state 54

state 159

    (135) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 135 (fun3 -> DOSPUNTOS tipo .)


state 160

    (68) asignacion -> ID asignacion3 IGUAL . asignacion2 COLON
    (69) asignacion2 -> . expresion
    (70) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (71) asignacion2 -> . READ PARIZQ assign_read PARDER
    (72) asignacion2 -> . CID PARIZQ class_call_args expresionr PARDER
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    CORCHDER        shift and go to state 194
    READ            shift and go to state 195
    CID             shift and go to state 196
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    asignacion2                    shift and go to state 192
    expresion                      shift and go to state 193
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 161

    (103) factor -> PARIZQ . expresion PARDER
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    expresion                      shift and go to state 197
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 162

    (153) llamada -> ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 198


state 163

    (157) llamada_param -> expresion . expresionr
    (36) expresionr -> . COMA expresion expresionr
    (37) expresionr -> . empty
    (159) empty -> .

    COMA            shift and go to state 200
    PARDER          reduce using rule 159 (empty -> .)

    expresionr                     shift and go to state 199
    empty                          shift and go to state 201

state 164

    (158) llamada_param -> empty .
    (117) factor2 -> empty .

    PARDER          reduce using rule 158 (llamada_param -> empty .)
    ID              reduce using rule 117 (factor2 -> empty .)
    INTNUM          reduce using rule 117 (factor2 -> empty .)
    FLOATNUM        reduce using rule 117 (factor2 -> empty .)
    TRUE            reduce using rule 117 (factor2 -> empty .)
    FALSE           reduce using rule 117 (factor2 -> empty .)
    STRINGVAL       reduce using rule 117 (factor2 -> empty .)
    NULL            reduce using rule 117 (factor2 -> empty .)


state 165

    (35) expresion -> megaexp .

    COMA            reduce using rule 35 (expresion -> megaexp .)
    PARDER          reduce using rule 35 (expresion -> megaexp .)
    CORCHDER        reduce using rule 35 (expresion -> megaexp .)
    FLECHITA        reduce using rule 35 (expresion -> megaexp .)
    COLON           reduce using rule 35 (expresion -> megaexp .)
    CORCHIZQ        reduce using rule 35 (expresion -> megaexp .)


state 166

    (48) megaexp -> superexp . megaexpr
    (49) megaexpr -> . AND superexp megaexpr
    (50) megaexpr -> . OR superexp megaexpr
    (51) megaexpr -> . empty
    (159) empty -> .

    AND             shift and go to state 203
    OR              shift and go to state 204
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    megaexpr                       shift and go to state 202
    empty                          shift and go to state 205

state 167

    (40) superexp -> exp . oplog
    (41) oplog -> . MAYORQUE exp
    (42) oplog -> . MENORQUE exp
    (43) oplog -> . DIFERENTE exp
    (44) oplog -> . MAYOROIGUAL exp
    (45) oplog -> . MENOROIGUAL exp
    (46) oplog -> . IGUALIGUAL exp
    (47) oplog -> . empty
    (159) empty -> .

    MAYORQUE        shift and go to state 207
    MENORQUE        shift and go to state 208
    DIFERENTE       shift and go to state 209
    MAYOROIGUAL     shift and go to state 210
    MENOROIGUAL     shift and go to state 211
    IGUALIGUAL      shift and go to state 212
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    oplog                          shift and go to state 206
    empty                          shift and go to state 213

state 168

    (109) exp -> termino . expr
    (110) expr -> . MAS termino expr
    (111) expr -> . MENOS termino expr
    (112) expr -> . empty
    (159) empty -> .

    MAS             shift and go to state 215
    MENOS           shift and go to state 216
    MAYORQUE        reduce using rule 159 (empty -> .)
    MENORQUE        reduce using rule 159 (empty -> .)
    DIFERENTE       reduce using rule 159 (empty -> .)
    MAYOROIGUAL     reduce using rule 159 (empty -> .)
    MENOROIGUAL     reduce using rule 159 (empty -> .)
    IGUALIGUAL      reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    expr                           shift and go to state 214
    empty                          shift and go to state 217

state 169

    (108) termino -> factor . terminor
    (105) terminor -> . POR factor terminor
    (106) terminor -> . SOBRE factor terminor
    (107) terminor -> . empty
    (159) empty -> .

    POR             shift and go to state 219
    SOBRE           shift and go to state 220
    MAS             reduce using rule 159 (empty -> .)
    MENOS           reduce using rule 159 (empty -> .)
    MAYORQUE        reduce using rule 159 (empty -> .)
    MENORQUE        reduce using rule 159 (empty -> .)
    DIFERENTE       reduce using rule 159 (empty -> .)
    MAYOROIGUAL     reduce using rule 159 (empty -> .)
    MENOROIGUAL     reduce using rule 159 (empty -> .)
    IGUALIGUAL      reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    terminor                       shift and go to state 218
    empty                          shift and go to state 221

state 170

    (104) factor -> factor2 . varcte
    (23) varcte -> . ID
    (24) varcte -> . INTNUM
    (25) varcte -> . FLOATNUM
    (26) varcte -> . TRUE
    (27) varcte -> . FALSE
    (28) varcte -> . STRINGVAL
    (29) varcte -> . NULL
    (30) varcte -> . ID CORCHIZQ varcte CORCHDER
    (31) varcte -> . ID PUNTO ID varcte_param_fun
    (32) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 223
    INTNUM          shift and go to state 224
    FLOATNUM        shift and go to state 225
    TRUE            shift and go to state 226
    FALSE           shift and go to state 227
    STRINGVAL       shift and go to state 228
    NULL            shift and go to state 229

    varcte                         shift and go to state 222

state 171

    (115) factor2 -> MAS .

    ID              reduce using rule 115 (factor2 -> MAS .)
    INTNUM          reduce using rule 115 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 115 (factor2 -> MAS .)
    TRUE            reduce using rule 115 (factor2 -> MAS .)
    FALSE           reduce using rule 115 (factor2 -> MAS .)
    STRINGVAL       reduce using rule 115 (factor2 -> MAS .)
    NULL            reduce using rule 115 (factor2 -> MAS .)


state 172

    (116) factor2 -> MENOS .

    ID              reduce using rule 116 (factor2 -> MENOS .)
    INTNUM          reduce using rule 116 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 116 (factor2 -> MENOS .)
    TRUE            reduce using rule 116 (factor2 -> MENOS .)
    FALSE           reduce using rule 116 (factor2 -> MENOS .)
    STRINGVAL       reduce using rule 116 (factor2 -> MENOS .)
    NULL            reduce using rule 116 (factor2 -> MENOS .)


state 173

    (155) obj_call -> ID PUNTO ID . PARIZQ llamada_param PARDER COLON
    (80) asignacion3 -> PUNTO ID .

    PARIZQ          shift and go to state 230
    IGUAL           reduce using rule 80 (asignacion3 -> PUNTO ID .)


state 174

    (79) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 231


state 175

    (117) factor2 -> empty .

    ID              reduce using rule 117 (factor2 -> empty .)
    INTNUM          reduce using rule 117 (factor2 -> empty .)
    FLOATNUM        reduce using rule 117 (factor2 -> empty .)
    TRUE            reduce using rule 117 (factor2 -> empty .)
    FALSE           reduce using rule 117 (factor2 -> empty .)
    STRINGVAL       reduce using rule 117 (factor2 -> empty .)
    NULL            reduce using rule 117 (factor2 -> empty .)


state 176

    (82) condicion -> IF condicion2 estatutor .

    ID              reduce using rule 82 (condicion -> IF condicion2 estatutor .)
    IF              reduce using rule 82 (condicion -> IF condicion2 estatutor .)
    WRITE           reduce using rule 82 (condicion -> IF condicion2 estatutor .)
    FOR             reduce using rule 82 (condicion -> IF condicion2 estatutor .)
    WHILE           reduce using rule 82 (condicion -> IF condicion2 estatutor .)
    WHEN            reduce using rule 82 (condicion -> IF condicion2 estatutor .)
    LLAVEDER        reduce using rule 82 (condicion -> IF condicion2 estatutor .)
    RETURN          reduce using rule 82 (condicion -> IF condicion2 estatutor .)


state 177

    (91) estatutor -> ELSE . bloque
    (86) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 233

    bloque                         shift and go to state 232

state 178

    (92) estatutor -> empty .

    ID              reduce using rule 92 (estatutor -> empty .)
    IF              reduce using rule 92 (estatutor -> empty .)
    WRITE           reduce using rule 92 (estatutor -> empty .)
    FOR             reduce using rule 92 (estatutor -> empty .)
    WHILE           reduce using rule 92 (estatutor -> empty .)
    WHEN            reduce using rule 92 (estatutor -> empty .)
    LLAVEDER        reduce using rule 92 (estatutor -> empty .)
    RETURN          reduce using rule 92 (estatutor -> empty .)


state 179

    (83) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 234


state 180

    (93) escritura -> WRITE PARIZQ esc1 . esc2 PARDER COLON
    (96) esc2 -> . COMA esc1 esc2
    (97) esc2 -> . empty
    (159) empty -> .

    COMA            shift and go to state 236
    PARDER          reduce using rule 159 (empty -> .)

    esc2                           shift and go to state 235
    empty                          shift and go to state 237

state 181

    (94) esc1 -> expresion .

    COMA            reduce using rule 94 (esc1 -> expresion .)
    PARDER          reduce using rule 94 (esc1 -> expresion .)


state 182

    (95) esc1 -> STRING .

    COMA            reduce using rule 95 (esc1 -> STRING .)
    PARDER          reduce using rule 95 (esc1 -> STRING .)


state 183

    (118) for -> FOR PARIZQ ID . IN for2 PARDER bloque

    IN              shift and go to state 238


state 184

    (125) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 239


state 185

    (126) when -> WHEN LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 240


state 186

    (127) when2 -> expresion . FLECHITA bloque when2

    FLECHITA        shift and go to state 241


state 187

    (128) when2 -> ELSE . FLECHITA bloque

    FLECHITA        shift and go to state 242


state 188

    (129) when2 -> empty .
    (117) factor2 -> empty .

    LLAVEDER        reduce using rule 129 (when2 -> empty .)
    ID              reduce using rule 117 (factor2 -> empty .)
    INTNUM          reduce using rule 117 (factor2 -> empty .)
    FLOATNUM        reduce using rule 117 (factor2 -> empty .)
    TRUE            reduce using rule 117 (factor2 -> empty .)
    FALSE           reduce using rule 117 (factor2 -> empty .)
    STRINGVAL       reduce using rule 117 (factor2 -> empty .)
    NULL            reduce using rule 117 (factor2 -> empty .)


state 189

    (137) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (140) opc2 -> . estatuto
    (141) opc2 -> . empty
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (159) empty -> .
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    opc2                           shift and go to state 243
    estatuto                       shift and go to state 244
    empty                          shift and go to state 245
    asignacion                     shift and go to state 119
    condicion                      shift and go to state 120
    escritura                      shift and go to state 121
    for                            shift and go to state 122
    while                          shift and go to state 123
    when                           shift and go to state 124
    llamada                        shift and go to state 125
    obj_call                       shift and go to state 126

state 190

    (138) opc1 -> vars . multvarsdecl
    (149) multvarsdecl -> . vars multvarsdecl
    (150) multvarsdecl -> . empty
    (52) vars -> . vars3 tipo vars2 COLON
    (53) vars -> . vars3 tipo LIST vars2 COLON
    (159) empty -> .
    (57) vars3 -> . PRIVATE
    (58) vars3 -> . empty

    ID              reduce using rule 159 (empty -> .)
    IF              reduce using rule 159 (empty -> .)
    WRITE           reduce using rule 159 (empty -> .)
    FOR             reduce using rule 159 (empty -> .)
    WHILE           reduce using rule 159 (empty -> .)
    WHEN            reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    CID             reduce using rule 159 (empty -> .)
    PRIVATE         shift and go to state 30

    vars                           shift and go to state 66
    multvarsdecl                   shift and go to state 246
    empty                          shift and go to state 68
    vars3                          shift and go to state 54

state 191

    (139) opc1 -> empty .
    (58) vars3 -> empty .

    ID              reduce using rule 139 (opc1 -> empty .)
    IF              reduce using rule 139 (opc1 -> empty .)
    WRITE           reduce using rule 139 (opc1 -> empty .)
    FOR             reduce using rule 139 (opc1 -> empty .)
    WHILE           reduce using rule 139 (opc1 -> empty .)
    WHEN            reduce using rule 139 (opc1 -> empty .)
    RETURN          reduce using rule 139 (opc1 -> empty .)
    LLAVEDER        reduce using rule 139 (opc1 -> empty .)
    INT             reduce using rule 58 (vars3 -> empty .)
    FLOAT           reduce using rule 58 (vars3 -> empty .)
    BOOL            reduce using rule 58 (vars3 -> empty .)
    STRING          reduce using rule 58 (vars3 -> empty .)
    CID             reduce using rule 58 (vars3 -> empty .)


state 192

    (68) asignacion -> ID asignacion3 IGUAL asignacion2 . COLON

    COLON           shift and go to state 247


state 193

    (69) asignacion2 -> expresion .

    COLON           reduce using rule 69 (asignacion2 -> expresion .)


state 194

    (70) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    expresion                      shift and go to state 248
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 195

    (71) asignacion2 -> READ . PARIZQ assign_read PARDER

    PARIZQ          shift and go to state 249


state 196

    (72) asignacion2 -> CID . PARIZQ class_call_args expresionr PARDER

    PARIZQ          shift and go to state 250


state 197

    (103) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 251


state 198

    (153) llamada -> ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 252


state 199

    (157) llamada_param -> expresion expresionr .

    PARDER          reduce using rule 157 (llamada_param -> expresion expresionr .)


state 200

    (36) expresionr -> COMA . expresion expresionr
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    expresion                      shift and go to state 253
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 201

    (37) expresionr -> empty .

    PARDER          reduce using rule 37 (expresionr -> empty .)


state 202

    (48) megaexp -> superexp megaexpr .

    COMA            reduce using rule 48 (megaexp -> superexp megaexpr .)
    PARDER          reduce using rule 48 (megaexp -> superexp megaexpr .)
    CORCHDER        reduce using rule 48 (megaexp -> superexp megaexpr .)
    FLECHITA        reduce using rule 48 (megaexp -> superexp megaexpr .)
    COLON           reduce using rule 48 (megaexp -> superexp megaexpr .)
    CORCHIZQ        reduce using rule 48 (megaexp -> superexp megaexpr .)


state 203

    (49) megaexpr -> AND . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    superexp                       shift and go to state 254
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 204

    (50) megaexpr -> OR . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    superexp                       shift and go to state 255
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 205

    (51) megaexpr -> empty .

    COMA            reduce using rule 51 (megaexpr -> empty .)
    PARDER          reduce using rule 51 (megaexpr -> empty .)
    CORCHDER        reduce using rule 51 (megaexpr -> empty .)
    FLECHITA        reduce using rule 51 (megaexpr -> empty .)
    COLON           reduce using rule 51 (megaexpr -> empty .)
    CORCHIZQ        reduce using rule 51 (megaexpr -> empty .)


state 206

    (40) superexp -> exp oplog .

    AND             reduce using rule 40 (superexp -> exp oplog .)
    OR              reduce using rule 40 (superexp -> exp oplog .)
    COMA            reduce using rule 40 (superexp -> exp oplog .)
    PARDER          reduce using rule 40 (superexp -> exp oplog .)
    CORCHDER        reduce using rule 40 (superexp -> exp oplog .)
    FLECHITA        reduce using rule 40 (superexp -> exp oplog .)
    COLON           reduce using rule 40 (superexp -> exp oplog .)
    CORCHIZQ        reduce using rule 40 (superexp -> exp oplog .)


state 207

    (41) oplog -> MAYORQUE . exp
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    exp                            shift and go to state 256
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 208

    (42) oplog -> MENORQUE . exp
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    exp                            shift and go to state 257
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 209

    (43) oplog -> DIFERENTE . exp
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    exp                            shift and go to state 258
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 210

    (44) oplog -> MAYOROIGUAL . exp
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    exp                            shift and go to state 259
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 211

    (45) oplog -> MENOROIGUAL . exp
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    exp                            shift and go to state 260
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 212

    (46) oplog -> IGUALIGUAL . exp
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    exp                            shift and go to state 261
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 213

    (47) oplog -> empty .

    AND             reduce using rule 47 (oplog -> empty .)
    OR              reduce using rule 47 (oplog -> empty .)
    COMA            reduce using rule 47 (oplog -> empty .)
    PARDER          reduce using rule 47 (oplog -> empty .)
    CORCHDER        reduce using rule 47 (oplog -> empty .)
    FLECHITA        reduce using rule 47 (oplog -> empty .)
    COLON           reduce using rule 47 (oplog -> empty .)
    CORCHIZQ        reduce using rule 47 (oplog -> empty .)


state 214

    (109) exp -> termino expr .

    MAYORQUE        reduce using rule 109 (exp -> termino expr .)
    MENORQUE        reduce using rule 109 (exp -> termino expr .)
    DIFERENTE       reduce using rule 109 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 109 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 109 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 109 (exp -> termino expr .)
    AND             reduce using rule 109 (exp -> termino expr .)
    OR              reduce using rule 109 (exp -> termino expr .)
    COMA            reduce using rule 109 (exp -> termino expr .)
    PARDER          reduce using rule 109 (exp -> termino expr .)
    CORCHDER        reduce using rule 109 (exp -> termino expr .)
    FLECHITA        reduce using rule 109 (exp -> termino expr .)
    COLON           reduce using rule 109 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 109 (exp -> termino expr .)


state 215

    (110) expr -> MAS . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    termino                        shift and go to state 262
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 216

    (111) expr -> MENOS . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    termino                        shift and go to state 263
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 217

    (112) expr -> empty .

    MAYORQUE        reduce using rule 112 (expr -> empty .)
    MENORQUE        reduce using rule 112 (expr -> empty .)
    DIFERENTE       reduce using rule 112 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 112 (expr -> empty .)
    MENOROIGUAL     reduce using rule 112 (expr -> empty .)
    IGUALIGUAL      reduce using rule 112 (expr -> empty .)
    AND             reduce using rule 112 (expr -> empty .)
    OR              reduce using rule 112 (expr -> empty .)
    COMA            reduce using rule 112 (expr -> empty .)
    PARDER          reduce using rule 112 (expr -> empty .)
    CORCHDER        reduce using rule 112 (expr -> empty .)
    FLECHITA        reduce using rule 112 (expr -> empty .)
    COLON           reduce using rule 112 (expr -> empty .)
    CORCHIZQ        reduce using rule 112 (expr -> empty .)


state 218

    (108) termino -> factor terminor .

    MAS             reduce using rule 108 (termino -> factor terminor .)
    MENOS           reduce using rule 108 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 108 (termino -> factor terminor .)
    MENORQUE        reduce using rule 108 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 108 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 108 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 108 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 108 (termino -> factor terminor .)
    AND             reduce using rule 108 (termino -> factor terminor .)
    OR              reduce using rule 108 (termino -> factor terminor .)
    COMA            reduce using rule 108 (termino -> factor terminor .)
    PARDER          reduce using rule 108 (termino -> factor terminor .)
    CORCHDER        reduce using rule 108 (termino -> factor terminor .)
    FLECHITA        reduce using rule 108 (termino -> factor terminor .)
    COLON           reduce using rule 108 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 108 (termino -> factor terminor .)


state 219

    (105) terminor -> POR . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    factor                         shift and go to state 264
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 220

    (106) terminor -> SOBRE . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    factor                         shift and go to state 265
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 221

    (107) terminor -> empty .

    MAS             reduce using rule 107 (terminor -> empty .)
    MENOS           reduce using rule 107 (terminor -> empty .)
    MAYORQUE        reduce using rule 107 (terminor -> empty .)
    MENORQUE        reduce using rule 107 (terminor -> empty .)
    DIFERENTE       reduce using rule 107 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 107 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 107 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 107 (terminor -> empty .)
    AND             reduce using rule 107 (terminor -> empty .)
    OR              reduce using rule 107 (terminor -> empty .)
    COMA            reduce using rule 107 (terminor -> empty .)
    PARDER          reduce using rule 107 (terminor -> empty .)
    CORCHDER        reduce using rule 107 (terminor -> empty .)
    FLECHITA        reduce using rule 107 (terminor -> empty .)
    COLON           reduce using rule 107 (terminor -> empty .)
    CORCHIZQ        reduce using rule 107 (terminor -> empty .)


state 222

    (104) factor -> factor2 varcte .

    POR             reduce using rule 104 (factor -> factor2 varcte .)
    SOBRE           reduce using rule 104 (factor -> factor2 varcte .)
    MAS             reduce using rule 104 (factor -> factor2 varcte .)
    MENOS           reduce using rule 104 (factor -> factor2 varcte .)
    MAYORQUE        reduce using rule 104 (factor -> factor2 varcte .)
    MENORQUE        reduce using rule 104 (factor -> factor2 varcte .)
    DIFERENTE       reduce using rule 104 (factor -> factor2 varcte .)
    MAYOROIGUAL     reduce using rule 104 (factor -> factor2 varcte .)
    MENOROIGUAL     reduce using rule 104 (factor -> factor2 varcte .)
    IGUALIGUAL      reduce using rule 104 (factor -> factor2 varcte .)
    AND             reduce using rule 104 (factor -> factor2 varcte .)
    OR              reduce using rule 104 (factor -> factor2 varcte .)
    COMA            reduce using rule 104 (factor -> factor2 varcte .)
    PARDER          reduce using rule 104 (factor -> factor2 varcte .)
    CORCHDER        reduce using rule 104 (factor -> factor2 varcte .)
    FLECHITA        reduce using rule 104 (factor -> factor2 varcte .)
    COLON           reduce using rule 104 (factor -> factor2 varcte .)
    CORCHIZQ        reduce using rule 104 (factor -> factor2 varcte .)


state 223

    (23) varcte -> ID .
    (30) varcte -> ID . CORCHIZQ varcte CORCHDER
    (31) varcte -> ID . PUNTO ID varcte_param_fun
    (32) varcte -> ID . PARIZQ llamada_param PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    POR             reduce using rule 23 (varcte -> ID .)
    SOBRE           reduce using rule 23 (varcte -> ID .)
    MAS             reduce using rule 23 (varcte -> ID .)
    MENOS           reduce using rule 23 (varcte -> ID .)
    MAYORQUE        reduce using rule 23 (varcte -> ID .)
    MENORQUE        reduce using rule 23 (varcte -> ID .)
    DIFERENTE       reduce using rule 23 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 23 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 23 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 23 (varcte -> ID .)
    AND             reduce using rule 23 (varcte -> ID .)
    OR              reduce using rule 23 (varcte -> ID .)
    COMA            reduce using rule 23 (varcte -> ID .)
    PARDER          reduce using rule 23 (varcte -> ID .)
    CORCHDER        reduce using rule 23 (varcte -> ID .)
    FLECHITA        reduce using rule 23 (varcte -> ID .)
    COLON           reduce using rule 23 (varcte -> ID .)
    CORCHIZQ        shift and go to state 266
    PUNTO           shift and go to state 267
    PARIZQ          shift and go to state 268

  ! CORCHIZQ        [ reduce using rule 23 (varcte -> ID .) ]


state 224

    (24) varcte -> INTNUM .

    POR             reduce using rule 24 (varcte -> INTNUM .)
    SOBRE           reduce using rule 24 (varcte -> INTNUM .)
    MAS             reduce using rule 24 (varcte -> INTNUM .)
    MENOS           reduce using rule 24 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 24 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 24 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 24 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 24 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 24 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 24 (varcte -> INTNUM .)
    AND             reduce using rule 24 (varcte -> INTNUM .)
    OR              reduce using rule 24 (varcte -> INTNUM .)
    COMA            reduce using rule 24 (varcte -> INTNUM .)
    PARDER          reduce using rule 24 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 24 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 24 (varcte -> INTNUM .)
    COLON           reduce using rule 24 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 24 (varcte -> INTNUM .)


state 225

    (25) varcte -> FLOATNUM .

    POR             reduce using rule 25 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 25 (varcte -> FLOATNUM .)
    MAS             reduce using rule 25 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 25 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 25 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 25 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 25 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 25 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 25 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 25 (varcte -> FLOATNUM .)
    AND             reduce using rule 25 (varcte -> FLOATNUM .)
    OR              reduce using rule 25 (varcte -> FLOATNUM .)
    COMA            reduce using rule 25 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 25 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 25 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 25 (varcte -> FLOATNUM .)
    COLON           reduce using rule 25 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 25 (varcte -> FLOATNUM .)


state 226

    (26) varcte -> TRUE .

    POR             reduce using rule 26 (varcte -> TRUE .)
    SOBRE           reduce using rule 26 (varcte -> TRUE .)
    MAS             reduce using rule 26 (varcte -> TRUE .)
    MENOS           reduce using rule 26 (varcte -> TRUE .)
    MAYORQUE        reduce using rule 26 (varcte -> TRUE .)
    MENORQUE        reduce using rule 26 (varcte -> TRUE .)
    DIFERENTE       reduce using rule 26 (varcte -> TRUE .)
    MAYOROIGUAL     reduce using rule 26 (varcte -> TRUE .)
    MENOROIGUAL     reduce using rule 26 (varcte -> TRUE .)
    IGUALIGUAL      reduce using rule 26 (varcte -> TRUE .)
    AND             reduce using rule 26 (varcte -> TRUE .)
    OR              reduce using rule 26 (varcte -> TRUE .)
    COMA            reduce using rule 26 (varcte -> TRUE .)
    PARDER          reduce using rule 26 (varcte -> TRUE .)
    CORCHDER        reduce using rule 26 (varcte -> TRUE .)
    FLECHITA        reduce using rule 26 (varcte -> TRUE .)
    COLON           reduce using rule 26 (varcte -> TRUE .)
    CORCHIZQ        reduce using rule 26 (varcte -> TRUE .)


state 227

    (27) varcte -> FALSE .

    POR             reduce using rule 27 (varcte -> FALSE .)
    SOBRE           reduce using rule 27 (varcte -> FALSE .)
    MAS             reduce using rule 27 (varcte -> FALSE .)
    MENOS           reduce using rule 27 (varcte -> FALSE .)
    MAYORQUE        reduce using rule 27 (varcte -> FALSE .)
    MENORQUE        reduce using rule 27 (varcte -> FALSE .)
    DIFERENTE       reduce using rule 27 (varcte -> FALSE .)
    MAYOROIGUAL     reduce using rule 27 (varcte -> FALSE .)
    MENOROIGUAL     reduce using rule 27 (varcte -> FALSE .)
    IGUALIGUAL      reduce using rule 27 (varcte -> FALSE .)
    AND             reduce using rule 27 (varcte -> FALSE .)
    OR              reduce using rule 27 (varcte -> FALSE .)
    COMA            reduce using rule 27 (varcte -> FALSE .)
    PARDER          reduce using rule 27 (varcte -> FALSE .)
    CORCHDER        reduce using rule 27 (varcte -> FALSE .)
    FLECHITA        reduce using rule 27 (varcte -> FALSE .)
    COLON           reduce using rule 27 (varcte -> FALSE .)
    CORCHIZQ        reduce using rule 27 (varcte -> FALSE .)


state 228

    (28) varcte -> STRINGVAL .

    POR             reduce using rule 28 (varcte -> STRINGVAL .)
    SOBRE           reduce using rule 28 (varcte -> STRINGVAL .)
    MAS             reduce using rule 28 (varcte -> STRINGVAL .)
    MENOS           reduce using rule 28 (varcte -> STRINGVAL .)
    MAYORQUE        reduce using rule 28 (varcte -> STRINGVAL .)
    MENORQUE        reduce using rule 28 (varcte -> STRINGVAL .)
    DIFERENTE       reduce using rule 28 (varcte -> STRINGVAL .)
    MAYOROIGUAL     reduce using rule 28 (varcte -> STRINGVAL .)
    MENOROIGUAL     reduce using rule 28 (varcte -> STRINGVAL .)
    IGUALIGUAL      reduce using rule 28 (varcte -> STRINGVAL .)
    AND             reduce using rule 28 (varcte -> STRINGVAL .)
    OR              reduce using rule 28 (varcte -> STRINGVAL .)
    COMA            reduce using rule 28 (varcte -> STRINGVAL .)
    PARDER          reduce using rule 28 (varcte -> STRINGVAL .)
    CORCHDER        reduce using rule 28 (varcte -> STRINGVAL .)
    FLECHITA        reduce using rule 28 (varcte -> STRINGVAL .)
    COLON           reduce using rule 28 (varcte -> STRINGVAL .)
    CORCHIZQ        reduce using rule 28 (varcte -> STRINGVAL .)


state 229

    (29) varcte -> NULL .

    POR             reduce using rule 29 (varcte -> NULL .)
    SOBRE           reduce using rule 29 (varcte -> NULL .)
    MAS             reduce using rule 29 (varcte -> NULL .)
    MENOS           reduce using rule 29 (varcte -> NULL .)
    MAYORQUE        reduce using rule 29 (varcte -> NULL .)
    MENORQUE        reduce using rule 29 (varcte -> NULL .)
    DIFERENTE       reduce using rule 29 (varcte -> NULL .)
    MAYOROIGUAL     reduce using rule 29 (varcte -> NULL .)
    MENOROIGUAL     reduce using rule 29 (varcte -> NULL .)
    IGUALIGUAL      reduce using rule 29 (varcte -> NULL .)
    AND             reduce using rule 29 (varcte -> NULL .)
    OR              reduce using rule 29 (varcte -> NULL .)
    COMA            reduce using rule 29 (varcte -> NULL .)
    PARDER          reduce using rule 29 (varcte -> NULL .)
    CORCHDER        reduce using rule 29 (varcte -> NULL .)
    FLECHITA        reduce using rule 29 (varcte -> NULL .)
    COLON           reduce using rule 29 (varcte -> NULL .)
    CORCHIZQ        reduce using rule 29 (varcte -> NULL .)


state 230

    (155) obj_call -> ID PUNTO ID PARIZQ . llamada_param PARDER COLON
    (157) llamada_param -> . expresion expresionr
    (158) llamada_param -> . empty
    (35) expresion -> . megaexp
    (159) empty -> .
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty

    PARDER          reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172

    llamada_param                  shift and go to state 269
    expresion                      shift and go to state 163
    empty                          shift and go to state 164
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170

state 231

    (79) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 79 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 232

    (91) estatutor -> ELSE bloque .

    ID              reduce using rule 91 (estatutor -> ELSE bloque .)
    IF              reduce using rule 91 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 91 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 91 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 91 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 91 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 91 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 91 (estatutor -> ELSE bloque .)


state 233

    (86) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (59) estatuto -> . asignacion estatuto
    (60) estatuto -> . condicion estatuto
    (61) estatuto -> . escritura estatuto
    (62) estatuto -> . for estatuto
    (63) estatuto -> . while estatuto
    (64) estatuto -> . when estatuto
    (65) estatuto -> . llamada estatuto
    (66) estatuto -> . obj_call estatuto
    (67) estatuto -> . empty
    (68) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (82) condicion -> . IF condicion2 estatutor
    (93) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (118) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (125) while -> . WHILE PARIZQ expresion PARDER bloque
    (126) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (153) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (154) llamada -> . empty
    (155) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (156) obj_call -> . empty
    (159) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 128
    IF              shift and go to state 129
    WRITE           shift and go to state 130
    FOR             shift and go to state 131
    WHILE           shift and go to state 132
    WHEN            shift and go to state 133
    RETURN          reduce using rule 159 (empty -> .)
    LLAVEDER        reduce using rule 159 (empty -> .)

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WRITE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! WHEN            [ reduce using rule 159 (empty -> .) ]

    estatuto                       shift and go to state 270
    asignacion                     shift and go to state 119
    condicion                      shift and go to state 120
    escritura                      shift and go to state 121
    for                            shift and go to state 122
    while                          shift and go to state 123
    when                           shift and go to state 124
    llamada                        shift and go to state 125
    obj_call                       shift and go to state 126
    empty                          shift and go to state 127

state 234

    (83) condicion2 -> PARIZQ expresion PARDER . bloque
    (86) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 233

    bloque                         shift and go to state 271

state 235

    (93) escritura -> WRITE PARIZQ esc1 esc2 . PARDER COLON

    PARDER          shift and go to state 272


state 236

    (96) esc2 -> COMA . esc1 esc2
    (94) esc1 -> . expresion
    (95) esc1 -> . STRING
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    STRING          shift and go to state 182
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    esc1                           shift and go to state 273
    expresion                      shift and go to state 181
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 237

    (97) esc2 -> empty .

    PARDER          reduce using rule 97 (esc2 -> empty .)


state 238

    (118) for -> FOR PARIZQ ID IN . for2 PARDER bloque
    (119) for2 -> . ID
    (120) for2 -> . range
    (121) range -> . INTNUM PUNTOSRANGO INTNUM
    (122) range -> . ID PUNTOSRANGO ID
    (123) range -> . ID PUNTOSRANGO INTNUM
    (124) range -> . INTNUM PUNTOSRANGO ID

    ID              shift and go to state 274
    INTNUM          shift and go to state 277

    for2                           shift and go to state 275
    range                          shift and go to state 276

state 239

    (125) while -> WHILE PARIZQ expresion PARDER . bloque
    (86) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 233

    bloque                         shift and go to state 278

state 240

    (126) when -> WHEN LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 126 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 126 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 126 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 126 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 126 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 126 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 126 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 126 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)


state 241

    (127) when2 -> expresion FLECHITA . bloque when2
    (86) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 233

    bloque                         shift and go to state 279

state 242

    (128) when2 -> ELSE FLECHITA . bloque
    (86) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 233

    bloque                         shift and go to state 280

state 243

    (137) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (87) bloque2 -> . RETURN bloque3
    (88) bloque2 -> . empty
    (159) empty -> .

    RETURN          shift and go to state 282
    LLAVEDER        reduce using rule 159 (empty -> .)

    bloque2                        shift and go to state 281
    empty                          shift and go to state 283

state 244

    (140) opc2 -> estatuto .

    RETURN          reduce using rule 140 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 140 (opc2 -> estatuto .)


state 245

    (141) opc2 -> empty .
    (67) estatuto -> empty .
    (154) llamada -> empty .
    (156) obj_call -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 67 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 67 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 67 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 67 (estatuto -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for WHEN resolved using rule 154 (llamada -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 67 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 67 (estatuto -> empty .)
    RETURN          reduce using rule 67 (estatuto -> empty .)
    LLAVEDER        reduce using rule 67 (estatuto -> empty .)
    ID              reduce using rule 154 (llamada -> empty .)
    IF              reduce using rule 154 (llamada -> empty .)
    WRITE           reduce using rule 154 (llamada -> empty .)
    FOR             reduce using rule 154 (llamada -> empty .)
    WHILE           reduce using rule 154 (llamada -> empty .)
    WHEN            reduce using rule 154 (llamada -> empty .)

  ! RETURN          [ reduce using rule 141 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 141 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 154 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 154 (llamada -> empty .) ]
  ! ID              [ reduce using rule 156 (obj_call -> empty .) ]
  ! IF              [ reduce using rule 156 (obj_call -> empty .) ]
  ! WRITE           [ reduce using rule 156 (obj_call -> empty .) ]
  ! FOR             [ reduce using rule 156 (obj_call -> empty .) ]
  ! WHILE           [ reduce using rule 156 (obj_call -> empty .) ]
  ! WHEN            [ reduce using rule 156 (obj_call -> empty .) ]
  ! RETURN          [ reduce using rule 156 (obj_call -> empty .) ]
  ! LLAVEDER        [ reduce using rule 156 (obj_call -> empty .) ]


state 246

    (138) opc1 -> vars multvarsdecl .

    ID              reduce using rule 138 (opc1 -> vars multvarsdecl .)
    IF              reduce using rule 138 (opc1 -> vars multvarsdecl .)
    WRITE           reduce using rule 138 (opc1 -> vars multvarsdecl .)
    FOR             reduce using rule 138 (opc1 -> vars multvarsdecl .)
    WHILE           reduce using rule 138 (opc1 -> vars multvarsdecl .)
    WHEN            reduce using rule 138 (opc1 -> vars multvarsdecl .)
    RETURN          reduce using rule 138 (opc1 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 138 (opc1 -> vars multvarsdecl .)


state 247

    (68) asignacion -> ID asignacion3 IGUAL asignacion2 COLON .

    ID              reduce using rule 68 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    IF              reduce using rule 68 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WRITE           reduce using rule 68 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    FOR             reduce using rule 68 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHILE           reduce using rule 68 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHEN            reduce using rule 68 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    LLAVEDER        reduce using rule 68 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    RETURN          reduce using rule 68 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)


state 248

    (70) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (77) asignacion2r -> . COMA expresion asignacion2r
    (78) asignacion2r -> . empty
    (159) empty -> .

    COMA            shift and go to state 285
    CORCHIZQ        reduce using rule 159 (empty -> .)

    asignacion2r                   shift and go to state 284
    empty                          shift and go to state 286

state 249

    (71) asignacion2 -> READ PARIZQ . assign_read PARDER
    (75) assign_read -> . STRINGVAL
    (76) assign_read -> . empty
    (159) empty -> .

    STRINGVAL       shift and go to state 288
    PARDER          reduce using rule 159 (empty -> .)

    assign_read                    shift and go to state 287
    empty                          shift and go to state 289

state 250

    (72) asignacion2 -> CID PARIZQ . class_call_args expresionr PARDER
    (73) class_call_args -> . expresion
    (74) class_call_args -> . empty
    (35) expresion -> . megaexp
    (159) empty -> .
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty

    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172

    class_call_args                shift and go to state 290
    expresion                      shift and go to state 291
    empty                          shift and go to state 292
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170

state 251

    (103) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    FLECHITA        reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    COLON           reduce using rule 103 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 103 (factor -> PARIZQ expresion PARDER .)


state 252

    (153) llamada -> ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 153 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 153 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 153 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 153 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 153 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 153 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 153 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 153 (llamada -> ID PARIZQ llamada_param PARDER COLON .)


state 253

    (36) expresionr -> COMA expresion . expresionr
    (36) expresionr -> . COMA expresion expresionr
    (37) expresionr -> . empty
    (159) empty -> .

    COMA            shift and go to state 200
    PARDER          reduce using rule 159 (empty -> .)

    expresionr                     shift and go to state 293
    empty                          shift and go to state 201

state 254

    (49) megaexpr -> AND superexp . megaexpr
    (49) megaexpr -> . AND superexp megaexpr
    (50) megaexpr -> . OR superexp megaexpr
    (51) megaexpr -> . empty
    (159) empty -> .

    AND             shift and go to state 203
    OR              shift and go to state 204
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    megaexpr                       shift and go to state 294
    empty                          shift and go to state 205

state 255

    (50) megaexpr -> OR superexp . megaexpr
    (49) megaexpr -> . AND superexp megaexpr
    (50) megaexpr -> . OR superexp megaexpr
    (51) megaexpr -> . empty
    (159) empty -> .

    AND             shift and go to state 203
    OR              shift and go to state 204
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    megaexpr                       shift and go to state 295
    empty                          shift and go to state 205

state 256

    (41) oplog -> MAYORQUE exp .

    AND             reduce using rule 41 (oplog -> MAYORQUE exp .)
    OR              reduce using rule 41 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 41 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 41 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 41 (oplog -> MAYORQUE exp .)
    FLECHITA        reduce using rule 41 (oplog -> MAYORQUE exp .)
    COLON           reduce using rule 41 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 41 (oplog -> MAYORQUE exp .)


state 257

    (42) oplog -> MENORQUE exp .

    AND             reduce using rule 42 (oplog -> MENORQUE exp .)
    OR              reduce using rule 42 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 42 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 42 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 42 (oplog -> MENORQUE exp .)
    FLECHITA        reduce using rule 42 (oplog -> MENORQUE exp .)
    COLON           reduce using rule 42 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 42 (oplog -> MENORQUE exp .)


state 258

    (43) oplog -> DIFERENTE exp .

    AND             reduce using rule 43 (oplog -> DIFERENTE exp .)
    OR              reduce using rule 43 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 43 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 43 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 43 (oplog -> DIFERENTE exp .)
    FLECHITA        reduce using rule 43 (oplog -> DIFERENTE exp .)
    COLON           reduce using rule 43 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 43 (oplog -> DIFERENTE exp .)


state 259

    (44) oplog -> MAYOROIGUAL exp .

    AND             reduce using rule 44 (oplog -> MAYOROIGUAL exp .)
    OR              reduce using rule 44 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 44 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 44 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 44 (oplog -> MAYOROIGUAL exp .)
    FLECHITA        reduce using rule 44 (oplog -> MAYOROIGUAL exp .)
    COLON           reduce using rule 44 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 44 (oplog -> MAYOROIGUAL exp .)


state 260

    (45) oplog -> MENOROIGUAL exp .

    AND             reduce using rule 45 (oplog -> MENOROIGUAL exp .)
    OR              reduce using rule 45 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 45 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 45 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 45 (oplog -> MENOROIGUAL exp .)
    FLECHITA        reduce using rule 45 (oplog -> MENOROIGUAL exp .)
    COLON           reduce using rule 45 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 45 (oplog -> MENOROIGUAL exp .)


state 261

    (46) oplog -> IGUALIGUAL exp .

    AND             reduce using rule 46 (oplog -> IGUALIGUAL exp .)
    OR              reduce using rule 46 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 46 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 46 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 46 (oplog -> IGUALIGUAL exp .)
    FLECHITA        reduce using rule 46 (oplog -> IGUALIGUAL exp .)
    COLON           reduce using rule 46 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 46 (oplog -> IGUALIGUAL exp .)


state 262

    (110) expr -> MAS termino . expr
    (110) expr -> . MAS termino expr
    (111) expr -> . MENOS termino expr
    (112) expr -> . empty
    (159) empty -> .

    MAS             shift and go to state 215
    MENOS           shift and go to state 216
    MAYORQUE        reduce using rule 159 (empty -> .)
    MENORQUE        reduce using rule 159 (empty -> .)
    DIFERENTE       reduce using rule 159 (empty -> .)
    MAYOROIGUAL     reduce using rule 159 (empty -> .)
    MENOROIGUAL     reduce using rule 159 (empty -> .)
    IGUALIGUAL      reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    expr                           shift and go to state 296
    empty                          shift and go to state 217

state 263

    (111) expr -> MENOS termino . expr
    (110) expr -> . MAS termino expr
    (111) expr -> . MENOS termino expr
    (112) expr -> . empty
    (159) empty -> .

    MAS             shift and go to state 215
    MENOS           shift and go to state 216
    MAYORQUE        reduce using rule 159 (empty -> .)
    MENORQUE        reduce using rule 159 (empty -> .)
    DIFERENTE       reduce using rule 159 (empty -> .)
    MAYOROIGUAL     reduce using rule 159 (empty -> .)
    MENOROIGUAL     reduce using rule 159 (empty -> .)
    IGUALIGUAL      reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    expr                           shift and go to state 297
    empty                          shift and go to state 217

state 264

    (105) terminor -> POR factor . terminor
    (105) terminor -> . POR factor terminor
    (106) terminor -> . SOBRE factor terminor
    (107) terminor -> . empty
    (159) empty -> .

    POR             shift and go to state 219
    SOBRE           shift and go to state 220
    MAS             reduce using rule 159 (empty -> .)
    MENOS           reduce using rule 159 (empty -> .)
    MAYORQUE        reduce using rule 159 (empty -> .)
    MENORQUE        reduce using rule 159 (empty -> .)
    DIFERENTE       reduce using rule 159 (empty -> .)
    MAYOROIGUAL     reduce using rule 159 (empty -> .)
    MENOROIGUAL     reduce using rule 159 (empty -> .)
    IGUALIGUAL      reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    terminor                       shift and go to state 298
    empty                          shift and go to state 221

state 265

    (106) terminor -> SOBRE factor . terminor
    (105) terminor -> . POR factor terminor
    (106) terminor -> . SOBRE factor terminor
    (107) terminor -> . empty
    (159) empty -> .

    POR             shift and go to state 219
    SOBRE           shift and go to state 220
    MAS             reduce using rule 159 (empty -> .)
    MENOS           reduce using rule 159 (empty -> .)
    MAYORQUE        reduce using rule 159 (empty -> .)
    MENORQUE        reduce using rule 159 (empty -> .)
    DIFERENTE       reduce using rule 159 (empty -> .)
    MAYOROIGUAL     reduce using rule 159 (empty -> .)
    MENOROIGUAL     reduce using rule 159 (empty -> .)
    IGUALIGUAL      reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    terminor                       shift and go to state 299
    empty                          shift and go to state 221

state 266

    (30) varcte -> ID CORCHIZQ . varcte CORCHDER
    (23) varcte -> . ID
    (24) varcte -> . INTNUM
    (25) varcte -> . FLOATNUM
    (26) varcte -> . TRUE
    (27) varcte -> . FALSE
    (28) varcte -> . STRINGVAL
    (29) varcte -> . NULL
    (30) varcte -> . ID CORCHIZQ varcte CORCHDER
    (31) varcte -> . ID PUNTO ID varcte_param_fun
    (32) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 223
    INTNUM          shift and go to state 224
    FLOATNUM        shift and go to state 225
    TRUE            shift and go to state 226
    FALSE           shift and go to state 227
    STRINGVAL       shift and go to state 228
    NULL            shift and go to state 229

    varcte                         shift and go to state 300

state 267

    (31) varcte -> ID PUNTO . ID varcte_param_fun

    ID              shift and go to state 301


state 268

    (32) varcte -> ID PARIZQ . llamada_param PARDER
    (157) llamada_param -> . expresion expresionr
    (158) llamada_param -> . empty
    (35) expresion -> . megaexp
    (159) empty -> .
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty

    PARDER          reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172

    llamada_param                  shift and go to state 302
    expresion                      shift and go to state 163
    empty                          shift and go to state 164
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170

state 269

    (155) obj_call -> ID PUNTO ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 303


state 270

    (86) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (87) bloque2 -> . RETURN bloque3
    (88) bloque2 -> . empty
    (159) empty -> .

    RETURN          shift and go to state 282
    LLAVEDER        reduce using rule 159 (empty -> .)

    bloque2                        shift and go to state 304
    empty                          shift and go to state 283

state 271

    (83) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 83 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 83 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 83 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 83 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 83 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 83 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 83 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 83 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 83 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 272

    (93) escritura -> WRITE PARIZQ esc1 esc2 PARDER . COLON

    COLON           shift and go to state 305


state 273

    (96) esc2 -> COMA esc1 . esc2
    (96) esc2 -> . COMA esc1 esc2
    (97) esc2 -> . empty
    (159) empty -> .

    COMA            shift and go to state 236
    PARDER          reduce using rule 159 (empty -> .)

    esc2                           shift and go to state 306
    empty                          shift and go to state 237

state 274

    (119) for2 -> ID .
    (122) range -> ID . PUNTOSRANGO ID
    (123) range -> ID . PUNTOSRANGO INTNUM

    PARDER          reduce using rule 119 (for2 -> ID .)
    PUNTOSRANGO     shift and go to state 307


state 275

    (118) for -> FOR PARIZQ ID IN for2 . PARDER bloque

    PARDER          shift and go to state 308


state 276

    (120) for2 -> range .

    PARDER          reduce using rule 120 (for2 -> range .)


state 277

    (121) range -> INTNUM . PUNTOSRANGO INTNUM
    (124) range -> INTNUM . PUNTOSRANGO ID

    PUNTOSRANGO     shift and go to state 309


state 278

    (125) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 125 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 125 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 125 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 125 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 125 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 125 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 125 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 125 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 279

    (127) when2 -> expresion FLECHITA bloque . when2
    (127) when2 -> . expresion FLECHITA bloque when2
    (128) when2 -> . ELSE FLECHITA bloque
    (129) when2 -> . empty
    (35) expresion -> . megaexp
    (159) empty -> .
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty

    ELSE            shift and go to state 187
    LLAVEDER        reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172

    expresion                      shift and go to state 186
    when2                          shift and go to state 310
    empty                          shift and go to state 188
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170

state 280

    (128) when2 -> ELSE FLECHITA bloque .

    LLAVEDER        reduce using rule 128 (when2 -> ELSE FLECHITA bloque .)


state 281

    (137) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 311


state 282

    (87) bloque2 -> RETURN . bloque3
    (89) bloque3 -> . expresion COLON
    (90) bloque3 -> . empty
    (35) expresion -> . megaexp
    (159) empty -> .
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty

    LLAVEDER        reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172

    bloque3                        shift and go to state 312
    expresion                      shift and go to state 313
    empty                          shift and go to state 314
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170

state 283

    (88) bloque2 -> empty .

    LLAVEDER        reduce using rule 88 (bloque2 -> empty .)


state 284

    (70) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 315


state 285

    (77) asignacion2r -> COMA . expresion asignacion2r
    (35) expresion -> . megaexp
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)

    expresion                      shift and go to state 316
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170
    empty                          shift and go to state 175

state 286

    (78) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 78 (asignacion2r -> empty .)


state 287

    (71) asignacion2 -> READ PARIZQ assign_read . PARDER

    PARDER          shift and go to state 317


state 288

    (75) assign_read -> STRINGVAL .

    PARDER          reduce using rule 75 (assign_read -> STRINGVAL .)


state 289

    (76) assign_read -> empty .

    PARDER          reduce using rule 76 (assign_read -> empty .)


state 290

    (72) asignacion2 -> CID PARIZQ class_call_args . expresionr PARDER
    (36) expresionr -> . COMA expresion expresionr
    (37) expresionr -> . empty
    (159) empty -> .

    COMA            shift and go to state 200
    PARDER          reduce using rule 159 (empty -> .)

    expresionr                     shift and go to state 318
    empty                          shift and go to state 201

state 291

    (73) class_call_args -> expresion .

    COMA            reduce using rule 73 (class_call_args -> expresion .)
    PARDER          reduce using rule 73 (class_call_args -> expresion .)


state 292

    (74) class_call_args -> empty .
    (117) factor2 -> empty .

    COMA            reduce using rule 74 (class_call_args -> empty .)
    PARDER          reduce using rule 74 (class_call_args -> empty .)
    ID              reduce using rule 117 (factor2 -> empty .)
    INTNUM          reduce using rule 117 (factor2 -> empty .)
    FLOATNUM        reduce using rule 117 (factor2 -> empty .)
    TRUE            reduce using rule 117 (factor2 -> empty .)
    FALSE           reduce using rule 117 (factor2 -> empty .)
    STRINGVAL       reduce using rule 117 (factor2 -> empty .)
    NULL            reduce using rule 117 (factor2 -> empty .)


state 293

    (36) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 36 (expresionr -> COMA expresion expresionr .)


state 294

    (49) megaexpr -> AND superexp megaexpr .

    COMA            reduce using rule 49 (megaexpr -> AND superexp megaexpr .)
    PARDER          reduce using rule 49 (megaexpr -> AND superexp megaexpr .)
    CORCHDER        reduce using rule 49 (megaexpr -> AND superexp megaexpr .)
    FLECHITA        reduce using rule 49 (megaexpr -> AND superexp megaexpr .)
    COLON           reduce using rule 49 (megaexpr -> AND superexp megaexpr .)
    CORCHIZQ        reduce using rule 49 (megaexpr -> AND superexp megaexpr .)


state 295

    (50) megaexpr -> OR superexp megaexpr .

    COMA            reduce using rule 50 (megaexpr -> OR superexp megaexpr .)
    PARDER          reduce using rule 50 (megaexpr -> OR superexp megaexpr .)
    CORCHDER        reduce using rule 50 (megaexpr -> OR superexp megaexpr .)
    FLECHITA        reduce using rule 50 (megaexpr -> OR superexp megaexpr .)
    COLON           reduce using rule 50 (megaexpr -> OR superexp megaexpr .)
    CORCHIZQ        reduce using rule 50 (megaexpr -> OR superexp megaexpr .)


state 296

    (110) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 110 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 110 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 110 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 110 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 110 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 110 (expr -> MAS termino expr .)
    AND             reduce using rule 110 (expr -> MAS termino expr .)
    OR              reduce using rule 110 (expr -> MAS termino expr .)
    COMA            reduce using rule 110 (expr -> MAS termino expr .)
    PARDER          reduce using rule 110 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 110 (expr -> MAS termino expr .)
    FLECHITA        reduce using rule 110 (expr -> MAS termino expr .)
    COLON           reduce using rule 110 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 110 (expr -> MAS termino expr .)


state 297

    (111) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 111 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 111 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 111 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 111 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 111 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 111 (expr -> MENOS termino expr .)
    AND             reduce using rule 111 (expr -> MENOS termino expr .)
    OR              reduce using rule 111 (expr -> MENOS termino expr .)
    COMA            reduce using rule 111 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 111 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 111 (expr -> MENOS termino expr .)
    FLECHITA        reduce using rule 111 (expr -> MENOS termino expr .)
    COLON           reduce using rule 111 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 111 (expr -> MENOS termino expr .)


state 298

    (105) terminor -> POR factor terminor .

    MAS             reduce using rule 105 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 105 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 105 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 105 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 105 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 105 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 105 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 105 (terminor -> POR factor terminor .)
    AND             reduce using rule 105 (terminor -> POR factor terminor .)
    OR              reduce using rule 105 (terminor -> POR factor terminor .)
    COMA            reduce using rule 105 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 105 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 105 (terminor -> POR factor terminor .)
    FLECHITA        reduce using rule 105 (terminor -> POR factor terminor .)
    COLON           reduce using rule 105 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 105 (terminor -> POR factor terminor .)


state 299

    (106) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 106 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 106 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 106 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 106 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 106 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 106 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 106 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 106 (terminor -> SOBRE factor terminor .)
    AND             reduce using rule 106 (terminor -> SOBRE factor terminor .)
    OR              reduce using rule 106 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 106 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 106 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 106 (terminor -> SOBRE factor terminor .)
    FLECHITA        reduce using rule 106 (terminor -> SOBRE factor terminor .)
    COLON           reduce using rule 106 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 106 (terminor -> SOBRE factor terminor .)


state 300

    (30) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 319


state 301

    (31) varcte -> ID PUNTO ID . varcte_param_fun
    (33) varcte_param_fun -> . PARIZQ llamada_param PARDER
    (34) varcte_param_fun -> . empty
    (159) empty -> .

    PARIZQ          shift and go to state 321
    POR             reduce using rule 159 (empty -> .)
    SOBRE           reduce using rule 159 (empty -> .)
    MAS             reduce using rule 159 (empty -> .)
    MENOS           reduce using rule 159 (empty -> .)
    MAYORQUE        reduce using rule 159 (empty -> .)
    MENORQUE        reduce using rule 159 (empty -> .)
    DIFERENTE       reduce using rule 159 (empty -> .)
    MAYOROIGUAL     reduce using rule 159 (empty -> .)
    MENOROIGUAL     reduce using rule 159 (empty -> .)
    IGUALIGUAL      reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    COMA            reduce using rule 159 (empty -> .)
    PARDER          reduce using rule 159 (empty -> .)
    CORCHDER        reduce using rule 159 (empty -> .)
    FLECHITA        reduce using rule 159 (empty -> .)
    COLON           reduce using rule 159 (empty -> .)
    CORCHIZQ        reduce using rule 159 (empty -> .)

    varcte_param_fun               shift and go to state 320
    empty                          shift and go to state 322

state 302

    (32) varcte -> ID PARIZQ llamada_param . PARDER

    PARDER          shift and go to state 323


state 303

    (155) obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 324


state 304

    (86) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 325


state 305

    (93) escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .

    ID              reduce using rule 93 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    IF              reduce using rule 93 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WRITE           reduce using rule 93 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    FOR             reduce using rule 93 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHILE           reduce using rule 93 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHEN            reduce using rule 93 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    LLAVEDER        reduce using rule 93 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    RETURN          reduce using rule 93 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)


state 306

    (96) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 96 (esc2 -> COMA esc1 esc2 .)


state 307

    (122) range -> ID PUNTOSRANGO . ID
    (123) range -> ID PUNTOSRANGO . INTNUM

    ID              shift and go to state 326
    INTNUM          shift and go to state 327


state 308

    (118) for -> FOR PARIZQ ID IN for2 PARDER . bloque
    (86) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 233

    bloque                         shift and go to state 328

state 309

    (121) range -> INTNUM PUNTOSRANGO . INTNUM
    (124) range -> INTNUM PUNTOSRANGO . ID

    INTNUM          shift and go to state 329
    ID              shift and go to state 330


state 310

    (127) when2 -> expresion FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 127 (when2 -> expresion FLECHITA bloque when2 .)


state 311

    (137) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    PRIVATE         reduce using rule 137 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    FUN             reduce using rule 137 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    MAIN            reduce using rule 137 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 137 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 312

    (87) bloque2 -> RETURN bloque3 .

    LLAVEDER        reduce using rule 87 (bloque2 -> RETURN bloque3 .)


state 313

    (89) bloque3 -> expresion . COLON

    COLON           shift and go to state 331


state 314

    (90) bloque3 -> empty .
    (117) factor2 -> empty .

    LLAVEDER        reduce using rule 90 (bloque3 -> empty .)
    ID              reduce using rule 117 (factor2 -> empty .)
    INTNUM          reduce using rule 117 (factor2 -> empty .)
    FLOATNUM        reduce using rule 117 (factor2 -> empty .)
    TRUE            reduce using rule 117 (factor2 -> empty .)
    FALSE           reduce using rule 117 (factor2 -> empty .)
    STRINGVAL       reduce using rule 117 (factor2 -> empty .)
    NULL            reduce using rule 117 (factor2 -> empty .)


state 315

    (70) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    COLON           reduce using rule 70 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 316

    (77) asignacion2r -> COMA expresion . asignacion2r
    (77) asignacion2r -> . COMA expresion asignacion2r
    (78) asignacion2r -> . empty
    (159) empty -> .

    COMA            shift and go to state 285
    CORCHIZQ        reduce using rule 159 (empty -> .)

    asignacion2r                   shift and go to state 332
    empty                          shift and go to state 286

state 317

    (71) asignacion2 -> READ PARIZQ assign_read PARDER .

    COLON           reduce using rule 71 (asignacion2 -> READ PARIZQ assign_read PARDER .)


state 318

    (72) asignacion2 -> CID PARIZQ class_call_args expresionr . PARDER

    PARDER          shift and go to state 333


state 319

    (30) varcte -> ID CORCHIZQ varcte CORCHDER .

    POR             reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    AND             reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    OR              reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COMA            reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COLON           reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 30 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 320

    (31) varcte -> ID PUNTO ID varcte_param_fun .

    POR             reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    SOBRE           reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    MAS             reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    MENOS           reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    MAYORQUE        reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    MENORQUE        reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    DIFERENTE       reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    MAYOROIGUAL     reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    MENOROIGUAL     reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    IGUALIGUAL      reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    AND             reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    OR              reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    COMA            reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    PARDER          reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    CORCHDER        reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    FLECHITA        reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    COLON           reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)
    CORCHIZQ        reduce using rule 31 (varcte -> ID PUNTO ID varcte_param_fun .)


state 321

    (33) varcte_param_fun -> PARIZQ . llamada_param PARDER
    (157) llamada_param -> . expresion expresionr
    (158) llamada_param -> . empty
    (35) expresion -> . megaexp
    (159) empty -> .
    (48) megaexp -> . superexp megaexpr
    (40) superexp -> . exp oplog
    (109) exp -> . termino expr
    (108) termino -> . factor terminor
    (103) factor -> . PARIZQ expresion PARDER
    (104) factor -> . factor2 varcte
    (115) factor2 -> . MAS
    (116) factor2 -> . MENOS
    (117) factor2 -> . empty

    PARDER          reduce using rule 159 (empty -> .)
    ID              reduce using rule 159 (empty -> .)
    INTNUM          reduce using rule 159 (empty -> .)
    FLOATNUM        reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    STRINGVAL       reduce using rule 159 (empty -> .)
    NULL            reduce using rule 159 (empty -> .)
    PARIZQ          shift and go to state 161
    MAS             shift and go to state 171
    MENOS           shift and go to state 172

    llamada_param                  shift and go to state 334
    expresion                      shift and go to state 163
    empty                          shift and go to state 164
    megaexp                        shift and go to state 165
    superexp                       shift and go to state 166
    exp                            shift and go to state 167
    termino                        shift and go to state 168
    factor                         shift and go to state 169
    factor2                        shift and go to state 170

state 322

    (34) varcte_param_fun -> empty .

    POR             reduce using rule 34 (varcte_param_fun -> empty .)
    SOBRE           reduce using rule 34 (varcte_param_fun -> empty .)
    MAS             reduce using rule 34 (varcte_param_fun -> empty .)
    MENOS           reduce using rule 34 (varcte_param_fun -> empty .)
    MAYORQUE        reduce using rule 34 (varcte_param_fun -> empty .)
    MENORQUE        reduce using rule 34 (varcte_param_fun -> empty .)
    DIFERENTE       reduce using rule 34 (varcte_param_fun -> empty .)
    MAYOROIGUAL     reduce using rule 34 (varcte_param_fun -> empty .)
    MENOROIGUAL     reduce using rule 34 (varcte_param_fun -> empty .)
    IGUALIGUAL      reduce using rule 34 (varcte_param_fun -> empty .)
    AND             reduce using rule 34 (varcte_param_fun -> empty .)
    OR              reduce using rule 34 (varcte_param_fun -> empty .)
    COMA            reduce using rule 34 (varcte_param_fun -> empty .)
    PARDER          reduce using rule 34 (varcte_param_fun -> empty .)
    CORCHDER        reduce using rule 34 (varcte_param_fun -> empty .)
    FLECHITA        reduce using rule 34 (varcte_param_fun -> empty .)
    COLON           reduce using rule 34 (varcte_param_fun -> empty .)
    CORCHIZQ        reduce using rule 34 (varcte_param_fun -> empty .)


state 323

    (32) varcte -> ID PARIZQ llamada_param PARDER .

    POR             reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    SOBRE           reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAS             reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOS           reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYORQUE        reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENORQUE        reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    DIFERENTE       reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYOROIGUAL     reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOROIGUAL     reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    IGUALIGUAL      reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    AND             reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    OR              reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    COMA            reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    PARDER          reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHDER        reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    FLECHITA        reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    COLON           reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHIZQ        reduce using rule 32 (varcte -> ID PARIZQ llamada_param PARDER .)


state 324

    (155) obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 155 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 155 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 155 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 155 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 155 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 155 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 155 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 155 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)


state 325

    (86) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    ID              reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    PARIZQ          reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MAS             reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MENOS           reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    TRUE            reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FALSE           reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRINGVAL       reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    NULL            reduce using rule 86 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 326

    (122) range -> ID PUNTOSRANGO ID .

    PARDER          reduce using rule 122 (range -> ID PUNTOSRANGO ID .)


state 327

    (123) range -> ID PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 123 (range -> ID PUNTOSRANGO INTNUM .)


state 328

    (118) for -> FOR PARIZQ ID IN for2 PARDER bloque .

    ID              reduce using rule 118 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    IF              reduce using rule 118 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WRITE           reduce using rule 118 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    FOR             reduce using rule 118 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHILE           reduce using rule 118 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHEN            reduce using rule 118 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    LLAVEDER        reduce using rule 118 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    RETURN          reduce using rule 118 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)


state 329

    (121) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 121 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 330

    (124) range -> INTNUM PUNTOSRANGO ID .

    PARDER          reduce using rule 124 (range -> INTNUM PUNTOSRANGO ID .)


state 331

    (89) bloque3 -> expresion COLON .

    LLAVEDER        reduce using rule 89 (bloque3 -> expresion COLON .)


state 332

    (77) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 77 (asignacion2r -> COMA expresion asignacion2r .)


state 333

    (72) asignacion2 -> CID PARIZQ class_call_args expresionr PARDER .

    COLON           reduce using rule 72 (asignacion2 -> CID PARIZQ class_call_args expresionr PARDER .)


state 334

    (33) varcte_param_fun -> PARIZQ llamada_param . PARDER

    PARDER          shift and go to state 335


state 335

    (33) varcte_param_fun -> PARIZQ llamada_param PARDER .

    POR             reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    SOBRE           reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MAS             reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MENOS           reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MAYORQUE        reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MENORQUE        reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    DIFERENTE       reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MAYOROIGUAL     reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MENOROIGUAL     reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    IGUALIGUAL      reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    AND             reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    OR              reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    COMA            reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    PARDER          reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    CORCHDER        reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    FLECHITA        reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    COLON           reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    CORCHIZQ        reduce using rule 33 (varcte_param_fun -> PARIZQ llamada_param PARDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 37 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 52 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 116 resolved as shift
WARNING: shift/reduce conflict for FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 116 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for IF in state 119 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 119 resolved as shift
WARNING: shift/reduce conflict for FOR in state 119 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 119 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 120 resolved as shift
WARNING: shift/reduce conflict for IF in state 120 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 120 resolved as shift
WARNING: shift/reduce conflict for FOR in state 120 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 120 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for IF in state 121 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 121 resolved as shift
WARNING: shift/reduce conflict for FOR in state 121 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 121 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for IF in state 122 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 122 resolved as shift
WARNING: shift/reduce conflict for FOR in state 122 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 122 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for IF in state 123 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 123 resolved as shift
WARNING: shift/reduce conflict for FOR in state 123 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 123 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 124 resolved as shift
WARNING: shift/reduce conflict for IF in state 124 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 124 resolved as shift
WARNING: shift/reduce conflict for FOR in state 124 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 124 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 124 resolved as shift
WARNING: shift/reduce conflict for ID in state 125 resolved as shift
WARNING: shift/reduce conflict for IF in state 125 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 125 resolved as shift
WARNING: shift/reduce conflict for FOR in state 125 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 125 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 125 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for IF in state 126 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 126 resolved as shift
WARNING: shift/reduce conflict for FOR in state 126 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 126 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 189 resolved as shift
WARNING: shift/reduce conflict for IF in state 189 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 189 resolved as shift
WARNING: shift/reduce conflict for FOR in state 189 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 189 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 189 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 223 resolved as shift
WARNING: shift/reduce conflict for ID in state 233 resolved as shift
WARNING: shift/reduce conflict for IF in state 233 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 233 resolved as shift
WARNING: shift/reduce conflict for FOR in state 233 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 233 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 233 resolved as shift
WARNING: reduce/reduce conflict in state 127 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 127
WARNING: reduce/reduce conflict in state 127 resolved using rule (llamada -> empty)
WARNING: rejected rule (obj_call -> empty) in state 127
WARNING: reduce/reduce conflict in state 127 resolved using rule (estatuto -> empty)
WARNING: rejected rule (obj_call -> empty) in state 127
WARNING: reduce/reduce conflict in state 245 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 245
WARNING: reduce/reduce conflict in state 245 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 245
WARNING: reduce/reduce conflict in state 245 resolved using rule (llamada -> empty)
WARNING: rejected rule (obj_call -> empty) in state 245
WARNING: reduce/reduce conflict in state 245 resolved using rule (estatuto -> empty)
WARNING: rejected rule (obj_call -> empty) in state 245
WARNING: Rule (obj_call -> empty) is never reduced
WARNING: Rule (opc2 -> empty) is never reduced
