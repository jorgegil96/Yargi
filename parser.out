Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    OR
    RANGE

Grammar

Rule 0     S' -> fun
Rule 1     resultado -> class
Rule 2     class -> CLASS WS ID classparams class2 body
Rule 3     class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER
Rule 4     class2 -> empty
Rule 5     classparams -> PARIZQ classparams2 PARDER
Rule 6     classparams2 -> vars
Rule 7     classparams2 -> empty
Rule 8     bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 9     bloque2 -> RETURN WS bloque3
Rule 10    bloque2 -> empty
Rule 11    bloque3 -> expresion
Rule 12    bloque3 -> empty
Rule 13    varcte -> ID
Rule 14    varcte -> INTNUM
Rule 15    varcte -> FLOATNUM
Rule 16    varcte -> BOOLVAL
Rule 17    varcte -> STRING
Rule 18    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 19    varcte -> ID PUNTO ID
Rule 20    varcte -> ID PARIZQ expresion2 PARDER
Rule 21    expresion -> exp oplog
Rule 22    expresion -> ID PARIZQ expresion2 PARDER
Rule 23    expresionr -> COMA expresion expresionr
Rule 24    expresionr -> empty
Rule 25    expresion2 -> expresion expresionr
Rule 26    expresion2 -> empty
Rule 27    oplog -> MAYORQUE exp
Rule 28    oplog -> MENORQUE exp
Rule 29    oplog -> DIFERENTE exp
Rule 30    oplog -> MAYOROIGUAL exp
Rule 31    oplog -> MENOROIGUAL exp
Rule 32    oplog -> IGUALIGUAL exp
Rule 33    oplog -> empty
Rule 34    vars -> vars3 WS tipo WS vars2
Rule 35    vars -> vars3 WS tipo WS LIST WS vars2
Rule 36    varsr -> COMA ID varsr
Rule 37    varsr -> empty
Rule 38    vars2 -> ID varsr
Rule 39    vars2 -> empty
Rule 40    vars3 -> PRIVATE
Rule 41    vars3 -> empty
Rule 42    estatuto -> asignacion estatuto
Rule 43    estatuto -> condicion estatuto
Rule 44    estatuto -> escritura estatuto
Rule 45    estatuto -> for estatuto
Rule 46    estatuto -> while estatuto
Rule 47    estatuto -> when estatuto
Rule 48    estatuto -> llamada estatuto
Rule 49    estatuto -> empty
Rule 50    asignacion -> ID asignacion3 IGUAL asignacion2
Rule 51    asignacion2 -> expresion
Rule 52    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 53    asignacion2 -> READ PARIZQ STRING PARDER
Rule 54    asignacion2r -> COMA expresion asignacion2r
Rule 55    asignacion2r -> empty
Rule 56    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 57    asignacion3 -> PUNTO ID
Rule 58    asignacion3 -> empty
Rule 59    condicion -> IF condicion2 condicionr estatutor
Rule 60    condicion2 -> PARIZQ expresion PARDER bloque
Rule 61    condicionr -> ELSE WS IF condicion2
Rule 62    condicionr -> empty
Rule 63    estatutor -> ELSE bloque
Rule 64    estatutor -> empty
Rule 65    escritura -> WRITE PARIZQ esc1 esc2 PARDER
Rule 66    esc1 -> expresion
Rule 67    esc1 -> STRING
Rule 68    esc2 -> COMA esc1 esc2
Rule 69    esc2 -> empty
Rule 70    tipo -> INT
Rule 71    tipo -> FLOAT
Rule 72    tipo -> BOOL
Rule 73    tipo -> STRING
Rule 74    tipo -> CID
Rule 75    factor -> PARIZQ expresion PARDER
Rule 76    factor -> factor2 varcte varcter
Rule 77    terminor -> POR factor terminor
Rule 78    terminor -> SOBRE factor terminor
Rule 79    terminor -> empty
Rule 80    termino -> factor terminor
Rule 81    exp -> termino expr
Rule 82    expr -> MAS termino expr
Rule 83    expr -> MENOS termino expr
Rule 84    expr -> empty
Rule 85    varcter -> COMA varcte varcter
Rule 86    varcter -> empty
Rule 87    factor2 -> MAS
Rule 88    factor2 -> MENOS
Rule 89    factor2 -> empty
Rule 90    for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque
Rule 91    for2 -> ID
Rule 92    for2 -> range
Rule 93    range -> INTNUM PUNTOSRANGO INTNUM
Rule 94    while -> WHILE PARIZQ expresion PARDER bloque
Rule 95    when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
Rule 96    when2 -> varcte varcter FLECHITA bloque when2
Rule 97    when2 -> IN WS range FLECHITA bloque when2
Rule 98    when2 -> ELSE FLECHITA bloque when2
Rule 99    when2 -> empty
Rule 100   fun -> vars3 WS FUN WS ID PARIZQ fun2 PARDER fun3 funbody
Rule 101   fun2 -> tipo WS ID WS fun2
Rule 102   fun2 -> empty
Rule 103   fun3 -> DOSPUNTOS tipo
Rule 104   fun3 -> empty
Rule 105   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 106   opc1 -> vars
Rule 107   opc1 -> empty
Rule 108   opc2 -> estatuto
Rule 109   opc2 -> empty
Rule 110   body -> LLAVEIZQ body2 WS funr WS MAIN PARIZQ PARDER bloque LLAVEDER
Rule 111   body2 -> vars
Rule 112   body2 -> empty
Rule 113   funr -> fun WS funr
Rule 114   funr -> empty
Rule 115   llamada -> ID PARIZQ expresion expresionr PARDER
Rule 116   llamada -> empty
Rule 117   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 72
BOOLVAL              : 16
CID                  : 74
CLASS                : 2
COMA                 : 23 36 54 68 85
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 18 52 56
CORCHIZQ             : 18 52 56
DIFERENTE            : 29
DOSPUNTOS            : 3 103
ELSE                 : 61 63 98
EOL                  : 
FLECHITA             : 96 97 98
FLOAT                : 71
FLOATNUM             : 15
FOR                  : 90
FUN                  : 100
GLOBAL               : 
ID                   : 2 3 13 18 19 19 20 22 36 38 50 57 90 91 100 101 115
IF                   : 59 61
IGUAL                : 50
IGUALIGUAL           : 32
IN                   : 90 97
INT                  : 70
INTNUM               : 14 93 93
LIST                 : 35
LLAVEDER             : 8 95 105 110
LLAVEIZQ             : 8 95 105 110
MAIN                 : 110
MAS                  : 82 87
MAYOROIGUAL          : 30
MAYORQUE             : 27
MENOROIGUAL          : 31
MENORQUE             : 28
MENOS                : 83 88
OR                   : 
PARDER               : 3 5 20 22 53 60 65 75 90 94 95 100 110 115
PARIZQ               : 3 5 20 22 53 60 65 75 90 94 95 100 110 115
POR                  : 77
PRIVATE              : 40
PUNTO                : 19 57
PUNTOSRANGO          : 93
RANGE                : 
READ                 : 53
RETURN               : 9
SOBRE                : 78
STRING               : 17 53 67 73
WHEN                 : 95
WHILE                : 94
WRITE                : 65
WS                   : 2 9 34 34 35 35 35 61 90 90 97 100 100 101 101 110 110 113
error                : 

Nonterminals, with rules where they appear

asignacion           : 42
asignacion2          : 50
asignacion2r         : 52 54
asignacion3          : 50
bloque               : 60 63 90 94 96 97 98 110
bloque2              : 8 105
bloque3              : 9
body                 : 2
body2                : 110
class                : 1
class2               : 2
classparams          : 2
classparams2         : 5
condicion            : 43
condicion2           : 59 61
condicionr           : 59
empty                : 4 7 10 12 24 26 33 37 39 41 49 55 58 62 64 69 79 84 86 89 99 102 104 107 109 112 114 116
esc1                 : 65 68
esc2                 : 65 68
escritura            : 44
estatuto             : 8 42 43 44 45 46 47 48 108
estatutor            : 59
exp                  : 21 27 28 29 30 31 32
expr                 : 81 82 83
expresion            : 11 23 25 51 52 54 56 60 66 75 94 95 115
expresion2           : 20 22
expresionr           : 23 25 115
factor               : 77 78 80
factor2              : 76
for                  : 45
for2                 : 90
fun                  : 113 0
fun2                 : 100 101
fun3                 : 100
funbody              : 100
funr                 : 110 113
llamada              : 48
opc1                 : 105
opc2                 : 105
oplog                : 21
range                : 92 97
resultado            : 
termino              : 81 82 83
terminor             : 77 78 80
tipo                 : 34 35 101 103
varcte               : 18 76 85 96
varcter              : 76 85 96
vars                 : 6 106 111
vars2                : 3 34 35
vars3                : 34 35 100
varsr                : 36 38
when                 : 47
when2                : 95 96 97 98
while                : 46

Parsing method: LALR

state 0

    (0) S' -> . fun
    (100) fun -> . vars3 WS FUN WS ID PARIZQ fun2 PARDER fun3 funbody
    (40) vars3 -> . PRIVATE
    (41) vars3 -> . empty
    (117) empty -> .

    PRIVATE         shift and go to state 3
    WS              reduce using rule 117 (empty -> .)

    fun                            shift and go to state 1
    vars3                          shift and go to state 2
    empty                          shift and go to state 4

state 1

    (0) S' -> fun .



state 2

    (100) fun -> vars3 . WS FUN WS ID PARIZQ fun2 PARDER fun3 funbody

    WS              shift and go to state 5


state 3

    (40) vars3 -> PRIVATE .

    WS              reduce using rule 40 (vars3 -> PRIVATE .)


state 4

    (41) vars3 -> empty .

    WS              reduce using rule 41 (vars3 -> empty .)


state 5

    (100) fun -> vars3 WS . FUN WS ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 6


state 6

    (100) fun -> vars3 WS FUN . WS ID PARIZQ fun2 PARDER fun3 funbody

    WS              shift and go to state 7


state 7

    (100) fun -> vars3 WS FUN WS . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 8


state 8

    (100) fun -> vars3 WS FUN WS ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 9


state 9

    (100) fun -> vars3 WS FUN WS ID PARIZQ . fun2 PARDER fun3 funbody
    (101) fun2 -> . tipo WS ID WS fun2
    (102) fun2 -> . empty
    (70) tipo -> . INT
    (71) tipo -> . FLOAT
    (72) tipo -> . BOOL
    (73) tipo -> . STRING
    (74) tipo -> . CID
    (117) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    BOOL            shift and go to state 15
    STRING          shift and go to state 16
    CID             shift and go to state 17
    PARDER          reduce using rule 117 (empty -> .)

    fun2                           shift and go to state 10
    tipo                           shift and go to state 11
    empty                          shift and go to state 12

state 10

    (100) fun -> vars3 WS FUN WS ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 18


state 11

    (101) fun2 -> tipo . WS ID WS fun2

    WS              shift and go to state 19


state 12

    (102) fun2 -> empty .

    PARDER          reduce using rule 102 (fun2 -> empty .)


state 13

    (70) tipo -> INT .

    WS              reduce using rule 70 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 70 (tipo -> INT .)


state 14

    (71) tipo -> FLOAT .

    WS              reduce using rule 71 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 71 (tipo -> FLOAT .)


state 15

    (72) tipo -> BOOL .

    WS              reduce using rule 72 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 72 (tipo -> BOOL .)


state 16

    (73) tipo -> STRING .

    WS              reduce using rule 73 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 73 (tipo -> STRING .)


state 17

    (74) tipo -> CID .

    WS              reduce using rule 74 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 74 (tipo -> CID .)


state 18

    (100) fun -> vars3 WS FUN WS ID PARIZQ fun2 PARDER . fun3 funbody
    (103) fun3 -> . DOSPUNTOS tipo
    (104) fun3 -> . empty
    (117) empty -> .

    DOSPUNTOS       shift and go to state 21
    LLAVEIZQ        reduce using rule 117 (empty -> .)

    fun3                           shift and go to state 20
    empty                          shift and go to state 22

state 19

    (101) fun2 -> tipo WS . ID WS fun2

    ID              shift and go to state 23


state 20

    (100) fun -> vars3 WS FUN WS ID PARIZQ fun2 PARDER fun3 . funbody
    (105) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 25

    funbody                        shift and go to state 24

state 21

    (103) fun3 -> DOSPUNTOS . tipo
    (70) tipo -> . INT
    (71) tipo -> . FLOAT
    (72) tipo -> . BOOL
    (73) tipo -> . STRING
    (74) tipo -> . CID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    BOOL            shift and go to state 15
    STRING          shift and go to state 16
    CID             shift and go to state 17

    tipo                           shift and go to state 26

state 22

    (104) fun3 -> empty .

    LLAVEIZQ        reduce using rule 104 (fun3 -> empty .)


state 23

    (101) fun2 -> tipo WS ID . WS fun2

    WS              shift and go to state 27


state 24

    (100) fun -> vars3 WS FUN WS ID PARIZQ fun2 PARDER fun3 funbody .

    $end            reduce using rule 100 (fun -> vars3 WS FUN WS ID PARIZQ fun2 PARDER fun3 funbody .)


state 25

    (105) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (106) opc1 -> . vars
    (107) opc1 -> . empty
    (34) vars -> . vars3 WS tipo WS vars2
    (35) vars -> . vars3 WS tipo WS LIST WS vars2
    (117) empty -> .
    (40) vars3 -> . PRIVATE
    (41) vars3 -> . empty

    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    WS              reduce using rule 117 (empty -> .)
    PRIVATE         shift and go to state 3

    opc1                           shift and go to state 28
    vars                           shift and go to state 29
    empty                          shift and go to state 30
    vars3                          shift and go to state 31

state 26

    (103) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 103 (fun3 -> DOSPUNTOS tipo .)


state 27

    (101) fun2 -> tipo WS ID WS . fun2
    (101) fun2 -> . tipo WS ID WS fun2
    (102) fun2 -> . empty
    (70) tipo -> . INT
    (71) tipo -> . FLOAT
    (72) tipo -> . BOOL
    (73) tipo -> . STRING
    (74) tipo -> . CID
    (117) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    BOOL            shift and go to state 15
    STRING          shift and go to state 16
    CID             shift and go to state 17
    PARDER          reduce using rule 117 (empty -> .)

    tipo                           shift and go to state 11
    fun2                           shift and go to state 32
    empty                          shift and go to state 12

state 28

    (105) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (108) opc2 -> . estatuto
    (109) opc2 -> . empty
    (42) estatuto -> . asignacion estatuto
    (43) estatuto -> . condicion estatuto
    (44) estatuto -> . escritura estatuto
    (45) estatuto -> . for estatuto
    (46) estatuto -> . while estatuto
    (47) estatuto -> . when estatuto
    (48) estatuto -> . llamada estatuto
    (49) estatuto -> . empty
    (117) empty -> .
    (50) asignacion -> . ID asignacion3 IGUAL asignacion2
    (59) condicion -> . IF condicion2 condicionr estatutor
    (65) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (90) for -> . FOR PARIZQ ID WS IN WS for2 PARDER bloque
    (94) while -> . WHILE PARIZQ expresion PARDER bloque
    (95) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (115) llamada -> . ID PARIZQ expresion expresionr PARDER
    (116) llamada -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    WHEN            shift and go to state 48

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! WHEN            [ reduce using rule 117 (empty -> .) ]

    opc2                           shift and go to state 33
    estatuto                       shift and go to state 34
    empty                          shift and go to state 35
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    for                            shift and go to state 39
    while                          shift and go to state 40
    when                           shift and go to state 41
    llamada                        shift and go to state 42

state 29

    (106) opc1 -> vars .

    ID              reduce using rule 106 (opc1 -> vars .)
    IF              reduce using rule 106 (opc1 -> vars .)
    WRITE           reduce using rule 106 (opc1 -> vars .)
    FOR             reduce using rule 106 (opc1 -> vars .)
    WHILE           reduce using rule 106 (opc1 -> vars .)
    WHEN            reduce using rule 106 (opc1 -> vars .)
    RETURN          reduce using rule 106 (opc1 -> vars .)
    LLAVEDER        reduce using rule 106 (opc1 -> vars .)


state 30

    (107) opc1 -> empty .
    (41) vars3 -> empty .

    ID              reduce using rule 107 (opc1 -> empty .)
    IF              reduce using rule 107 (opc1 -> empty .)
    WRITE           reduce using rule 107 (opc1 -> empty .)
    FOR             reduce using rule 107 (opc1 -> empty .)
    WHILE           reduce using rule 107 (opc1 -> empty .)
    WHEN            reduce using rule 107 (opc1 -> empty .)
    RETURN          reduce using rule 107 (opc1 -> empty .)
    LLAVEDER        reduce using rule 107 (opc1 -> empty .)
    WS              reduce using rule 41 (vars3 -> empty .)


state 31

    (34) vars -> vars3 . WS tipo WS vars2
    (35) vars -> vars3 . WS tipo WS LIST WS vars2

    WS              shift and go to state 49


state 32

    (101) fun2 -> tipo WS ID WS fun2 .

    PARDER          reduce using rule 101 (fun2 -> tipo WS ID WS fun2 .)


state 33

    (105) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (9) bloque2 -> . RETURN WS bloque3
    (10) bloque2 -> . empty
    (117) empty -> .

    RETURN          shift and go to state 51
    LLAVEDER        reduce using rule 117 (empty -> .)

    bloque2                        shift and go to state 50
    empty                          shift and go to state 52

state 34

    (108) opc2 -> estatuto .

    RETURN          reduce using rule 108 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 108 (opc2 -> estatuto .)


state 35

    (109) opc2 -> empty .
    (49) estatuto -> empty .
    (116) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 49 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 49 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 49 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 49 (estatuto -> empty .)
    RETURN          reduce using rule 49 (estatuto -> empty .)
    LLAVEDER        reduce using rule 49 (estatuto -> empty .)
    ID              reduce using rule 116 (llamada -> empty .)
    IF              reduce using rule 116 (llamada -> empty .)
    WRITE           reduce using rule 116 (llamada -> empty .)
    FOR             reduce using rule 116 (llamada -> empty .)
    WHILE           reduce using rule 116 (llamada -> empty .)
    WHEN            reduce using rule 116 (llamada -> empty .)

  ! RETURN          [ reduce using rule 109 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 109 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 116 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 116 (llamada -> empty .) ]


state 36

    (42) estatuto -> asignacion . estatuto
    (42) estatuto -> . asignacion estatuto
    (43) estatuto -> . condicion estatuto
    (44) estatuto -> . escritura estatuto
    (45) estatuto -> . for estatuto
    (46) estatuto -> . while estatuto
    (47) estatuto -> . when estatuto
    (48) estatuto -> . llamada estatuto
    (49) estatuto -> . empty
    (50) asignacion -> . ID asignacion3 IGUAL asignacion2
    (59) condicion -> . IF condicion2 condicionr estatutor
    (65) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (90) for -> . FOR PARIZQ ID WS IN WS for2 PARDER bloque
    (94) while -> . WHILE PARIZQ expresion PARDER bloque
    (95) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (115) llamada -> . ID PARIZQ expresion expresionr PARDER
    (116) llamada -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    WHEN            shift and go to state 48
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! WHEN            [ reduce using rule 117 (empty -> .) ]

    asignacion                     shift and go to state 36
    estatuto                       shift and go to state 53
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    for                            shift and go to state 39
    while                          shift and go to state 40
    when                           shift and go to state 41
    llamada                        shift and go to state 42
    empty                          shift and go to state 54

state 37

    (43) estatuto -> condicion . estatuto
    (42) estatuto -> . asignacion estatuto
    (43) estatuto -> . condicion estatuto
    (44) estatuto -> . escritura estatuto
    (45) estatuto -> . for estatuto
    (46) estatuto -> . while estatuto
    (47) estatuto -> . when estatuto
    (48) estatuto -> . llamada estatuto
    (49) estatuto -> . empty
    (50) asignacion -> . ID asignacion3 IGUAL asignacion2
    (59) condicion -> . IF condicion2 condicionr estatutor
    (65) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (90) for -> . FOR PARIZQ ID WS IN WS for2 PARDER bloque
    (94) while -> . WHILE PARIZQ expresion PARDER bloque
    (95) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (115) llamada -> . ID PARIZQ expresion expresionr PARDER
    (116) llamada -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    WHEN            shift and go to state 48
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! WHEN            [ reduce using rule 117 (empty -> .) ]

    condicion                      shift and go to state 37
    estatuto                       shift and go to state 55
    asignacion                     shift and go to state 36
    escritura                      shift and go to state 38
    for                            shift and go to state 39
    while                          shift and go to state 40
    when                           shift and go to state 41
    llamada                        shift and go to state 42
    empty                          shift and go to state 54

state 38

    (44) estatuto -> escritura . estatuto
    (42) estatuto -> . asignacion estatuto
    (43) estatuto -> . condicion estatuto
    (44) estatuto -> . escritura estatuto
    (45) estatuto -> . for estatuto
    (46) estatuto -> . while estatuto
    (47) estatuto -> . when estatuto
    (48) estatuto -> . llamada estatuto
    (49) estatuto -> . empty
    (50) asignacion -> . ID asignacion3 IGUAL asignacion2
    (59) condicion -> . IF condicion2 condicionr estatutor
    (65) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (90) for -> . FOR PARIZQ ID WS IN WS for2 PARDER bloque
    (94) while -> . WHILE PARIZQ expresion PARDER bloque
    (95) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (115) llamada -> . ID PARIZQ expresion expresionr PARDER
    (116) llamada -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    WHEN            shift and go to state 48
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! WHEN            [ reduce using rule 117 (empty -> .) ]

    escritura                      shift and go to state 38
    estatuto                       shift and go to state 56
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    for                            shift and go to state 39
    while                          shift and go to state 40
    when                           shift and go to state 41
    llamada                        shift and go to state 42
    empty                          shift and go to state 54

state 39

    (45) estatuto -> for . estatuto
    (42) estatuto -> . asignacion estatuto
    (43) estatuto -> . condicion estatuto
    (44) estatuto -> . escritura estatuto
    (45) estatuto -> . for estatuto
    (46) estatuto -> . while estatuto
    (47) estatuto -> . when estatuto
    (48) estatuto -> . llamada estatuto
    (49) estatuto -> . empty
    (50) asignacion -> . ID asignacion3 IGUAL asignacion2
    (59) condicion -> . IF condicion2 condicionr estatutor
    (65) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (90) for -> . FOR PARIZQ ID WS IN WS for2 PARDER bloque
    (94) while -> . WHILE PARIZQ expresion PARDER bloque
    (95) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (115) llamada -> . ID PARIZQ expresion expresionr PARDER
    (116) llamada -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    WHEN            shift and go to state 48
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! WHEN            [ reduce using rule 117 (empty -> .) ]

    for                            shift and go to state 39
    estatuto                       shift and go to state 57
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    while                          shift and go to state 40
    when                           shift and go to state 41
    llamada                        shift and go to state 42
    empty                          shift and go to state 54

state 40

    (46) estatuto -> while . estatuto
    (42) estatuto -> . asignacion estatuto
    (43) estatuto -> . condicion estatuto
    (44) estatuto -> . escritura estatuto
    (45) estatuto -> . for estatuto
    (46) estatuto -> . while estatuto
    (47) estatuto -> . when estatuto
    (48) estatuto -> . llamada estatuto
    (49) estatuto -> . empty
    (50) asignacion -> . ID asignacion3 IGUAL asignacion2
    (59) condicion -> . IF condicion2 condicionr estatutor
    (65) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (90) for -> . FOR PARIZQ ID WS IN WS for2 PARDER bloque
    (94) while -> . WHILE PARIZQ expresion PARDER bloque
    (95) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (115) llamada -> . ID PARIZQ expresion expresionr PARDER
    (116) llamada -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    WHEN            shift and go to state 48
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! WHEN            [ reduce using rule 117 (empty -> .) ]

    while                          shift and go to state 40
    estatuto                       shift and go to state 58
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    for                            shift and go to state 39
    when                           shift and go to state 41
    llamada                        shift and go to state 42
    empty                          shift and go to state 54

state 41

    (47) estatuto -> when . estatuto
    (42) estatuto -> . asignacion estatuto
    (43) estatuto -> . condicion estatuto
    (44) estatuto -> . escritura estatuto
    (45) estatuto -> . for estatuto
    (46) estatuto -> . while estatuto
    (47) estatuto -> . when estatuto
    (48) estatuto -> . llamada estatuto
    (49) estatuto -> . empty
    (50) asignacion -> . ID asignacion3 IGUAL asignacion2
    (59) condicion -> . IF condicion2 condicionr estatutor
    (65) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (90) for -> . FOR PARIZQ ID WS IN WS for2 PARDER bloque
    (94) while -> . WHILE PARIZQ expresion PARDER bloque
    (95) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (115) llamada -> . ID PARIZQ expresion expresionr PARDER
    (116) llamada -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    WHEN            shift and go to state 48
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! WHEN            [ reduce using rule 117 (empty -> .) ]

    when                           shift and go to state 41
    estatuto                       shift and go to state 59
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    for                            shift and go to state 39
    while                          shift and go to state 40
    llamada                        shift and go to state 42
    empty                          shift and go to state 54

state 42

    (48) estatuto -> llamada . estatuto
    (42) estatuto -> . asignacion estatuto
    (43) estatuto -> . condicion estatuto
    (44) estatuto -> . escritura estatuto
    (45) estatuto -> . for estatuto
    (46) estatuto -> . while estatuto
    (47) estatuto -> . when estatuto
    (48) estatuto -> . llamada estatuto
    (49) estatuto -> . empty
    (50) asignacion -> . ID asignacion3 IGUAL asignacion2
    (59) condicion -> . IF condicion2 condicionr estatutor
    (65) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (90) for -> . FOR PARIZQ ID WS IN WS for2 PARDER bloque
    (94) while -> . WHILE PARIZQ expresion PARDER bloque
    (95) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (115) llamada -> . ID PARIZQ expresion expresionr PARDER
    (116) llamada -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    WHEN            shift and go to state 48
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! WHEN            [ reduce using rule 117 (empty -> .) ]

    llamada                        shift and go to state 42
    estatuto                       shift and go to state 60
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    for                            shift and go to state 39
    while                          shift and go to state 40
    when                           shift and go to state 41
    empty                          shift and go to state 54

state 43

    (50) asignacion -> ID . asignacion3 IGUAL asignacion2
    (115) llamada -> ID . PARIZQ expresion expresionr PARDER
    (56) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (57) asignacion3 -> . PUNTO ID
    (58) asignacion3 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 62
    CORCHIZQ        shift and go to state 63
    PUNTO           shift and go to state 64
    IGUAL           reduce using rule 117 (empty -> .)

    asignacion3                    shift and go to state 61
    empty                          shift and go to state 65

state 44

    (59) condicion -> IF . condicion2 condicionr estatutor
    (60) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 67

    condicion2                     shift and go to state 66

state 45

    (65) escritura -> WRITE . PARIZQ esc1 esc2 PARDER

    PARIZQ          shift and go to state 68


state 46

    (90) for -> FOR . PARIZQ ID WS IN WS for2 PARDER bloque

    PARIZQ          shift and go to state 69


state 47

    (94) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 70


state 48

    (95) when -> WHEN . PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER

    PARIZQ          shift and go to state 71


state 49

    (34) vars -> vars3 WS . tipo WS vars2
    (35) vars -> vars3 WS . tipo WS LIST WS vars2
    (70) tipo -> . INT
    (71) tipo -> . FLOAT
    (72) tipo -> . BOOL
    (73) tipo -> . STRING
    (74) tipo -> . CID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    BOOL            shift and go to state 15
    STRING          shift and go to state 16
    CID             shift and go to state 17

    tipo                           shift and go to state 72

state 50

    (105) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 73


state 51

    (9) bloque2 -> RETURN . WS bloque3

    WS              shift and go to state 74


state 52

    (10) bloque2 -> empty .

    LLAVEDER        reduce using rule 10 (bloque2 -> empty .)


state 53

    (42) estatuto -> asignacion estatuto .

    RETURN          reduce using rule 42 (estatuto -> asignacion estatuto .)
    LLAVEDER        reduce using rule 42 (estatuto -> asignacion estatuto .)


state 54

    (49) estatuto -> empty .
    (116) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 49 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 49 (estatuto -> empty .)
    RETURN          reduce using rule 49 (estatuto -> empty .)
    LLAVEDER        reduce using rule 49 (estatuto -> empty .)
    ID              reduce using rule 116 (llamada -> empty .)
    IF              reduce using rule 116 (llamada -> empty .)
    WRITE           reduce using rule 116 (llamada -> empty .)
    FOR             reduce using rule 116 (llamada -> empty .)
    WHILE           reduce using rule 116 (llamada -> empty .)
    WHEN            reduce using rule 116 (llamada -> empty .)

  ! RETURN          [ reduce using rule 116 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 116 (llamada -> empty .) ]


state 55

    (43) estatuto -> condicion estatuto .

    RETURN          reduce using rule 43 (estatuto -> condicion estatuto .)
    LLAVEDER        reduce using rule 43 (estatuto -> condicion estatuto .)


state 56

    (44) estatuto -> escritura estatuto .

    RETURN          reduce using rule 44 (estatuto -> escritura estatuto .)
    LLAVEDER        reduce using rule 44 (estatuto -> escritura estatuto .)


state 57

    (45) estatuto -> for estatuto .

    RETURN          reduce using rule 45 (estatuto -> for estatuto .)
    LLAVEDER        reduce using rule 45 (estatuto -> for estatuto .)


state 58

    (46) estatuto -> while estatuto .

    RETURN          reduce using rule 46 (estatuto -> while estatuto .)
    LLAVEDER        reduce using rule 46 (estatuto -> while estatuto .)


state 59

    (47) estatuto -> when estatuto .

    RETURN          reduce using rule 47 (estatuto -> when estatuto .)
    LLAVEDER        reduce using rule 47 (estatuto -> when estatuto .)


state 60

    (48) estatuto -> llamada estatuto .

    RETURN          reduce using rule 48 (estatuto -> llamada estatuto .)
    LLAVEDER        reduce using rule 48 (estatuto -> llamada estatuto .)


state 61

    (50) asignacion -> ID asignacion3 . IGUAL asignacion2

    IGUAL           shift and go to state 75


state 62

    (115) llamada -> ID PARIZQ . expresion expresionr PARDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion                      shift and go to state 78
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 63

    (56) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion                      shift and go to state 86
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 64

    (57) asignacion3 -> PUNTO . ID

    ID              shift and go to state 87


state 65

    (58) asignacion3 -> empty .

    IGUAL           reduce using rule 58 (asignacion3 -> empty .)


state 66

    (59) condicion -> IF condicion2 . condicionr estatutor
    (61) condicionr -> . ELSE WS IF condicion2
    (62) condicionr -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 89
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ELSE            [ reduce using rule 117 (empty -> .) ]

    condicionr                     shift and go to state 88
    empty                          shift and go to state 90

state 67

    (60) condicion2 -> PARIZQ . expresion PARDER bloque
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion                      shift and go to state 91
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 68

    (65) escritura -> WRITE PARIZQ . esc1 esc2 PARDER
    (66) esc1 -> . expresion
    (67) esc1 -> . STRING
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 94
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! STRING          [ reduce using rule 117 (empty -> .) ]

    esc1                           shift and go to state 92
    expresion                      shift and go to state 93
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 69

    (90) for -> FOR PARIZQ . ID WS IN WS for2 PARDER bloque

    ID              shift and go to state 95


state 70

    (94) while -> WHILE PARIZQ . expresion PARDER bloque
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion                      shift and go to state 96
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 71

    (95) when -> WHEN PARIZQ . expresion PARDER LLAVEIZQ when2 LLAVEDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion                      shift and go to state 97
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 72

    (34) vars -> vars3 WS tipo . WS vars2
    (35) vars -> vars3 WS tipo . WS LIST WS vars2

    WS              shift and go to state 98


state 73

    (105) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    $end            reduce using rule 105 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 74

    (9) bloque2 -> RETURN WS . bloque3
    (11) bloque3 -> . expresion
    (12) bloque3 -> . empty
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (117) empty -> .
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    LLAVEDER        reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84

  ! ID              [ reduce using rule 117 (empty -> .) ]

    bloque3                        shift and go to state 99
    expresion                      shift and go to state 100
    empty                          shift and go to state 101
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82

state 75

    (50) asignacion -> ID asignacion3 IGUAL . asignacion2
    (51) asignacion2 -> . expresion
    (52) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (53) asignacion2 -> . READ PARIZQ STRING PARDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CORCHDER        shift and go to state 104
    READ            shift and go to state 105
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    asignacion2                    shift and go to state 102
    expresion                      shift and go to state 103
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 76

    (22) expresion -> ID . PARIZQ expresion2 PARDER

    PARIZQ          shift and go to state 106


state 77

    (75) factor -> PARIZQ . expresion PARDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion                      shift and go to state 107
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 78

    (115) llamada -> ID PARIZQ expresion . expresionr PARDER
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (117) empty -> .

    COMA            shift and go to state 109
    PARDER          reduce using rule 117 (empty -> .)

    expresionr                     shift and go to state 108
    empty                          shift and go to state 110

state 79

    (21) expresion -> exp . oplog
    (27) oplog -> . MAYORQUE exp
    (28) oplog -> . MENORQUE exp
    (29) oplog -> . DIFERENTE exp
    (30) oplog -> . MAYOROIGUAL exp
    (31) oplog -> . MENOROIGUAL exp
    (32) oplog -> . IGUALIGUAL exp
    (33) oplog -> . empty
    (117) empty -> .

    MAYORQUE        shift and go to state 112
    MENORQUE        shift and go to state 113
    DIFERENTE       shift and go to state 114
    MAYOROIGUAL     shift and go to state 115
    MENOROIGUAL     shift and go to state 116
    IGUALIGUAL      shift and go to state 117
    COMA            reduce using rule 117 (empty -> .)
    PARDER          reduce using rule 117 (empty -> .)
    CORCHDER        reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    CORCHIZQ        reduce using rule 117 (empty -> .)

    oplog                          shift and go to state 111
    empty                          shift and go to state 118

state 80

    (81) exp -> termino . expr
    (82) expr -> . MAS termino expr
    (83) expr -> . MENOS termino expr
    (84) expr -> . empty
    (117) empty -> .

    MAS             shift and go to state 120
    MENOS           shift and go to state 121
    MAYORQUE        reduce using rule 117 (empty -> .)
    MENORQUE        reduce using rule 117 (empty -> .)
    DIFERENTE       reduce using rule 117 (empty -> .)
    MAYOROIGUAL     reduce using rule 117 (empty -> .)
    MENOROIGUAL     reduce using rule 117 (empty -> .)
    IGUALIGUAL      reduce using rule 117 (empty -> .)
    COMA            reduce using rule 117 (empty -> .)
    PARDER          reduce using rule 117 (empty -> .)
    CORCHDER        reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    CORCHIZQ        reduce using rule 117 (empty -> .)

    expr                           shift and go to state 119
    empty                          shift and go to state 122

state 81

    (80) termino -> factor . terminor
    (77) terminor -> . POR factor terminor
    (78) terminor -> . SOBRE factor terminor
    (79) terminor -> . empty
    (117) empty -> .

    POR             shift and go to state 124
    SOBRE           shift and go to state 125
    MAS             reduce using rule 117 (empty -> .)
    MENOS           reduce using rule 117 (empty -> .)
    MAYORQUE        reduce using rule 117 (empty -> .)
    MENORQUE        reduce using rule 117 (empty -> .)
    DIFERENTE       reduce using rule 117 (empty -> .)
    MAYOROIGUAL     reduce using rule 117 (empty -> .)
    MENOROIGUAL     reduce using rule 117 (empty -> .)
    IGUALIGUAL      reduce using rule 117 (empty -> .)
    COMA            reduce using rule 117 (empty -> .)
    PARDER          reduce using rule 117 (empty -> .)
    CORCHDER        reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    CORCHIZQ        reduce using rule 117 (empty -> .)

    terminor                       shift and go to state 123
    empty                          shift and go to state 126

state 82

    (76) factor -> factor2 . varcte varcter
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 128
    INTNUM          shift and go to state 129
    FLOATNUM        shift and go to state 130
    BOOLVAL         shift and go to state 131
    STRING          shift and go to state 132

    varcte                         shift and go to state 127

state 83

    (87) factor2 -> MAS .

    ID              reduce using rule 87 (factor2 -> MAS .)
    INTNUM          reduce using rule 87 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 87 (factor2 -> MAS .)
    BOOLVAL         reduce using rule 87 (factor2 -> MAS .)
    STRING          reduce using rule 87 (factor2 -> MAS .)


state 84

    (88) factor2 -> MENOS .

    ID              reduce using rule 88 (factor2 -> MENOS .)
    INTNUM          reduce using rule 88 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 88 (factor2 -> MENOS .)
    BOOLVAL         reduce using rule 88 (factor2 -> MENOS .)
    STRING          reduce using rule 88 (factor2 -> MENOS .)


state 85

    (89) factor2 -> empty .

    ID              reduce using rule 89 (factor2 -> empty .)
    INTNUM          reduce using rule 89 (factor2 -> empty .)
    FLOATNUM        reduce using rule 89 (factor2 -> empty .)
    BOOLVAL         reduce using rule 89 (factor2 -> empty .)
    STRING          reduce using rule 89 (factor2 -> empty .)


state 86

    (56) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 133


state 87

    (57) asignacion3 -> PUNTO ID .

    IGUAL           reduce using rule 57 (asignacion3 -> PUNTO ID .)


state 88

    (59) condicion -> IF condicion2 condicionr . estatutor
    (63) estatutor -> . ELSE bloque
    (64) estatutor -> . empty
    (117) empty -> .

    ELSE            shift and go to state 135
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

    estatutor                      shift and go to state 134
    empty                          shift and go to state 136

state 89

    (61) condicionr -> ELSE . WS IF condicion2

    WS              shift and go to state 137


state 90

    (62) condicionr -> empty .

    ELSE            reduce using rule 62 (condicionr -> empty .)
    ID              reduce using rule 62 (condicionr -> empty .)
    IF              reduce using rule 62 (condicionr -> empty .)
    WRITE           reduce using rule 62 (condicionr -> empty .)
    FOR             reduce using rule 62 (condicionr -> empty .)
    WHILE           reduce using rule 62 (condicionr -> empty .)
    WHEN            reduce using rule 62 (condicionr -> empty .)
    RETURN          reduce using rule 62 (condicionr -> empty .)
    LLAVEDER        reduce using rule 62 (condicionr -> empty .)


state 91

    (60) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 138


state 92

    (65) escritura -> WRITE PARIZQ esc1 . esc2 PARDER
    (68) esc2 -> . COMA esc1 esc2
    (69) esc2 -> . empty
    (117) empty -> .

    COMA            shift and go to state 140
    PARDER          reduce using rule 117 (empty -> .)

    esc2                           shift and go to state 139
    empty                          shift and go to state 141

state 93

    (66) esc1 -> expresion .

    COMA            reduce using rule 66 (esc1 -> expresion .)
    PARDER          reduce using rule 66 (esc1 -> expresion .)


state 94

    (67) esc1 -> STRING .

    COMA            reduce using rule 67 (esc1 -> STRING .)
    PARDER          reduce using rule 67 (esc1 -> STRING .)


state 95

    (90) for -> FOR PARIZQ ID . WS IN WS for2 PARDER bloque

    WS              shift and go to state 142


state 96

    (94) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 143


state 97

    (95) when -> WHEN PARIZQ expresion . PARDER LLAVEIZQ when2 LLAVEDER

    PARDER          shift and go to state 144


state 98

    (34) vars -> vars3 WS tipo WS . vars2
    (35) vars -> vars3 WS tipo WS . LIST WS vars2
    (38) vars2 -> . ID varsr
    (39) vars2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LIST            shift and go to state 146
    ID              shift and go to state 147
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    vars2                          shift and go to state 145
    empty                          shift and go to state 148

state 99

    (9) bloque2 -> RETURN WS bloque3 .

    LLAVEDER        reduce using rule 9 (bloque2 -> RETURN WS bloque3 .)


state 100

    (11) bloque3 -> expresion .

    LLAVEDER        reduce using rule 11 (bloque3 -> expresion .)


state 101

    (12) bloque3 -> empty .
    (89) factor2 -> empty .

    LLAVEDER        reduce using rule 12 (bloque3 -> empty .)
    ID              reduce using rule 89 (factor2 -> empty .)
    INTNUM          reduce using rule 89 (factor2 -> empty .)
    FLOATNUM        reduce using rule 89 (factor2 -> empty .)
    BOOLVAL         reduce using rule 89 (factor2 -> empty .)
    STRING          reduce using rule 89 (factor2 -> empty .)


state 102

    (50) asignacion -> ID asignacion3 IGUAL asignacion2 .

    ID              reduce using rule 50 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    IF              reduce using rule 50 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    WRITE           reduce using rule 50 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    FOR             reduce using rule 50 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    WHILE           reduce using rule 50 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    WHEN            reduce using rule 50 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    RETURN          reduce using rule 50 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    LLAVEDER        reduce using rule 50 (asignacion -> ID asignacion3 IGUAL asignacion2 .)


state 103

    (51) asignacion2 -> expresion .

    ID              reduce using rule 51 (asignacion2 -> expresion .)
    IF              reduce using rule 51 (asignacion2 -> expresion .)
    WRITE           reduce using rule 51 (asignacion2 -> expresion .)
    FOR             reduce using rule 51 (asignacion2 -> expresion .)
    WHILE           reduce using rule 51 (asignacion2 -> expresion .)
    WHEN            reduce using rule 51 (asignacion2 -> expresion .)
    RETURN          reduce using rule 51 (asignacion2 -> expresion .)
    LLAVEDER        reduce using rule 51 (asignacion2 -> expresion .)


state 104

    (52) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion                      shift and go to state 149
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 105

    (53) asignacion2 -> READ . PARIZQ STRING PARDER

    PARIZQ          shift and go to state 150


state 106

    (22) expresion -> ID PARIZQ . expresion2 PARDER
    (25) expresion2 -> . expresion expresionr
    (26) expresion2 -> . empty
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (117) empty -> .
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARDER          reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion2                     shift and go to state 151
    expresion                      shift and go to state 152
    empty                          shift and go to state 153
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82

state 107

    (75) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 154


state 108

    (115) llamada -> ID PARIZQ expresion expresionr . PARDER

    PARDER          shift and go to state 155


state 109

    (23) expresionr -> COMA . expresion expresionr
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion                      shift and go to state 156
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 110

    (24) expresionr -> empty .

    PARDER          reduce using rule 24 (expresionr -> empty .)


state 111

    (21) expresion -> exp oplog .

    COMA            reduce using rule 21 (expresion -> exp oplog .)
    PARDER          reduce using rule 21 (expresion -> exp oplog .)
    CORCHDER        reduce using rule 21 (expresion -> exp oplog .)
    LLAVEDER        reduce using rule 21 (expresion -> exp oplog .)
    ID              reduce using rule 21 (expresion -> exp oplog .)
    IF              reduce using rule 21 (expresion -> exp oplog .)
    WRITE           reduce using rule 21 (expresion -> exp oplog .)
    FOR             reduce using rule 21 (expresion -> exp oplog .)
    WHILE           reduce using rule 21 (expresion -> exp oplog .)
    WHEN            reduce using rule 21 (expresion -> exp oplog .)
    RETURN          reduce using rule 21 (expresion -> exp oplog .)
    CORCHIZQ        reduce using rule 21 (expresion -> exp oplog .)


state 112

    (27) oplog -> MAYORQUE . exp
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    exp                            shift and go to state 157
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 113

    (28) oplog -> MENORQUE . exp
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    exp                            shift and go to state 158
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 114

    (29) oplog -> DIFERENTE . exp
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    exp                            shift and go to state 159
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 115

    (30) oplog -> MAYOROIGUAL . exp
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    exp                            shift and go to state 160
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 116

    (31) oplog -> MENOROIGUAL . exp
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    exp                            shift and go to state 161
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 117

    (32) oplog -> IGUALIGUAL . exp
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    exp                            shift and go to state 162
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 118

    (33) oplog -> empty .

    COMA            reduce using rule 33 (oplog -> empty .)
    PARDER          reduce using rule 33 (oplog -> empty .)
    CORCHDER        reduce using rule 33 (oplog -> empty .)
    LLAVEDER        reduce using rule 33 (oplog -> empty .)
    ID              reduce using rule 33 (oplog -> empty .)
    IF              reduce using rule 33 (oplog -> empty .)
    WRITE           reduce using rule 33 (oplog -> empty .)
    FOR             reduce using rule 33 (oplog -> empty .)
    WHILE           reduce using rule 33 (oplog -> empty .)
    WHEN            reduce using rule 33 (oplog -> empty .)
    RETURN          reduce using rule 33 (oplog -> empty .)
    CORCHIZQ        reduce using rule 33 (oplog -> empty .)


state 119

    (81) exp -> termino expr .

    MAYORQUE        reduce using rule 81 (exp -> termino expr .)
    MENORQUE        reduce using rule 81 (exp -> termino expr .)
    DIFERENTE       reduce using rule 81 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 81 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 81 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 81 (exp -> termino expr .)
    COMA            reduce using rule 81 (exp -> termino expr .)
    PARDER          reduce using rule 81 (exp -> termino expr .)
    CORCHDER        reduce using rule 81 (exp -> termino expr .)
    LLAVEDER        reduce using rule 81 (exp -> termino expr .)
    ID              reduce using rule 81 (exp -> termino expr .)
    IF              reduce using rule 81 (exp -> termino expr .)
    WRITE           reduce using rule 81 (exp -> termino expr .)
    FOR             reduce using rule 81 (exp -> termino expr .)
    WHILE           reduce using rule 81 (exp -> termino expr .)
    WHEN            reduce using rule 81 (exp -> termino expr .)
    RETURN          reduce using rule 81 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 81 (exp -> termino expr .)


state 120

    (82) expr -> MAS . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    termino                        shift and go to state 163
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 121

    (83) expr -> MENOS . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    termino                        shift and go to state 164
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 122

    (84) expr -> empty .

    MAYORQUE        reduce using rule 84 (expr -> empty .)
    MENORQUE        reduce using rule 84 (expr -> empty .)
    DIFERENTE       reduce using rule 84 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 84 (expr -> empty .)
    MENOROIGUAL     reduce using rule 84 (expr -> empty .)
    IGUALIGUAL      reduce using rule 84 (expr -> empty .)
    COMA            reduce using rule 84 (expr -> empty .)
    PARDER          reduce using rule 84 (expr -> empty .)
    CORCHDER        reduce using rule 84 (expr -> empty .)
    LLAVEDER        reduce using rule 84 (expr -> empty .)
    ID              reduce using rule 84 (expr -> empty .)
    IF              reduce using rule 84 (expr -> empty .)
    WRITE           reduce using rule 84 (expr -> empty .)
    FOR             reduce using rule 84 (expr -> empty .)
    WHILE           reduce using rule 84 (expr -> empty .)
    WHEN            reduce using rule 84 (expr -> empty .)
    RETURN          reduce using rule 84 (expr -> empty .)
    CORCHIZQ        reduce using rule 84 (expr -> empty .)


state 123

    (80) termino -> factor terminor .

    MAS             reduce using rule 80 (termino -> factor terminor .)
    MENOS           reduce using rule 80 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 80 (termino -> factor terminor .)
    MENORQUE        reduce using rule 80 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 80 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 80 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 80 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 80 (termino -> factor terminor .)
    COMA            reduce using rule 80 (termino -> factor terminor .)
    PARDER          reduce using rule 80 (termino -> factor terminor .)
    CORCHDER        reduce using rule 80 (termino -> factor terminor .)
    LLAVEDER        reduce using rule 80 (termino -> factor terminor .)
    ID              reduce using rule 80 (termino -> factor terminor .)
    IF              reduce using rule 80 (termino -> factor terminor .)
    WRITE           reduce using rule 80 (termino -> factor terminor .)
    FOR             reduce using rule 80 (termino -> factor terminor .)
    WHILE           reduce using rule 80 (termino -> factor terminor .)
    WHEN            reduce using rule 80 (termino -> factor terminor .)
    RETURN          reduce using rule 80 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 80 (termino -> factor terminor .)


state 124

    (77) terminor -> POR . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    factor                         shift and go to state 165
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 125

    (78) terminor -> SOBRE . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    ID              reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

    factor                         shift and go to state 166
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 126

    (79) terminor -> empty .

    MAS             reduce using rule 79 (terminor -> empty .)
    MENOS           reduce using rule 79 (terminor -> empty .)
    MAYORQUE        reduce using rule 79 (terminor -> empty .)
    MENORQUE        reduce using rule 79 (terminor -> empty .)
    DIFERENTE       reduce using rule 79 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 79 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 79 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 79 (terminor -> empty .)
    COMA            reduce using rule 79 (terminor -> empty .)
    PARDER          reduce using rule 79 (terminor -> empty .)
    CORCHDER        reduce using rule 79 (terminor -> empty .)
    LLAVEDER        reduce using rule 79 (terminor -> empty .)
    ID              reduce using rule 79 (terminor -> empty .)
    IF              reduce using rule 79 (terminor -> empty .)
    WRITE           reduce using rule 79 (terminor -> empty .)
    FOR             reduce using rule 79 (terminor -> empty .)
    WHILE           reduce using rule 79 (terminor -> empty .)
    WHEN            reduce using rule 79 (terminor -> empty .)
    RETURN          reduce using rule 79 (terminor -> empty .)
    CORCHIZQ        reduce using rule 79 (terminor -> empty .)


state 127

    (76) factor -> factor2 varcte . varcter
    (85) varcter -> . COMA varcte varcter
    (86) varcter -> . empty
    (117) empty -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 168
    POR             reduce using rule 117 (empty -> .)
    SOBRE           reduce using rule 117 (empty -> .)
    MAS             reduce using rule 117 (empty -> .)
    MENOS           reduce using rule 117 (empty -> .)
    MAYORQUE        reduce using rule 117 (empty -> .)
    MENORQUE        reduce using rule 117 (empty -> .)
    DIFERENTE       reduce using rule 117 (empty -> .)
    MAYOROIGUAL     reduce using rule 117 (empty -> .)
    MENOROIGUAL     reduce using rule 117 (empty -> .)
    IGUALIGUAL      reduce using rule 117 (empty -> .)
    PARDER          reduce using rule 117 (empty -> .)
    CORCHDER        reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    CORCHIZQ        reduce using rule 117 (empty -> .)

  ! COMA            [ reduce using rule 117 (empty -> .) ]

    varcter                        shift and go to state 167
    empty                          shift and go to state 169

state 128

    (13) varcte -> ID .
    (18) varcte -> ID . CORCHIZQ varcte CORCHDER
    (19) varcte -> ID . PUNTO ID
    (20) varcte -> ID . PARIZQ expresion2 PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    COMA            reduce using rule 13 (varcte -> ID .)
    POR             reduce using rule 13 (varcte -> ID .)
    SOBRE           reduce using rule 13 (varcte -> ID .)
    MAS             reduce using rule 13 (varcte -> ID .)
    MENOS           reduce using rule 13 (varcte -> ID .)
    MAYORQUE        reduce using rule 13 (varcte -> ID .)
    MENORQUE        reduce using rule 13 (varcte -> ID .)
    DIFERENTE       reduce using rule 13 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 13 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 13 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 13 (varcte -> ID .)
    PARDER          reduce using rule 13 (varcte -> ID .)
    CORCHDER        reduce using rule 13 (varcte -> ID .)
    LLAVEDER        reduce using rule 13 (varcte -> ID .)
    ID              reduce using rule 13 (varcte -> ID .)
    IF              reduce using rule 13 (varcte -> ID .)
    WRITE           reduce using rule 13 (varcte -> ID .)
    FOR             reduce using rule 13 (varcte -> ID .)
    WHILE           reduce using rule 13 (varcte -> ID .)
    WHEN            reduce using rule 13 (varcte -> ID .)
    RETURN          reduce using rule 13 (varcte -> ID .)
    FLECHITA        reduce using rule 13 (varcte -> ID .)
    CORCHIZQ        shift and go to state 170
    PUNTO           shift and go to state 171
    PARIZQ          shift and go to state 172

  ! CORCHIZQ        [ reduce using rule 13 (varcte -> ID .) ]


state 129

    (14) varcte -> INTNUM .

    COMA            reduce using rule 14 (varcte -> INTNUM .)
    POR             reduce using rule 14 (varcte -> INTNUM .)
    SOBRE           reduce using rule 14 (varcte -> INTNUM .)
    MAS             reduce using rule 14 (varcte -> INTNUM .)
    MENOS           reduce using rule 14 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 14 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 14 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 14 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 14 (varcte -> INTNUM .)
    PARDER          reduce using rule 14 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 14 (varcte -> INTNUM .)
    LLAVEDER        reduce using rule 14 (varcte -> INTNUM .)
    ID              reduce using rule 14 (varcte -> INTNUM .)
    IF              reduce using rule 14 (varcte -> INTNUM .)
    WRITE           reduce using rule 14 (varcte -> INTNUM .)
    FOR             reduce using rule 14 (varcte -> INTNUM .)
    WHILE           reduce using rule 14 (varcte -> INTNUM .)
    WHEN            reduce using rule 14 (varcte -> INTNUM .)
    RETURN          reduce using rule 14 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 14 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 14 (varcte -> INTNUM .)


state 130

    (15) varcte -> FLOATNUM .

    COMA            reduce using rule 15 (varcte -> FLOATNUM .)
    POR             reduce using rule 15 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 15 (varcte -> FLOATNUM .)
    MAS             reduce using rule 15 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 15 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 15 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 15 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 15 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 15 (varcte -> FLOATNUM .)
    LLAVEDER        reduce using rule 15 (varcte -> FLOATNUM .)
    ID              reduce using rule 15 (varcte -> FLOATNUM .)
    IF              reduce using rule 15 (varcte -> FLOATNUM .)
    WRITE           reduce using rule 15 (varcte -> FLOATNUM .)
    FOR             reduce using rule 15 (varcte -> FLOATNUM .)
    WHILE           reduce using rule 15 (varcte -> FLOATNUM .)
    WHEN            reduce using rule 15 (varcte -> FLOATNUM .)
    RETURN          reduce using rule 15 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 15 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 15 (varcte -> FLOATNUM .)


state 131

    (16) varcte -> BOOLVAL .

    COMA            reduce using rule 16 (varcte -> BOOLVAL .)
    POR             reduce using rule 16 (varcte -> BOOLVAL .)
    SOBRE           reduce using rule 16 (varcte -> BOOLVAL .)
    MAS             reduce using rule 16 (varcte -> BOOLVAL .)
    MENOS           reduce using rule 16 (varcte -> BOOLVAL .)
    MAYORQUE        reduce using rule 16 (varcte -> BOOLVAL .)
    MENORQUE        reduce using rule 16 (varcte -> BOOLVAL .)
    DIFERENTE       reduce using rule 16 (varcte -> BOOLVAL .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> BOOLVAL .)
    MENOROIGUAL     reduce using rule 16 (varcte -> BOOLVAL .)
    IGUALIGUAL      reduce using rule 16 (varcte -> BOOLVAL .)
    PARDER          reduce using rule 16 (varcte -> BOOLVAL .)
    CORCHDER        reduce using rule 16 (varcte -> BOOLVAL .)
    LLAVEDER        reduce using rule 16 (varcte -> BOOLVAL .)
    ID              reduce using rule 16 (varcte -> BOOLVAL .)
    IF              reduce using rule 16 (varcte -> BOOLVAL .)
    WRITE           reduce using rule 16 (varcte -> BOOLVAL .)
    FOR             reduce using rule 16 (varcte -> BOOLVAL .)
    WHILE           reduce using rule 16 (varcte -> BOOLVAL .)
    WHEN            reduce using rule 16 (varcte -> BOOLVAL .)
    RETURN          reduce using rule 16 (varcte -> BOOLVAL .)
    CORCHIZQ        reduce using rule 16 (varcte -> BOOLVAL .)
    FLECHITA        reduce using rule 16 (varcte -> BOOLVAL .)


state 132

    (17) varcte -> STRING .

    COMA            reduce using rule 17 (varcte -> STRING .)
    POR             reduce using rule 17 (varcte -> STRING .)
    SOBRE           reduce using rule 17 (varcte -> STRING .)
    MAS             reduce using rule 17 (varcte -> STRING .)
    MENOS           reduce using rule 17 (varcte -> STRING .)
    MAYORQUE        reduce using rule 17 (varcte -> STRING .)
    MENORQUE        reduce using rule 17 (varcte -> STRING .)
    DIFERENTE       reduce using rule 17 (varcte -> STRING .)
    MAYOROIGUAL     reduce using rule 17 (varcte -> STRING .)
    MENOROIGUAL     reduce using rule 17 (varcte -> STRING .)
    IGUALIGUAL      reduce using rule 17 (varcte -> STRING .)
    PARDER          reduce using rule 17 (varcte -> STRING .)
    CORCHDER        reduce using rule 17 (varcte -> STRING .)
    LLAVEDER        reduce using rule 17 (varcte -> STRING .)
    ID              reduce using rule 17 (varcte -> STRING .)
    IF              reduce using rule 17 (varcte -> STRING .)
    WRITE           reduce using rule 17 (varcte -> STRING .)
    FOR             reduce using rule 17 (varcte -> STRING .)
    WHILE           reduce using rule 17 (varcte -> STRING .)
    WHEN            reduce using rule 17 (varcte -> STRING .)
    RETURN          reduce using rule 17 (varcte -> STRING .)
    CORCHIZQ        reduce using rule 17 (varcte -> STRING .)
    FLECHITA        reduce using rule 17 (varcte -> STRING .)


state 133

    (56) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 56 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 134

    (59) condicion -> IF condicion2 condicionr estatutor .

    ID              reduce using rule 59 (condicion -> IF condicion2 condicionr estatutor .)
    IF              reduce using rule 59 (condicion -> IF condicion2 condicionr estatutor .)
    WRITE           reduce using rule 59 (condicion -> IF condicion2 condicionr estatutor .)
    FOR             reduce using rule 59 (condicion -> IF condicion2 condicionr estatutor .)
    WHILE           reduce using rule 59 (condicion -> IF condicion2 condicionr estatutor .)
    WHEN            reduce using rule 59 (condicion -> IF condicion2 condicionr estatutor .)
    RETURN          reduce using rule 59 (condicion -> IF condicion2 condicionr estatutor .)
    LLAVEDER        reduce using rule 59 (condicion -> IF condicion2 condicionr estatutor .)


state 135

    (63) estatutor -> ELSE . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 174

    bloque                         shift and go to state 173

state 136

    (64) estatutor -> empty .

    ID              reduce using rule 64 (estatutor -> empty .)
    IF              reduce using rule 64 (estatutor -> empty .)
    WRITE           reduce using rule 64 (estatutor -> empty .)
    FOR             reduce using rule 64 (estatutor -> empty .)
    WHILE           reduce using rule 64 (estatutor -> empty .)
    WHEN            reduce using rule 64 (estatutor -> empty .)
    RETURN          reduce using rule 64 (estatutor -> empty .)
    LLAVEDER        reduce using rule 64 (estatutor -> empty .)


state 137

    (61) condicionr -> ELSE WS . IF condicion2

    IF              shift and go to state 175


state 138

    (60) condicion2 -> PARIZQ expresion PARDER . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 174

    bloque                         shift and go to state 176

state 139

    (65) escritura -> WRITE PARIZQ esc1 esc2 . PARDER

    PARDER          shift and go to state 177


state 140

    (68) esc2 -> COMA . esc1 esc2
    (66) esc1 -> . expresion
    (67) esc1 -> . STRING
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 94
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! STRING          [ reduce using rule 117 (empty -> .) ]

    esc1                           shift and go to state 178
    expresion                      shift and go to state 93
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 141

    (69) esc2 -> empty .

    PARDER          reduce using rule 69 (esc2 -> empty .)


state 142

    (90) for -> FOR PARIZQ ID WS . IN WS for2 PARDER bloque

    IN              shift and go to state 179


state 143

    (94) while -> WHILE PARIZQ expresion PARDER . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 174

    bloque                         shift and go to state 180

state 144

    (95) when -> WHEN PARIZQ expresion PARDER . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 181


state 145

    (34) vars -> vars3 WS tipo WS vars2 .

    ID              reduce using rule 34 (vars -> vars3 WS tipo WS vars2 .)
    IF              reduce using rule 34 (vars -> vars3 WS tipo WS vars2 .)
    WRITE           reduce using rule 34 (vars -> vars3 WS tipo WS vars2 .)
    FOR             reduce using rule 34 (vars -> vars3 WS tipo WS vars2 .)
    WHILE           reduce using rule 34 (vars -> vars3 WS tipo WS vars2 .)
    WHEN            reduce using rule 34 (vars -> vars3 WS tipo WS vars2 .)
    RETURN          reduce using rule 34 (vars -> vars3 WS tipo WS vars2 .)
    LLAVEDER        reduce using rule 34 (vars -> vars3 WS tipo WS vars2 .)


state 146

    (35) vars -> vars3 WS tipo WS LIST . WS vars2

    WS              shift and go to state 182


state 147

    (38) vars2 -> ID . varsr
    (36) varsr -> . COMA ID varsr
    (37) varsr -> . empty
    (117) empty -> .

    COMA            shift and go to state 184
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

    varsr                          shift and go to state 183
    empty                          shift and go to state 185

state 148

    (39) vars2 -> empty .

    ID              reduce using rule 39 (vars2 -> empty .)
    IF              reduce using rule 39 (vars2 -> empty .)
    WRITE           reduce using rule 39 (vars2 -> empty .)
    FOR             reduce using rule 39 (vars2 -> empty .)
    WHILE           reduce using rule 39 (vars2 -> empty .)
    WHEN            reduce using rule 39 (vars2 -> empty .)
    RETURN          reduce using rule 39 (vars2 -> empty .)
    LLAVEDER        reduce using rule 39 (vars2 -> empty .)


state 149

    (52) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (54) asignacion2r -> . COMA expresion asignacion2r
    (55) asignacion2r -> . empty
    (117) empty -> .

    COMA            shift and go to state 187
    CORCHIZQ        reduce using rule 117 (empty -> .)

    asignacion2r                   shift and go to state 186
    empty                          shift and go to state 188

state 150

    (53) asignacion2 -> READ PARIZQ . STRING PARDER

    STRING          shift and go to state 189


state 151

    (22) expresion -> ID PARIZQ expresion2 . PARDER

    PARDER          shift and go to state 190


state 152

    (25) expresion2 -> expresion . expresionr
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (117) empty -> .

    COMA            shift and go to state 109
    PARDER          reduce using rule 117 (empty -> .)

    expresionr                     shift and go to state 191
    empty                          shift and go to state 110

state 153

    (26) expresion2 -> empty .
    (89) factor2 -> empty .

    PARDER          reduce using rule 26 (expresion2 -> empty .)
    ID              reduce using rule 89 (factor2 -> empty .)
    INTNUM          reduce using rule 89 (factor2 -> empty .)
    FLOATNUM        reduce using rule 89 (factor2 -> empty .)
    BOOLVAL         reduce using rule 89 (factor2 -> empty .)
    STRING          reduce using rule 89 (factor2 -> empty .)


state 154

    (75) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    LLAVEDER        reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    ID              reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    IF              reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    WRITE           reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    FOR             reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    WHILE           reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    WHEN            reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    RETURN          reduce using rule 75 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 75 (factor -> PARIZQ expresion PARDER .)


state 155

    (115) llamada -> ID PARIZQ expresion expresionr PARDER .

    ID              reduce using rule 115 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    IF              reduce using rule 115 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    WRITE           reduce using rule 115 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    FOR             reduce using rule 115 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    WHILE           reduce using rule 115 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    WHEN            reduce using rule 115 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    RETURN          reduce using rule 115 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    LLAVEDER        reduce using rule 115 (llamada -> ID PARIZQ expresion expresionr PARDER .)


state 156

    (23) expresionr -> COMA expresion . expresionr
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (117) empty -> .

    COMA            shift and go to state 109
    PARDER          reduce using rule 117 (empty -> .)

    expresionr                     shift and go to state 192
    empty                          shift and go to state 110

state 157

    (27) oplog -> MAYORQUE exp .

    COMA            reduce using rule 27 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 27 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 27 (oplog -> MAYORQUE exp .)
    LLAVEDER        reduce using rule 27 (oplog -> MAYORQUE exp .)
    ID              reduce using rule 27 (oplog -> MAYORQUE exp .)
    IF              reduce using rule 27 (oplog -> MAYORQUE exp .)
    WRITE           reduce using rule 27 (oplog -> MAYORQUE exp .)
    FOR             reduce using rule 27 (oplog -> MAYORQUE exp .)
    WHILE           reduce using rule 27 (oplog -> MAYORQUE exp .)
    WHEN            reduce using rule 27 (oplog -> MAYORQUE exp .)
    RETURN          reduce using rule 27 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 27 (oplog -> MAYORQUE exp .)


state 158

    (28) oplog -> MENORQUE exp .

    COMA            reduce using rule 28 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 28 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 28 (oplog -> MENORQUE exp .)
    LLAVEDER        reduce using rule 28 (oplog -> MENORQUE exp .)
    ID              reduce using rule 28 (oplog -> MENORQUE exp .)
    IF              reduce using rule 28 (oplog -> MENORQUE exp .)
    WRITE           reduce using rule 28 (oplog -> MENORQUE exp .)
    FOR             reduce using rule 28 (oplog -> MENORQUE exp .)
    WHILE           reduce using rule 28 (oplog -> MENORQUE exp .)
    WHEN            reduce using rule 28 (oplog -> MENORQUE exp .)
    RETURN          reduce using rule 28 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 28 (oplog -> MENORQUE exp .)


state 159

    (29) oplog -> DIFERENTE exp .

    COMA            reduce using rule 29 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 29 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 29 (oplog -> DIFERENTE exp .)
    LLAVEDER        reduce using rule 29 (oplog -> DIFERENTE exp .)
    ID              reduce using rule 29 (oplog -> DIFERENTE exp .)
    IF              reduce using rule 29 (oplog -> DIFERENTE exp .)
    WRITE           reduce using rule 29 (oplog -> DIFERENTE exp .)
    FOR             reduce using rule 29 (oplog -> DIFERENTE exp .)
    WHILE           reduce using rule 29 (oplog -> DIFERENTE exp .)
    WHEN            reduce using rule 29 (oplog -> DIFERENTE exp .)
    RETURN          reduce using rule 29 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 29 (oplog -> DIFERENTE exp .)


state 160

    (30) oplog -> MAYOROIGUAL exp .

    COMA            reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    LLAVEDER        reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    ID              reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    IF              reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    WRITE           reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    FOR             reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    WHILE           reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    WHEN            reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    RETURN          reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 30 (oplog -> MAYOROIGUAL exp .)


state 161

    (31) oplog -> MENOROIGUAL exp .

    COMA            reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    LLAVEDER        reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    ID              reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    IF              reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    WRITE           reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    FOR             reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    WHILE           reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    WHEN            reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    RETURN          reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 31 (oplog -> MENOROIGUAL exp .)


state 162

    (32) oplog -> IGUALIGUAL exp .

    COMA            reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    LLAVEDER        reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    ID              reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    IF              reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    WRITE           reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    FOR             reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    WHILE           reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    WHEN            reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    RETURN          reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 32 (oplog -> IGUALIGUAL exp .)


state 163

    (82) expr -> MAS termino . expr
    (82) expr -> . MAS termino expr
    (83) expr -> . MENOS termino expr
    (84) expr -> . empty
    (117) empty -> .

    MAS             shift and go to state 120
    MENOS           shift and go to state 121
    MAYORQUE        reduce using rule 117 (empty -> .)
    MENORQUE        reduce using rule 117 (empty -> .)
    DIFERENTE       reduce using rule 117 (empty -> .)
    MAYOROIGUAL     reduce using rule 117 (empty -> .)
    MENOROIGUAL     reduce using rule 117 (empty -> .)
    IGUALIGUAL      reduce using rule 117 (empty -> .)
    COMA            reduce using rule 117 (empty -> .)
    PARDER          reduce using rule 117 (empty -> .)
    CORCHDER        reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    CORCHIZQ        reduce using rule 117 (empty -> .)

    expr                           shift and go to state 193
    empty                          shift and go to state 122

state 164

    (83) expr -> MENOS termino . expr
    (82) expr -> . MAS termino expr
    (83) expr -> . MENOS termino expr
    (84) expr -> . empty
    (117) empty -> .

    MAS             shift and go to state 120
    MENOS           shift and go to state 121
    MAYORQUE        reduce using rule 117 (empty -> .)
    MENORQUE        reduce using rule 117 (empty -> .)
    DIFERENTE       reduce using rule 117 (empty -> .)
    MAYOROIGUAL     reduce using rule 117 (empty -> .)
    MENOROIGUAL     reduce using rule 117 (empty -> .)
    IGUALIGUAL      reduce using rule 117 (empty -> .)
    COMA            reduce using rule 117 (empty -> .)
    PARDER          reduce using rule 117 (empty -> .)
    CORCHDER        reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    CORCHIZQ        reduce using rule 117 (empty -> .)

    expr                           shift and go to state 194
    empty                          shift and go to state 122

state 165

    (77) terminor -> POR factor . terminor
    (77) terminor -> . POR factor terminor
    (78) terminor -> . SOBRE factor terminor
    (79) terminor -> . empty
    (117) empty -> .

    POR             shift and go to state 124
    SOBRE           shift and go to state 125
    MAS             reduce using rule 117 (empty -> .)
    MENOS           reduce using rule 117 (empty -> .)
    MAYORQUE        reduce using rule 117 (empty -> .)
    MENORQUE        reduce using rule 117 (empty -> .)
    DIFERENTE       reduce using rule 117 (empty -> .)
    MAYOROIGUAL     reduce using rule 117 (empty -> .)
    MENOROIGUAL     reduce using rule 117 (empty -> .)
    IGUALIGUAL      reduce using rule 117 (empty -> .)
    COMA            reduce using rule 117 (empty -> .)
    PARDER          reduce using rule 117 (empty -> .)
    CORCHDER        reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    CORCHIZQ        reduce using rule 117 (empty -> .)

    terminor                       shift and go to state 195
    empty                          shift and go to state 126

state 166

    (78) terminor -> SOBRE factor . terminor
    (77) terminor -> . POR factor terminor
    (78) terminor -> . SOBRE factor terminor
    (79) terminor -> . empty
    (117) empty -> .

    POR             shift and go to state 124
    SOBRE           shift and go to state 125
    MAS             reduce using rule 117 (empty -> .)
    MENOS           reduce using rule 117 (empty -> .)
    MAYORQUE        reduce using rule 117 (empty -> .)
    MENORQUE        reduce using rule 117 (empty -> .)
    DIFERENTE       reduce using rule 117 (empty -> .)
    MAYOROIGUAL     reduce using rule 117 (empty -> .)
    MENOROIGUAL     reduce using rule 117 (empty -> .)
    IGUALIGUAL      reduce using rule 117 (empty -> .)
    COMA            reduce using rule 117 (empty -> .)
    PARDER          reduce using rule 117 (empty -> .)
    CORCHDER        reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    CORCHIZQ        reduce using rule 117 (empty -> .)

    terminor                       shift and go to state 196
    empty                          shift and go to state 126

state 167

    (76) factor -> factor2 varcte varcter .

    POR             reduce using rule 76 (factor -> factor2 varcte varcter .)
    SOBRE           reduce using rule 76 (factor -> factor2 varcte varcter .)
    MAS             reduce using rule 76 (factor -> factor2 varcte varcter .)
    MENOS           reduce using rule 76 (factor -> factor2 varcte varcter .)
    MAYORQUE        reduce using rule 76 (factor -> factor2 varcte varcter .)
    MENORQUE        reduce using rule 76 (factor -> factor2 varcte varcter .)
    DIFERENTE       reduce using rule 76 (factor -> factor2 varcte varcter .)
    MAYOROIGUAL     reduce using rule 76 (factor -> factor2 varcte varcter .)
    MENOROIGUAL     reduce using rule 76 (factor -> factor2 varcte varcter .)
    IGUALIGUAL      reduce using rule 76 (factor -> factor2 varcte varcter .)
    COMA            reduce using rule 76 (factor -> factor2 varcte varcter .)
    PARDER          reduce using rule 76 (factor -> factor2 varcte varcter .)
    CORCHDER        reduce using rule 76 (factor -> factor2 varcte varcter .)
    LLAVEDER        reduce using rule 76 (factor -> factor2 varcte varcter .)
    ID              reduce using rule 76 (factor -> factor2 varcte varcter .)
    IF              reduce using rule 76 (factor -> factor2 varcte varcter .)
    WRITE           reduce using rule 76 (factor -> factor2 varcte varcter .)
    FOR             reduce using rule 76 (factor -> factor2 varcte varcter .)
    WHILE           reduce using rule 76 (factor -> factor2 varcte varcter .)
    WHEN            reduce using rule 76 (factor -> factor2 varcte varcter .)
    RETURN          reduce using rule 76 (factor -> factor2 varcte varcter .)
    CORCHIZQ        reduce using rule 76 (factor -> factor2 varcte varcter .)


state 168

    (85) varcter -> COMA . varcte varcter
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 128
    INTNUM          shift and go to state 129
    FLOATNUM        shift and go to state 130
    BOOLVAL         shift and go to state 131
    STRING          shift and go to state 132

    varcte                         shift and go to state 197

state 169

    (86) varcter -> empty .

    POR             reduce using rule 86 (varcter -> empty .)
    SOBRE           reduce using rule 86 (varcter -> empty .)
    MAS             reduce using rule 86 (varcter -> empty .)
    MENOS           reduce using rule 86 (varcter -> empty .)
    MAYORQUE        reduce using rule 86 (varcter -> empty .)
    MENORQUE        reduce using rule 86 (varcter -> empty .)
    DIFERENTE       reduce using rule 86 (varcter -> empty .)
    MAYOROIGUAL     reduce using rule 86 (varcter -> empty .)
    MENOROIGUAL     reduce using rule 86 (varcter -> empty .)
    IGUALIGUAL      reduce using rule 86 (varcter -> empty .)
    COMA            reduce using rule 86 (varcter -> empty .)
    PARDER          reduce using rule 86 (varcter -> empty .)
    CORCHDER        reduce using rule 86 (varcter -> empty .)
    LLAVEDER        reduce using rule 86 (varcter -> empty .)
    ID              reduce using rule 86 (varcter -> empty .)
    IF              reduce using rule 86 (varcter -> empty .)
    WRITE           reduce using rule 86 (varcter -> empty .)
    FOR             reduce using rule 86 (varcter -> empty .)
    WHILE           reduce using rule 86 (varcter -> empty .)
    WHEN            reduce using rule 86 (varcter -> empty .)
    RETURN          reduce using rule 86 (varcter -> empty .)
    CORCHIZQ        reduce using rule 86 (varcter -> empty .)
    FLECHITA        reduce using rule 86 (varcter -> empty .)


state 170

    (18) varcte -> ID CORCHIZQ . varcte CORCHDER
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 128
    INTNUM          shift and go to state 129
    FLOATNUM        shift and go to state 130
    BOOLVAL         shift and go to state 131
    STRING          shift and go to state 132

    varcte                         shift and go to state 198

state 171

    (19) varcte -> ID PUNTO . ID

    ID              shift and go to state 199


state 172

    (20) varcte -> ID PARIZQ . expresion2 PARDER
    (25) expresion2 -> . expresion expresionr
    (26) expresion2 -> . empty
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (117) empty -> .
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARDER          reduce using rule 117 (empty -> .)
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion2                     shift and go to state 200
    expresion                      shift and go to state 152
    empty                          shift and go to state 153
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82

state 173

    (63) estatutor -> ELSE bloque .

    ID              reduce using rule 63 (estatutor -> ELSE bloque .)
    IF              reduce using rule 63 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 63 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 63 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 63 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 63 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 63 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 63 (estatutor -> ELSE bloque .)


state 174

    (8) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (42) estatuto -> . asignacion estatuto
    (43) estatuto -> . condicion estatuto
    (44) estatuto -> . escritura estatuto
    (45) estatuto -> . for estatuto
    (46) estatuto -> . while estatuto
    (47) estatuto -> . when estatuto
    (48) estatuto -> . llamada estatuto
    (49) estatuto -> . empty
    (50) asignacion -> . ID asignacion3 IGUAL asignacion2
    (59) condicion -> . IF condicion2 condicionr estatutor
    (65) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (90) for -> . FOR PARIZQ ID WS IN WS for2 PARDER bloque
    (94) while -> . WHILE PARIZQ expresion PARDER bloque
    (95) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (115) llamada -> . ID PARIZQ expresion expresionr PARDER
    (116) llamada -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 43
    IF              shift and go to state 44
    WRITE           shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    WHEN            shift and go to state 48
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! WHEN            [ reduce using rule 117 (empty -> .) ]

    estatuto                       shift and go to state 201
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    for                            shift and go to state 39
    while                          shift and go to state 40
    when                           shift and go to state 41
    llamada                        shift and go to state 42
    empty                          shift and go to state 54

state 175

    (61) condicionr -> ELSE WS IF . condicion2
    (60) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 67

    condicion2                     shift and go to state 202

state 176

    (60) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 60 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 60 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 60 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 60 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 60 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 60 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 60 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 60 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 60 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 177

    (65) escritura -> WRITE PARIZQ esc1 esc2 PARDER .

    ID              reduce using rule 65 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    IF              reduce using rule 65 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WRITE           reduce using rule 65 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    FOR             reduce using rule 65 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WHILE           reduce using rule 65 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WHEN            reduce using rule 65 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    RETURN          reduce using rule 65 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    LLAVEDER        reduce using rule 65 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)


state 178

    (68) esc2 -> COMA esc1 . esc2
    (68) esc2 -> . COMA esc1 esc2
    (69) esc2 -> . empty
    (117) empty -> .

    COMA            shift and go to state 140
    PARDER          reduce using rule 117 (empty -> .)

    esc2                           shift and go to state 203
    empty                          shift and go to state 141

state 179

    (90) for -> FOR PARIZQ ID WS IN . WS for2 PARDER bloque

    WS              shift and go to state 204


state 180

    (94) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 94 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 94 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 94 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 94 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 94 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 94 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 94 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 94 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 181

    (95) when -> WHEN PARIZQ expresion PARDER LLAVEIZQ . when2 LLAVEDER
    (96) when2 -> . varcte varcter FLECHITA bloque when2
    (97) when2 -> . IN WS range FLECHITA bloque when2
    (98) when2 -> . ELSE FLECHITA bloque when2
    (99) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (117) empty -> .

    IN              shift and go to state 207
    ELSE            shift and go to state 208
    ID              shift and go to state 128
    INTNUM          shift and go to state 129
    FLOATNUM        shift and go to state 130
    BOOLVAL         shift and go to state 131
    STRING          shift and go to state 132
    LLAVEDER        reduce using rule 117 (empty -> .)

    when2                          shift and go to state 205
    varcte                         shift and go to state 206
    empty                          shift and go to state 209

state 182

    (35) vars -> vars3 WS tipo WS LIST WS . vars2
    (38) vars2 -> . ID varsr
    (39) vars2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 147
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    vars2                          shift and go to state 210
    empty                          shift and go to state 148

state 183

    (38) vars2 -> ID varsr .

    ID              reduce using rule 38 (vars2 -> ID varsr .)
    IF              reduce using rule 38 (vars2 -> ID varsr .)
    WRITE           reduce using rule 38 (vars2 -> ID varsr .)
    FOR             reduce using rule 38 (vars2 -> ID varsr .)
    WHILE           reduce using rule 38 (vars2 -> ID varsr .)
    WHEN            reduce using rule 38 (vars2 -> ID varsr .)
    RETURN          reduce using rule 38 (vars2 -> ID varsr .)
    LLAVEDER        reduce using rule 38 (vars2 -> ID varsr .)


state 184

    (36) varsr -> COMA . ID varsr

    ID              shift and go to state 211


state 185

    (37) varsr -> empty .

    ID              reduce using rule 37 (varsr -> empty .)
    IF              reduce using rule 37 (varsr -> empty .)
    WRITE           reduce using rule 37 (varsr -> empty .)
    FOR             reduce using rule 37 (varsr -> empty .)
    WHILE           reduce using rule 37 (varsr -> empty .)
    WHEN            reduce using rule 37 (varsr -> empty .)
    RETURN          reduce using rule 37 (varsr -> empty .)
    LLAVEDER        reduce using rule 37 (varsr -> empty .)


state 186

    (52) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 212


state 187

    (54) asignacion2r -> COMA . expresion asignacion2r
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (81) exp -> . termino expr
    (80) termino -> . factor terminor
    (75) factor -> . PARIZQ expresion PARDER
    (76) factor -> . factor2 varcte varcter
    (87) factor2 -> . MAS
    (88) factor2 -> . MENOS
    (89) factor2 -> . empty
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 76
    PARIZQ          shift and go to state 77
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    INTNUM          reduce using rule 117 (empty -> .)
    FLOATNUM        reduce using rule 117 (empty -> .)
    BOOLVAL         reduce using rule 117 (empty -> .)
    STRING          reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]

    expresion                      shift and go to state 213
    exp                            shift and go to state 79
    termino                        shift and go to state 80
    factor                         shift and go to state 81
    factor2                        shift and go to state 82
    empty                          shift and go to state 85

state 188

    (55) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 55 (asignacion2r -> empty .)


state 189

    (53) asignacion2 -> READ PARIZQ STRING . PARDER

    PARDER          shift and go to state 214


state 190

    (22) expresion -> ID PARIZQ expresion2 PARDER .

    COMA            reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    PARDER          reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    CORCHDER        reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    LLAVEDER        reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    ID              reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    IF              reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    WRITE           reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    FOR             reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    WHILE           reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    WHEN            reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    RETURN          reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    CORCHIZQ        reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)


state 191

    (25) expresion2 -> expresion expresionr .

    PARDER          reduce using rule 25 (expresion2 -> expresion expresionr .)


state 192

    (23) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 23 (expresionr -> COMA expresion expresionr .)


state 193

    (82) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 82 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 82 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 82 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 82 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 82 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 82 (expr -> MAS termino expr .)
    COMA            reduce using rule 82 (expr -> MAS termino expr .)
    PARDER          reduce using rule 82 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 82 (expr -> MAS termino expr .)
    LLAVEDER        reduce using rule 82 (expr -> MAS termino expr .)
    ID              reduce using rule 82 (expr -> MAS termino expr .)
    IF              reduce using rule 82 (expr -> MAS termino expr .)
    WRITE           reduce using rule 82 (expr -> MAS termino expr .)
    FOR             reduce using rule 82 (expr -> MAS termino expr .)
    WHILE           reduce using rule 82 (expr -> MAS termino expr .)
    WHEN            reduce using rule 82 (expr -> MAS termino expr .)
    RETURN          reduce using rule 82 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 82 (expr -> MAS termino expr .)


state 194

    (83) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 83 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 83 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 83 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 83 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 83 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 83 (expr -> MENOS termino expr .)
    COMA            reduce using rule 83 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 83 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 83 (expr -> MENOS termino expr .)
    LLAVEDER        reduce using rule 83 (expr -> MENOS termino expr .)
    ID              reduce using rule 83 (expr -> MENOS termino expr .)
    IF              reduce using rule 83 (expr -> MENOS termino expr .)
    WRITE           reduce using rule 83 (expr -> MENOS termino expr .)
    FOR             reduce using rule 83 (expr -> MENOS termino expr .)
    WHILE           reduce using rule 83 (expr -> MENOS termino expr .)
    WHEN            reduce using rule 83 (expr -> MENOS termino expr .)
    RETURN          reduce using rule 83 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 83 (expr -> MENOS termino expr .)


state 195

    (77) terminor -> POR factor terminor .

    MAS             reduce using rule 77 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 77 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 77 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 77 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 77 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 77 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 77 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 77 (terminor -> POR factor terminor .)
    COMA            reduce using rule 77 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 77 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 77 (terminor -> POR factor terminor .)
    LLAVEDER        reduce using rule 77 (terminor -> POR factor terminor .)
    ID              reduce using rule 77 (terminor -> POR factor terminor .)
    IF              reduce using rule 77 (terminor -> POR factor terminor .)
    WRITE           reduce using rule 77 (terminor -> POR factor terminor .)
    FOR             reduce using rule 77 (terminor -> POR factor terminor .)
    WHILE           reduce using rule 77 (terminor -> POR factor terminor .)
    WHEN            reduce using rule 77 (terminor -> POR factor terminor .)
    RETURN          reduce using rule 77 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 77 (terminor -> POR factor terminor .)


state 196

    (78) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 78 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 78 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 78 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 78 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 78 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 78 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 78 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 78 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 78 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 78 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 78 (terminor -> SOBRE factor terminor .)
    LLAVEDER        reduce using rule 78 (terminor -> SOBRE factor terminor .)
    ID              reduce using rule 78 (terminor -> SOBRE factor terminor .)
    IF              reduce using rule 78 (terminor -> SOBRE factor terminor .)
    WRITE           reduce using rule 78 (terminor -> SOBRE factor terminor .)
    FOR             reduce using rule 78 (terminor -> SOBRE factor terminor .)
    WHILE           reduce using rule 78 (terminor -> SOBRE factor terminor .)
    WHEN            reduce using rule 78 (terminor -> SOBRE factor terminor .)
    RETURN          reduce using rule 78 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 78 (terminor -> SOBRE factor terminor .)


state 197

    (85) varcter -> COMA varcte . varcter
    (85) varcter -> . COMA varcte varcter
    (86) varcter -> . empty
    (117) empty -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 168
    POR             reduce using rule 117 (empty -> .)
    SOBRE           reduce using rule 117 (empty -> .)
    MAS             reduce using rule 117 (empty -> .)
    MENOS           reduce using rule 117 (empty -> .)
    MAYORQUE        reduce using rule 117 (empty -> .)
    MENORQUE        reduce using rule 117 (empty -> .)
    DIFERENTE       reduce using rule 117 (empty -> .)
    MAYOROIGUAL     reduce using rule 117 (empty -> .)
    MENOROIGUAL     reduce using rule 117 (empty -> .)
    IGUALIGUAL      reduce using rule 117 (empty -> .)
    PARDER          reduce using rule 117 (empty -> .)
    CORCHDER        reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    CORCHIZQ        reduce using rule 117 (empty -> .)
    FLECHITA        reduce using rule 117 (empty -> .)

  ! COMA            [ reduce using rule 117 (empty -> .) ]

    varcter                        shift and go to state 215
    empty                          shift and go to state 169

state 198

    (18) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 216


state 199

    (19) varcte -> ID PUNTO ID .

    COMA            reduce using rule 19 (varcte -> ID PUNTO ID .)
    POR             reduce using rule 19 (varcte -> ID PUNTO ID .)
    SOBRE           reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAS             reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENOS           reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAYORQUE        reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENORQUE        reduce using rule 19 (varcte -> ID PUNTO ID .)
    DIFERENTE       reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAYOROIGUAL     reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENOROIGUAL     reduce using rule 19 (varcte -> ID PUNTO ID .)
    IGUALIGUAL      reduce using rule 19 (varcte -> ID PUNTO ID .)
    PARDER          reduce using rule 19 (varcte -> ID PUNTO ID .)
    CORCHDER        reduce using rule 19 (varcte -> ID PUNTO ID .)
    LLAVEDER        reduce using rule 19 (varcte -> ID PUNTO ID .)
    ID              reduce using rule 19 (varcte -> ID PUNTO ID .)
    IF              reduce using rule 19 (varcte -> ID PUNTO ID .)
    WRITE           reduce using rule 19 (varcte -> ID PUNTO ID .)
    FOR             reduce using rule 19 (varcte -> ID PUNTO ID .)
    WHILE           reduce using rule 19 (varcte -> ID PUNTO ID .)
    WHEN            reduce using rule 19 (varcte -> ID PUNTO ID .)
    RETURN          reduce using rule 19 (varcte -> ID PUNTO ID .)
    CORCHIZQ        reduce using rule 19 (varcte -> ID PUNTO ID .)
    FLECHITA        reduce using rule 19 (varcte -> ID PUNTO ID .)


state 200

    (20) varcte -> ID PARIZQ expresion2 . PARDER

    PARDER          shift and go to state 217


state 201

    (8) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (9) bloque2 -> . RETURN WS bloque3
    (10) bloque2 -> . empty
    (117) empty -> .

    RETURN          shift and go to state 51
    LLAVEDER        reduce using rule 117 (empty -> .)

    bloque2                        shift and go to state 218
    empty                          shift and go to state 52

state 202

    (61) condicionr -> ELSE WS IF condicion2 .

    ELSE            reduce using rule 61 (condicionr -> ELSE WS IF condicion2 .)
    ID              reduce using rule 61 (condicionr -> ELSE WS IF condicion2 .)
    IF              reduce using rule 61 (condicionr -> ELSE WS IF condicion2 .)
    WRITE           reduce using rule 61 (condicionr -> ELSE WS IF condicion2 .)
    FOR             reduce using rule 61 (condicionr -> ELSE WS IF condicion2 .)
    WHILE           reduce using rule 61 (condicionr -> ELSE WS IF condicion2 .)
    WHEN            reduce using rule 61 (condicionr -> ELSE WS IF condicion2 .)
    RETURN          reduce using rule 61 (condicionr -> ELSE WS IF condicion2 .)
    LLAVEDER        reduce using rule 61 (condicionr -> ELSE WS IF condicion2 .)


state 203

    (68) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 68 (esc2 -> COMA esc1 esc2 .)


state 204

    (90) for -> FOR PARIZQ ID WS IN WS . for2 PARDER bloque
    (91) for2 -> . ID
    (92) for2 -> . range
    (93) range -> . INTNUM PUNTOSRANGO INTNUM

    ID              shift and go to state 219
    INTNUM          shift and go to state 222

    for2                           shift and go to state 220
    range                          shift and go to state 221

state 205

    (95) when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 223


state 206

    (96) when2 -> varcte . varcter FLECHITA bloque when2
    (85) varcter -> . COMA varcte varcter
    (86) varcter -> . empty
    (117) empty -> .

    COMA            shift and go to state 168
    FLECHITA        reduce using rule 117 (empty -> .)

    varcter                        shift and go to state 224
    empty                          shift and go to state 169

state 207

    (97) when2 -> IN . WS range FLECHITA bloque when2

    WS              shift and go to state 225


state 208

    (98) when2 -> ELSE . FLECHITA bloque when2

    FLECHITA        shift and go to state 226


state 209

    (99) when2 -> empty .

    LLAVEDER        reduce using rule 99 (when2 -> empty .)


state 210

    (35) vars -> vars3 WS tipo WS LIST WS vars2 .

    ID              reduce using rule 35 (vars -> vars3 WS tipo WS LIST WS vars2 .)
    IF              reduce using rule 35 (vars -> vars3 WS tipo WS LIST WS vars2 .)
    WRITE           reduce using rule 35 (vars -> vars3 WS tipo WS LIST WS vars2 .)
    FOR             reduce using rule 35 (vars -> vars3 WS tipo WS LIST WS vars2 .)
    WHILE           reduce using rule 35 (vars -> vars3 WS tipo WS LIST WS vars2 .)
    WHEN            reduce using rule 35 (vars -> vars3 WS tipo WS LIST WS vars2 .)
    RETURN          reduce using rule 35 (vars -> vars3 WS tipo WS LIST WS vars2 .)
    LLAVEDER        reduce using rule 35 (vars -> vars3 WS tipo WS LIST WS vars2 .)


state 211

    (36) varsr -> COMA ID . varsr
    (36) varsr -> . COMA ID varsr
    (37) varsr -> . empty
    (117) empty -> .

    COMA            shift and go to state 184
    ID              reduce using rule 117 (empty -> .)
    IF              reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    WHEN            reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    LLAVEDER        reduce using rule 117 (empty -> .)

    varsr                          shift and go to state 227
    empty                          shift and go to state 185

state 212

    (52) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    ID              reduce using rule 52 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    IF              reduce using rule 52 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    WRITE           reduce using rule 52 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    FOR             reduce using rule 52 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    WHILE           reduce using rule 52 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    WHEN            reduce using rule 52 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    RETURN          reduce using rule 52 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    LLAVEDER        reduce using rule 52 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 213

    (54) asignacion2r -> COMA expresion . asignacion2r
    (54) asignacion2r -> . COMA expresion asignacion2r
    (55) asignacion2r -> . empty
    (117) empty -> .

    COMA            shift and go to state 187
    CORCHIZQ        reduce using rule 117 (empty -> .)

    asignacion2r                   shift and go to state 228
    empty                          shift and go to state 188

state 214

    (53) asignacion2 -> READ PARIZQ STRING PARDER .

    ID              reduce using rule 53 (asignacion2 -> READ PARIZQ STRING PARDER .)
    IF              reduce using rule 53 (asignacion2 -> READ PARIZQ STRING PARDER .)
    WRITE           reduce using rule 53 (asignacion2 -> READ PARIZQ STRING PARDER .)
    FOR             reduce using rule 53 (asignacion2 -> READ PARIZQ STRING PARDER .)
    WHILE           reduce using rule 53 (asignacion2 -> READ PARIZQ STRING PARDER .)
    WHEN            reduce using rule 53 (asignacion2 -> READ PARIZQ STRING PARDER .)
    RETURN          reduce using rule 53 (asignacion2 -> READ PARIZQ STRING PARDER .)
    LLAVEDER        reduce using rule 53 (asignacion2 -> READ PARIZQ STRING PARDER .)


state 215

    (85) varcter -> COMA varcte varcter .

    POR             reduce using rule 85 (varcter -> COMA varcte varcter .)
    SOBRE           reduce using rule 85 (varcter -> COMA varcte varcter .)
    MAS             reduce using rule 85 (varcter -> COMA varcte varcter .)
    MENOS           reduce using rule 85 (varcter -> COMA varcte varcter .)
    MAYORQUE        reduce using rule 85 (varcter -> COMA varcte varcter .)
    MENORQUE        reduce using rule 85 (varcter -> COMA varcte varcter .)
    DIFERENTE       reduce using rule 85 (varcter -> COMA varcte varcter .)
    MAYOROIGUAL     reduce using rule 85 (varcter -> COMA varcte varcter .)
    MENOROIGUAL     reduce using rule 85 (varcter -> COMA varcte varcter .)
    IGUALIGUAL      reduce using rule 85 (varcter -> COMA varcte varcter .)
    COMA            reduce using rule 85 (varcter -> COMA varcte varcter .)
    PARDER          reduce using rule 85 (varcter -> COMA varcte varcter .)
    CORCHDER        reduce using rule 85 (varcter -> COMA varcte varcter .)
    LLAVEDER        reduce using rule 85 (varcter -> COMA varcte varcter .)
    ID              reduce using rule 85 (varcter -> COMA varcte varcter .)
    IF              reduce using rule 85 (varcter -> COMA varcte varcter .)
    WRITE           reduce using rule 85 (varcter -> COMA varcte varcter .)
    FOR             reduce using rule 85 (varcter -> COMA varcte varcter .)
    WHILE           reduce using rule 85 (varcter -> COMA varcte varcter .)
    WHEN            reduce using rule 85 (varcter -> COMA varcte varcter .)
    RETURN          reduce using rule 85 (varcter -> COMA varcte varcter .)
    CORCHIZQ        reduce using rule 85 (varcter -> COMA varcte varcter .)
    FLECHITA        reduce using rule 85 (varcter -> COMA varcte varcter .)


state 216

    (18) varcte -> ID CORCHIZQ varcte CORCHDER .

    COMA            reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    POR             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    LLAVEDER        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    ID              reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IF              reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    WRITE           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FOR             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    WHILE           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    WHEN            reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    RETURN          reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 217

    (20) varcte -> ID PARIZQ expresion2 PARDER .

    COMA            reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    POR             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    SOBRE           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAS             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOS           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYORQUE        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENORQUE        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    DIFERENTE       reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYOROIGUAL     reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOROIGUAL     reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    IGUALIGUAL      reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    PARDER          reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    CORCHDER        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    LLAVEDER        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    ID              reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    IF              reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    WRITE           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    FOR             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    WHILE           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    WHEN            reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    RETURN          reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    CORCHIZQ        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    FLECHITA        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)


state 218

    (8) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 229


state 219

    (91) for2 -> ID .

    PARDER          reduce using rule 91 (for2 -> ID .)


state 220

    (90) for -> FOR PARIZQ ID WS IN WS for2 . PARDER bloque

    PARDER          shift and go to state 230


state 221

    (92) for2 -> range .

    PARDER          reduce using rule 92 (for2 -> range .)


state 222

    (93) range -> INTNUM . PUNTOSRANGO INTNUM

    PUNTOSRANGO     shift and go to state 231


state 223

    (95) when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 95 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 95 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 95 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 95 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 95 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 95 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 95 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 95 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)


state 224

    (96) when2 -> varcte varcter . FLECHITA bloque when2

    FLECHITA        shift and go to state 232


state 225

    (97) when2 -> IN WS . range FLECHITA bloque when2
    (93) range -> . INTNUM PUNTOSRANGO INTNUM

    INTNUM          shift and go to state 222

    range                          shift and go to state 233

state 226

    (98) when2 -> ELSE FLECHITA . bloque when2
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 174

    bloque                         shift and go to state 234

state 227

    (36) varsr -> COMA ID varsr .

    ID              reduce using rule 36 (varsr -> COMA ID varsr .)
    IF              reduce using rule 36 (varsr -> COMA ID varsr .)
    WRITE           reduce using rule 36 (varsr -> COMA ID varsr .)
    FOR             reduce using rule 36 (varsr -> COMA ID varsr .)
    WHILE           reduce using rule 36 (varsr -> COMA ID varsr .)
    WHEN            reduce using rule 36 (varsr -> COMA ID varsr .)
    RETURN          reduce using rule 36 (varsr -> COMA ID varsr .)
    LLAVEDER        reduce using rule 36 (varsr -> COMA ID varsr .)


state 228

    (54) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 54 (asignacion2r -> COMA expresion asignacion2r .)


state 229

    (8) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    ID              reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IN              reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    BOOLVAL         reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRING          reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 230

    (90) for -> FOR PARIZQ ID WS IN WS for2 PARDER . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 174

    bloque                         shift and go to state 235

state 231

    (93) range -> INTNUM PUNTOSRANGO . INTNUM

    INTNUM          shift and go to state 236


state 232

    (96) when2 -> varcte varcter FLECHITA . bloque when2
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 174

    bloque                         shift and go to state 237

state 233

    (97) when2 -> IN WS range . FLECHITA bloque when2

    FLECHITA        shift and go to state 238


state 234

    (98) when2 -> ELSE FLECHITA bloque . when2
    (96) when2 -> . varcte varcter FLECHITA bloque when2
    (97) when2 -> . IN WS range FLECHITA bloque when2
    (98) when2 -> . ELSE FLECHITA bloque when2
    (99) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (117) empty -> .

    IN              shift and go to state 207
    ELSE            shift and go to state 208
    ID              shift and go to state 128
    INTNUM          shift and go to state 129
    FLOATNUM        shift and go to state 130
    BOOLVAL         shift and go to state 131
    STRING          shift and go to state 132
    LLAVEDER        reduce using rule 117 (empty -> .)

    when2                          shift and go to state 239
    varcte                         shift and go to state 206
    empty                          shift and go to state 209

state 235

    (90) for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque .

    ID              reduce using rule 90 (for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque .)
    IF              reduce using rule 90 (for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque .)
    WRITE           reduce using rule 90 (for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque .)
    FOR             reduce using rule 90 (for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque .)
    WHILE           reduce using rule 90 (for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque .)
    WHEN            reduce using rule 90 (for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque .)
    RETURN          reduce using rule 90 (for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque .)
    LLAVEDER        reduce using rule 90 (for -> FOR PARIZQ ID WS IN WS for2 PARDER bloque .)


state 236

    (93) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 93 (range -> INTNUM PUNTOSRANGO INTNUM .)
    FLECHITA        reduce using rule 93 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 237

    (96) when2 -> varcte varcter FLECHITA bloque . when2
    (96) when2 -> . varcte varcter FLECHITA bloque when2
    (97) when2 -> . IN WS range FLECHITA bloque when2
    (98) when2 -> . ELSE FLECHITA bloque when2
    (99) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (117) empty -> .

    IN              shift and go to state 207
    ELSE            shift and go to state 208
    ID              shift and go to state 128
    INTNUM          shift and go to state 129
    FLOATNUM        shift and go to state 130
    BOOLVAL         shift and go to state 131
    STRING          shift and go to state 132
    LLAVEDER        reduce using rule 117 (empty -> .)

    varcte                         shift and go to state 206
    when2                          shift and go to state 240
    empty                          shift and go to state 209

state 238

    (97) when2 -> IN WS range FLECHITA . bloque when2
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 174

    bloque                         shift and go to state 241

state 239

    (98) when2 -> ELSE FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 98 (when2 -> ELSE FLECHITA bloque when2 .)


state 240

    (96) when2 -> varcte varcter FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 96 (when2 -> varcte varcter FLECHITA bloque when2 .)


state 241

    (97) when2 -> IN WS range FLECHITA bloque . when2
    (96) when2 -> . varcte varcter FLECHITA bloque when2
    (97) when2 -> . IN WS range FLECHITA bloque when2
    (98) when2 -> . ELSE FLECHITA bloque when2
    (99) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (117) empty -> .

    IN              shift and go to state 207
    ELSE            shift and go to state 208
    ID              shift and go to state 128
    INTNUM          shift and go to state 129
    FLOATNUM        shift and go to state 130
    BOOLVAL         shift and go to state 131
    STRING          shift and go to state 132
    LLAVEDER        reduce using rule 117 (empty -> .)

    when2                          shift and go to state 242
    varcte                         shift and go to state 206
    empty                          shift and go to state 209

state 242

    (97) when2 -> IN WS range FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 97 (when2 -> IN WS range FLECHITA bloque when2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 28 resolved as shift
WARNING: shift/reduce conflict for IF in state 28 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 28 resolved as shift
WARNING: shift/reduce conflict for FOR in state 28 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 28 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 28 resolved as shift
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for IF in state 36 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 36 resolved as shift
WARNING: shift/reduce conflict for FOR in state 36 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 36 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 37 resolved as shift
WARNING: shift/reduce conflict for IF in state 37 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 37 resolved as shift
WARNING: shift/reduce conflict for FOR in state 37 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 37 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 37 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 39 resolved as shift
WARNING: shift/reduce conflict for FOR in state 39 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 39 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 41 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for IF in state 42 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 42 resolved as shift
WARNING: shift/reduce conflict for FOR in state 42 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 42 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 42 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 67 resolved as shift
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for STRING in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 71 resolved as shift
WARNING: shift/reduce conflict for ID in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 109 resolved as shift
WARNING: shift/reduce conflict for COMA in state 127 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 128 resolved as shift
WARNING: shift/reduce conflict for ID in state 140 resolved as shift
WARNING: shift/reduce conflict for STRING in state 140 resolved as shift
WARNING: shift/reduce conflict for ID in state 172 resolved as shift
WARNING: shift/reduce conflict for ID in state 174 resolved as shift
WARNING: shift/reduce conflict for IF in state 174 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 174 resolved as shift
WARNING: shift/reduce conflict for FOR in state 174 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 174 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 174 resolved as shift
WARNING: shift/reduce conflict for ID in state 182 resolved as shift
WARNING: shift/reduce conflict for ID in state 187 resolved as shift
WARNING: shift/reduce conflict for COMA in state 197 resolved as shift
WARNING: reduce/reduce conflict in state 35 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 35
WARNING: reduce/reduce conflict in state 35 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 35
WARNING: reduce/reduce conflict in state 54 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 54
WARNING: Rule (opc2 -> empty) is never reduced
