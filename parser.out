Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    RANGE

Grammar

Rule 0     S' -> file
Rule 1     file -> class classr
Rule 2     classr -> class classr
Rule 3     classr -> empty
Rule 4     class -> CLASS CID classparams class2 body
Rule 5     class -> DATA CLASS CID classparams
Rule 6     class2 -> DOSPUNTOS CID PARIZQ vars2 PARDER
Rule 7     class2 -> empty
Rule 8     classparams -> PARIZQ classparams2 PARDER
Rule 9     classparams -> empty
Rule 10    classparams2 -> vars3 tipo ID classparams3
Rule 11    classparams2 -> empty
Rule 12    classparams3 -> COMA vars3 tipo ID classparams3
Rule 13    classparams3 -> empty
Rule 14    varcte -> ID
Rule 15    varcte -> INTNUM
Rule 16    varcte -> FLOATNUM
Rule 17    varcte -> TRUE
Rule 18    varcte -> FALSE
Rule 19    varcte -> STRINGVAL
Rule 20    varcte -> NULL
Rule 21    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 22    varcte -> ID PUNTO ID varcte_param_fun
Rule 23    varcte -> ID PARIZQ llamada_param PARDER
Rule 24    varcte_param_fun -> PARIZQ llamada_param PARDER
Rule 25    varcte_param_fun -> empty
Rule 26    expresion -> megaexp
Rule 27    expresionr -> COMA expresion expresionr
Rule 28    expresionr -> empty
Rule 29    expresion2 -> expresion expresionr
Rule 30    expresion2 -> empty
Rule 31    superexp -> exp oplog
Rule 32    oplog -> MAYORQUE exp
Rule 33    oplog -> MENORQUE exp
Rule 34    oplog -> DIFERENTE exp
Rule 35    oplog -> MAYOROIGUAL exp
Rule 36    oplog -> MENOROIGUAL exp
Rule 37    oplog -> IGUALIGUAL exp
Rule 38    oplog -> empty
Rule 39    megaexp -> superexp megaexpr
Rule 40    megaexpr -> AND superexp megaexpr
Rule 41    megaexpr -> OR superexp megaexpr
Rule 42    megaexpr -> empty
Rule 43    vars -> vars3 tipo vars2 COLON
Rule 44    vars -> vars3 tipo LIST vars2 COLON
Rule 45    varsr -> COMA ID varsr
Rule 46    varsr -> empty
Rule 47    vars2 -> ID varsr
Rule 48    vars3 -> PRIVATE
Rule 49    vars3 -> empty
Rule 50    estatuto -> asignacion estatuto
Rule 51    estatuto -> condicion estatuto
Rule 52    estatuto -> escritura estatuto
Rule 53    estatuto -> for estatuto
Rule 54    estatuto -> while estatuto
Rule 55    estatuto -> when estatuto
Rule 56    estatuto -> llamada estatuto
Rule 57    estatuto -> obj_call estatuto
Rule 58    estatuto -> empty
Rule 59    asignacion -> ID asignacion3 IGUAL asignacion2 COLON
Rule 60    asignacion2 -> expresion
Rule 61    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 62    asignacion2 -> READ PARIZQ assign_read PARDER
Rule 63    asignacion2 -> CID PARIZQ class_call_args expresionr PARDER
Rule 64    class_call_args -> expresion
Rule 65    class_call_args -> empty
Rule 66    assign_read -> STRINGVAL
Rule 67    assign_read -> empty
Rule 68    asignacion2r -> COMA expresion asignacion2r
Rule 69    asignacion2r -> empty
Rule 70    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 71    asignacion3 -> PUNTO ID
Rule 72    asignacion3 -> empty
Rule 73    condicion -> IF condicion2 estatutor
Rule 74    condicion2 -> PARIZQ expresion PARDER bloque
Rule 75    condicionr -> ELSE IF condicion2
Rule 76    condicionr -> empty
Rule 77    bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 78    bloque2 -> RETURN bloque3
Rule 79    bloque2 -> empty
Rule 80    bloque3 -> expresion COLON
Rule 81    bloque3 -> empty
Rule 82    estatutor -> ELSE bloque
Rule 83    estatutor -> empty
Rule 84    escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON
Rule 85    esc1 -> expresion
Rule 86    esc1 -> STRING
Rule 87    esc2 -> COMA esc1 esc2
Rule 88    esc2 -> empty
Rule 89    tipo -> INT
Rule 90    tipo -> FLOAT
Rule 91    tipo -> BOOL
Rule 92    tipo -> STRING
Rule 93    tipo -> CID
Rule 94    factor -> PARIZQ expresion PARDER
Rule 95    factor -> factor2 varcte
Rule 96    terminor -> POR factor terminor
Rule 97    terminor -> SOBRE factor terminor
Rule 98    terminor -> empty
Rule 99    termino -> factor terminor
Rule 100   exp -> termino expr
Rule 101   expr -> MAS termino expr
Rule 102   expr -> MENOS termino expr
Rule 103   expr -> empty
Rule 104   varcter -> COMA varcte varcter
Rule 105   varcter -> empty
Rule 106   factor2 -> MAS
Rule 107   factor2 -> MENOS
Rule 108   factor2 -> empty
Rule 109   for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 110   for2 -> ID
Rule 111   for2 -> range
Rule 112   range -> INTNUM PUNTOSRANGO INTNUM
Rule 113   range -> ID PUNTOSRANGO ID
Rule 114   range -> ID PUNTOSRANGO INTNUM
Rule 115   range -> INTNUM PUNTOSRANGO ID
Rule 116   while -> WHILE PARIZQ expresion PARDER bloque
Rule 117   when -> WHEN LLAVEIZQ when2 LLAVEDER
Rule 118   when2 -> expresion FLECHITA bloque when2
Rule 119   when2 -> ELSE FLECHITA bloque
Rule 120   when2 -> empty
Rule 121   fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 122   fun2 -> tipo ID funparamr
Rule 123   fun2 -> empty
Rule 124   funparamr -> COMA tipo ID funparamr
Rule 125   funparamr -> empty
Rule 126   fun3 -> DOSPUNTOS tipo
Rule 127   fun3 -> empty
Rule 128   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 129   opc1 -> vars multvarsdecl
Rule 130   opc1 -> empty
Rule 131   opc2 -> estatuto
Rule 132   opc2 -> empty
Rule 133   body -> LLAVEIZQ body2 funr body_main LLAVEDER
Rule 134   body -> empty
Rule 135   body_main -> MAIN PARIZQ PARDER mainbloque
Rule 136   body_main -> empty
Rule 137   body2 -> vars multvarsdecl
Rule 138   body2 -> empty
Rule 139   mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER
Rule 140   multvarsdecl -> vars multvarsdecl
Rule 141   multvarsdecl -> empty
Rule 142   funr -> fun funr
Rule 143   funr -> empty
Rule 144   llamada -> ID PARIZQ llamada_param PARDER COLON
Rule 145   llamada -> empty
Rule 146   obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON
Rule 147   obj_call -> empty
Rule 148   llamada_param -> expresion expresionr
Rule 149   llamada_param -> empty
Rule 150   empty -> <empty>

Terminals, with rules where they appear

AND                  : 40
BOOL                 : 91
CID                  : 4 5 6 63 93
CLASS                : 4 5
COLON                : 43 44 59 80 84 144 146
COMA                 : 12 27 45 68 87 104 124
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 21 61 70
CORCHIZQ             : 21 61 70
DATA                 : 5
DIFERENTE            : 34
DOSPUNTOS            : 6 126
ELSE                 : 75 82 119
EOL                  : 
FALSE                : 18
FLECHITA             : 118 119
FLOAT                : 90
FLOATNUM             : 16
FOR                  : 109
FUN                  : 121
GLOBAL               : 
ID                   : 10 12 14 21 22 22 23 45 47 59 71 109 110 113 113 114 115 121 122 124 144 146 146
IF                   : 73 75
IGUAL                : 59
IGUALIGUAL           : 37
IN                   : 109
INT                  : 89
INTNUM               : 15 112 112 114 115
LIST                 : 44
LLAVEDER             : 77 117 128 133 139
LLAVEIZQ             : 77 117 128 133 139
MAIN                 : 135
MAS                  : 101 106
MAYOROIGUAL          : 35
MAYORQUE             : 32
MENOROIGUAL          : 36
MENORQUE             : 33
MENOS                : 102 107
NULL                 : 20
OR                   : 41
PARDER               : 6 8 23 24 62 63 74 84 94 109 116 121 135 144 146
PARIZQ               : 6 8 23 24 62 63 74 84 94 109 116 121 135 144 146
POR                  : 96
PRIVATE              : 48
PUNTO                : 22 71 146
PUNTOSRANGO          : 112 113 114 115
RANGE                : 
READ                 : 62
RETURN               : 78
SOBRE                : 97
STRING               : 86 92
STRINGVAL            : 19 66
TRUE                 : 17
WHEN                 : 117
WHILE                : 116
WRITE                : 84
error                : 

Nonterminals, with rules where they appear

asignacion           : 50
asignacion2          : 59
asignacion2r         : 61 68
asignacion3          : 59
assign_read          : 62
bloque               : 74 82 109 116 118 119
bloque2              : 77 128
bloque3              : 78
body                 : 4
body2                : 133 139
body_main            : 133
class                : 1 2
class2               : 4
class_call_args      : 63
classparams          : 4 5
classparams2         : 8
classparams3         : 10 12
classr               : 1 2
condicion            : 51
condicion2           : 73 75
condicionr           : 
empty                : 3 7 9 11 13 25 28 30 38 42 46 49 58 65 67 69 72 76 79 81 83 88 98 103 105 108 120 123 125 127 130 132 134 136 138 141 143 145 147 149
esc1                 : 84 87
esc2                 : 84 87
escritura            : 52
estatuto             : 50 51 52 53 54 55 56 57 77 131 139
estatutor            : 73
exp                  : 31 32 33 34 35 36 37
expr                 : 100 101 102
expresion            : 27 29 60 61 64 68 70 74 80 85 94 116 118 148
expresion2           : 
expresionr           : 27 29 63 148
factor               : 96 97 99
factor2              : 95
file                 : 0
for                  : 53
for2                 : 109
fun                  : 142
fun2                 : 121
fun3                 : 121
funbody              : 121
funparamr            : 122 124
funr                 : 133 142
llamada              : 56
llamada_param        : 23 24 144 146
mainbloque           : 135
megaexp              : 26
megaexpr             : 39 40 41
multvarsdecl         : 129 137 140
obj_call             : 57
opc1                 : 128
opc2                 : 128
oplog                : 31
range                : 111
superexp             : 39 40 41
termino              : 100 101 102
terminor             : 96 97 99
tipo                 : 10 12 43 44 122 124 126
varcte               : 21 95 104
varcte_param_fun     : 22
varcter              : 104
vars                 : 129 137 140
vars2                : 6 43 44
vars3                : 10 12 43 44 121
varsr                : 45 47
when                 : 55
when2                : 117 118
while                : 54

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . class classr
    (4) class -> . CLASS CID classparams class2 body
    (5) class -> . DATA CLASS CID classparams

    CLASS           shift and go to state 3
    DATA            shift and go to state 4

    file                           shift and go to state 1
    class                          shift and go to state 2

state 1

    (0) S' -> file .



state 2

    (1) file -> class . classr
    (2) classr -> . class classr
    (3) classr -> . empty
    (4) class -> . CLASS CID classparams class2 body
    (5) class -> . DATA CLASS CID classparams
    (150) empty -> .

    CLASS           shift and go to state 3
    DATA            shift and go to state 4
    $end            reduce using rule 150 (empty -> .)

    class                          shift and go to state 5
    classr                         shift and go to state 6
    empty                          shift and go to state 7

state 3

    (4) class -> CLASS . CID classparams class2 body

    CID             shift and go to state 8


state 4

    (5) class -> DATA . CLASS CID classparams

    CLASS           shift and go to state 9


state 5

    (2) classr -> class . classr
    (2) classr -> . class classr
    (3) classr -> . empty
    (4) class -> . CLASS CID classparams class2 body
    (5) class -> . DATA CLASS CID classparams
    (150) empty -> .

    CLASS           shift and go to state 3
    DATA            shift and go to state 4
    $end            reduce using rule 150 (empty -> .)

    class                          shift and go to state 5
    classr                         shift and go to state 10
    empty                          shift and go to state 7

state 6

    (1) file -> class classr .

    $end            reduce using rule 1 (file -> class classr .)


state 7

    (3) classr -> empty .

    $end            reduce using rule 3 (classr -> empty .)


state 8

    (4) class -> CLASS CID . classparams class2 body
    (8) classparams -> . PARIZQ classparams2 PARDER
    (9) classparams -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 12
    DOSPUNTOS       reduce using rule 150 (empty -> .)
    LLAVEIZQ        reduce using rule 150 (empty -> .)
    CLASS           reduce using rule 150 (empty -> .)
    DATA            reduce using rule 150 (empty -> .)
    $end            reduce using rule 150 (empty -> .)

    classparams                    shift and go to state 11
    empty                          shift and go to state 13

state 9

    (5) class -> DATA CLASS . CID classparams

    CID             shift and go to state 14


state 10

    (2) classr -> class classr .

    $end            reduce using rule 2 (classr -> class classr .)


state 11

    (4) class -> CLASS CID classparams . class2 body
    (6) class2 -> . DOSPUNTOS CID PARIZQ vars2 PARDER
    (7) class2 -> . empty
    (150) empty -> .

    DOSPUNTOS       shift and go to state 16
    LLAVEIZQ        reduce using rule 150 (empty -> .)
    CLASS           reduce using rule 150 (empty -> .)
    DATA            reduce using rule 150 (empty -> .)
    $end            reduce using rule 150 (empty -> .)

    class2                         shift and go to state 15
    empty                          shift and go to state 17

state 12

    (8) classparams -> PARIZQ . classparams2 PARDER
    (10) classparams2 -> . vars3 tipo ID classparams3
    (11) classparams2 -> . empty
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty
    (150) empty -> .

    PRIVATE         shift and go to state 21
    PARDER          reduce using rule 150 (empty -> .)
    INT             reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 150 (empty -> .)
    BOOL            reduce using rule 150 (empty -> .)
    STRING          reduce using rule 150 (empty -> .)
    CID             reduce using rule 150 (empty -> .)

    classparams2                   shift and go to state 18
    vars3                          shift and go to state 19
    empty                          shift and go to state 20

state 13

    (9) classparams -> empty .

    DOSPUNTOS       reduce using rule 9 (classparams -> empty .)
    LLAVEIZQ        reduce using rule 9 (classparams -> empty .)
    CLASS           reduce using rule 9 (classparams -> empty .)
    DATA            reduce using rule 9 (classparams -> empty .)
    $end            reduce using rule 9 (classparams -> empty .)


state 14

    (5) class -> DATA CLASS CID . classparams
    (8) classparams -> . PARIZQ classparams2 PARDER
    (9) classparams -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 12
    CLASS           reduce using rule 150 (empty -> .)
    DATA            reduce using rule 150 (empty -> .)
    $end            reduce using rule 150 (empty -> .)

    classparams                    shift and go to state 22
    empty                          shift and go to state 13

state 15

    (4) class -> CLASS CID classparams class2 . body
    (133) body -> . LLAVEIZQ body2 funr body_main LLAVEDER
    (134) body -> . empty
    (150) empty -> .

    LLAVEIZQ        shift and go to state 24
    CLASS           reduce using rule 150 (empty -> .)
    DATA            reduce using rule 150 (empty -> .)
    $end            reduce using rule 150 (empty -> .)

    body                           shift and go to state 23
    empty                          shift and go to state 25

state 16

    (6) class2 -> DOSPUNTOS . CID PARIZQ vars2 PARDER

    CID             shift and go to state 26


state 17

    (7) class2 -> empty .

    LLAVEIZQ        reduce using rule 7 (class2 -> empty .)
    CLASS           reduce using rule 7 (class2 -> empty .)
    DATA            reduce using rule 7 (class2 -> empty .)
    $end            reduce using rule 7 (class2 -> empty .)


state 18

    (8) classparams -> PARIZQ classparams2 . PARDER

    PARDER          shift and go to state 27


state 19

    (10) classparams2 -> vars3 . tipo ID classparams3
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . BOOL
    (92) tipo -> . STRING
    (93) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 28

state 20

    (11) classparams2 -> empty .
    (49) vars3 -> empty .

    PARDER          reduce using rule 11 (classparams2 -> empty .)
    INT             reduce using rule 49 (vars3 -> empty .)
    FLOAT           reduce using rule 49 (vars3 -> empty .)
    BOOL            reduce using rule 49 (vars3 -> empty .)
    STRING          reduce using rule 49 (vars3 -> empty .)
    CID             reduce using rule 49 (vars3 -> empty .)


state 21

    (48) vars3 -> PRIVATE .

    INT             reduce using rule 48 (vars3 -> PRIVATE .)
    FLOAT           reduce using rule 48 (vars3 -> PRIVATE .)
    BOOL            reduce using rule 48 (vars3 -> PRIVATE .)
    STRING          reduce using rule 48 (vars3 -> PRIVATE .)
    CID             reduce using rule 48 (vars3 -> PRIVATE .)
    FUN             reduce using rule 48 (vars3 -> PRIVATE .)


state 22

    (5) class -> DATA CLASS CID classparams .

    CLASS           reduce using rule 5 (class -> DATA CLASS CID classparams .)
    DATA            reduce using rule 5 (class -> DATA CLASS CID classparams .)
    $end            reduce using rule 5 (class -> DATA CLASS CID classparams .)


state 23

    (4) class -> CLASS CID classparams class2 body .

    CLASS           reduce using rule 4 (class -> CLASS CID classparams class2 body .)
    DATA            reduce using rule 4 (class -> CLASS CID classparams class2 body .)
    $end            reduce using rule 4 (class -> CLASS CID classparams class2 body .)


state 24

    (133) body -> LLAVEIZQ . body2 funr body_main LLAVEDER
    (137) body2 -> . vars multvarsdecl
    (138) body2 -> . empty
    (43) vars -> . vars3 tipo vars2 COLON
    (44) vars -> . vars3 tipo LIST vars2 COLON
    (150) empty -> .
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    FUN             reduce using rule 150 (empty -> .)
    INT             reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 150 (empty -> .)
    BOOL            reduce using rule 150 (empty -> .)
    STRING          reduce using rule 150 (empty -> .)
    CID             reduce using rule 150 (empty -> .)
    PRIVATE         shift and go to state 21

  ! PRIVATE         [ reduce using rule 150 (empty -> .) ]

    body2                          shift and go to state 34
    vars                           shift and go to state 35
    empty                          shift and go to state 36
    vars3                          shift and go to state 37

state 25

    (134) body -> empty .

    CLASS           reduce using rule 134 (body -> empty .)
    DATA            reduce using rule 134 (body -> empty .)
    $end            reduce using rule 134 (body -> empty .)


state 26

    (6) class2 -> DOSPUNTOS CID . PARIZQ vars2 PARDER

    PARIZQ          shift and go to state 38


state 27

    (8) classparams -> PARIZQ classparams2 PARDER .

    DOSPUNTOS       reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    LLAVEIZQ        reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    CLASS           reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    DATA            reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    $end            reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)


state 28

    (10) classparams2 -> vars3 tipo . ID classparams3

    ID              shift and go to state 39


state 29

    (89) tipo -> INT .

    ID              reduce using rule 89 (tipo -> INT .)
    LIST            reduce using rule 89 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 89 (tipo -> INT .)


state 30

    (90) tipo -> FLOAT .

    ID              reduce using rule 90 (tipo -> FLOAT .)
    LIST            reduce using rule 90 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 90 (tipo -> FLOAT .)


state 31

    (91) tipo -> BOOL .

    ID              reduce using rule 91 (tipo -> BOOL .)
    LIST            reduce using rule 91 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 91 (tipo -> BOOL .)


state 32

    (92) tipo -> STRING .

    ID              reduce using rule 92 (tipo -> STRING .)
    LIST            reduce using rule 92 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 92 (tipo -> STRING .)


state 33

    (93) tipo -> CID .

    ID              reduce using rule 93 (tipo -> CID .)
    LIST            reduce using rule 93 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 93 (tipo -> CID .)


state 34

    (133) body -> LLAVEIZQ body2 . funr body_main LLAVEDER
    (142) funr -> . fun funr
    (143) funr -> . empty
    (121) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (150) empty -> .
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty

    MAIN            reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    FUN             reduce using rule 150 (empty -> .)
    PRIVATE         shift and go to state 21

    funr                           shift and go to state 40
    fun                            shift and go to state 41
    empty                          shift and go to state 42
    vars3                          shift and go to state 43

state 35

    (137) body2 -> vars . multvarsdecl
    (140) multvarsdecl -> . vars multvarsdecl
    (141) multvarsdecl -> . empty
    (43) vars -> . vars3 tipo vars2 COLON
    (44) vars -> . vars3 tipo LIST vars2 COLON
    (150) empty -> .
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    FUN             reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    WRITE           reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    WHEN            reduce using rule 150 (empty -> .)
    INT             reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 150 (empty -> .)
    BOOL            reduce using rule 150 (empty -> .)
    STRING          reduce using rule 150 (empty -> .)
    CID             reduce using rule 150 (empty -> .)
    PRIVATE         shift and go to state 21

  ! PRIVATE         [ reduce using rule 150 (empty -> .) ]

    vars                           shift and go to state 44
    multvarsdecl                   shift and go to state 45
    empty                          shift and go to state 46
    vars3                          shift and go to state 37

state 36

    (138) body2 -> empty .
    (49) vars3 -> empty .

    PRIVATE         reduce using rule 138 (body2 -> empty .)
    MAIN            reduce using rule 138 (body2 -> empty .)
    LLAVEDER        reduce using rule 138 (body2 -> empty .)
    FUN             reduce using rule 138 (body2 -> empty .)
    ID              reduce using rule 138 (body2 -> empty .)
    IF              reduce using rule 138 (body2 -> empty .)
    WRITE           reduce using rule 138 (body2 -> empty .)
    FOR             reduce using rule 138 (body2 -> empty .)
    WHILE           reduce using rule 138 (body2 -> empty .)
    WHEN            reduce using rule 138 (body2 -> empty .)
    INT             reduce using rule 49 (vars3 -> empty .)
    FLOAT           reduce using rule 49 (vars3 -> empty .)
    BOOL            reduce using rule 49 (vars3 -> empty .)
    STRING          reduce using rule 49 (vars3 -> empty .)
    CID             reduce using rule 49 (vars3 -> empty .)


state 37

    (43) vars -> vars3 . tipo vars2 COLON
    (44) vars -> vars3 . tipo LIST vars2 COLON
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . BOOL
    (92) tipo -> . STRING
    (93) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 47

state 38

    (6) class2 -> DOSPUNTOS CID PARIZQ . vars2 PARDER
    (47) vars2 -> . ID varsr

    ID              shift and go to state 49

    vars2                          shift and go to state 48

state 39

    (10) classparams2 -> vars3 tipo ID . classparams3
    (12) classparams3 -> . COMA vars3 tipo ID classparams3
    (13) classparams3 -> . empty
    (150) empty -> .

    COMA            shift and go to state 51
    PARDER          reduce using rule 150 (empty -> .)

    classparams3                   shift and go to state 50
    empty                          shift and go to state 52

state 40

    (133) body -> LLAVEIZQ body2 funr . body_main LLAVEDER
    (135) body_main -> . MAIN PARIZQ PARDER mainbloque
    (136) body_main -> . empty
    (150) empty -> .

    MAIN            shift and go to state 54
    LLAVEDER        reduce using rule 150 (empty -> .)

    body_main                      shift and go to state 53
    empty                          shift and go to state 55

state 41

    (142) funr -> fun . funr
    (142) funr -> . fun funr
    (143) funr -> . empty
    (121) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (150) empty -> .
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty

    MAIN            reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    FUN             reduce using rule 150 (empty -> .)
    PRIVATE         shift and go to state 21

    fun                            shift and go to state 41
    funr                           shift and go to state 56
    empty                          shift and go to state 42
    vars3                          shift and go to state 43

state 42

    (143) funr -> empty .
    (49) vars3 -> empty .

    MAIN            reduce using rule 143 (funr -> empty .)
    LLAVEDER        reduce using rule 143 (funr -> empty .)
    FUN             reduce using rule 49 (vars3 -> empty .)


state 43

    (121) fun -> vars3 . FUN ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 57


state 44

    (140) multvarsdecl -> vars . multvarsdecl
    (140) multvarsdecl -> . vars multvarsdecl
    (141) multvarsdecl -> . empty
    (43) vars -> . vars3 tipo vars2 COLON
    (44) vars -> . vars3 tipo LIST vars2 COLON
    (150) empty -> .
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    FUN             reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    WRITE           reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    WHEN            reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)
    INT             reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 150 (empty -> .)
    BOOL            reduce using rule 150 (empty -> .)
    STRING          reduce using rule 150 (empty -> .)
    CID             reduce using rule 150 (empty -> .)
    PRIVATE         shift and go to state 21

  ! PRIVATE         [ reduce using rule 150 (empty -> .) ]

    vars                           shift and go to state 44
    multvarsdecl                   shift and go to state 58
    empty                          shift and go to state 46
    vars3                          shift and go to state 37

state 45

    (137) body2 -> vars multvarsdecl .

    PRIVATE         reduce using rule 137 (body2 -> vars multvarsdecl .)
    MAIN            reduce using rule 137 (body2 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 137 (body2 -> vars multvarsdecl .)
    FUN             reduce using rule 137 (body2 -> vars multvarsdecl .)
    ID              reduce using rule 137 (body2 -> vars multvarsdecl .)
    IF              reduce using rule 137 (body2 -> vars multvarsdecl .)
    WRITE           reduce using rule 137 (body2 -> vars multvarsdecl .)
    FOR             reduce using rule 137 (body2 -> vars multvarsdecl .)
    WHILE           reduce using rule 137 (body2 -> vars multvarsdecl .)
    WHEN            reduce using rule 137 (body2 -> vars multvarsdecl .)


state 46

    (141) multvarsdecl -> empty .
    (49) vars3 -> empty .

    PRIVATE         reduce using rule 141 (multvarsdecl -> empty .)
    MAIN            reduce using rule 141 (multvarsdecl -> empty .)
    LLAVEDER        reduce using rule 141 (multvarsdecl -> empty .)
    FUN             reduce using rule 141 (multvarsdecl -> empty .)
    ID              reduce using rule 141 (multvarsdecl -> empty .)
    IF              reduce using rule 141 (multvarsdecl -> empty .)
    WRITE           reduce using rule 141 (multvarsdecl -> empty .)
    FOR             reduce using rule 141 (multvarsdecl -> empty .)
    WHILE           reduce using rule 141 (multvarsdecl -> empty .)
    WHEN            reduce using rule 141 (multvarsdecl -> empty .)
    RETURN          reduce using rule 141 (multvarsdecl -> empty .)
    INT             reduce using rule 49 (vars3 -> empty .)
    FLOAT           reduce using rule 49 (vars3 -> empty .)
    BOOL            reduce using rule 49 (vars3 -> empty .)
    STRING          reduce using rule 49 (vars3 -> empty .)
    CID             reduce using rule 49 (vars3 -> empty .)


state 47

    (43) vars -> vars3 tipo . vars2 COLON
    (44) vars -> vars3 tipo . LIST vars2 COLON
    (47) vars2 -> . ID varsr

    LIST            shift and go to state 60
    ID              shift and go to state 49

    vars2                          shift and go to state 59

state 48

    (6) class2 -> DOSPUNTOS CID PARIZQ vars2 . PARDER

    PARDER          shift and go to state 61


state 49

    (47) vars2 -> ID . varsr
    (45) varsr -> . COMA ID varsr
    (46) varsr -> . empty
    (150) empty -> .

    COMA            shift and go to state 63
    PARDER          reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)

    varsr                          shift and go to state 62
    empty                          shift and go to state 64

state 50

    (10) classparams2 -> vars3 tipo ID classparams3 .

    PARDER          reduce using rule 10 (classparams2 -> vars3 tipo ID classparams3 .)


state 51

    (12) classparams3 -> COMA . vars3 tipo ID classparams3
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty
    (150) empty -> .

    PRIVATE         shift and go to state 21
    INT             reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 150 (empty -> .)
    BOOL            reduce using rule 150 (empty -> .)
    STRING          reduce using rule 150 (empty -> .)
    CID             reduce using rule 150 (empty -> .)

    vars3                          shift and go to state 65
    empty                          shift and go to state 66

state 52

    (13) classparams3 -> empty .

    PARDER          reduce using rule 13 (classparams3 -> empty .)


state 53

    (133) body -> LLAVEIZQ body2 funr body_main . LLAVEDER

    LLAVEDER        shift and go to state 67


state 54

    (135) body_main -> MAIN . PARIZQ PARDER mainbloque

    PARIZQ          shift and go to state 68


state 55

    (136) body_main -> empty .

    LLAVEDER        reduce using rule 136 (body_main -> empty .)


state 56

    (142) funr -> fun funr .

    MAIN            reduce using rule 142 (funr -> fun funr .)
    LLAVEDER        reduce using rule 142 (funr -> fun funr .)


state 57

    (121) fun -> vars3 FUN . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 69


state 58

    (140) multvarsdecl -> vars multvarsdecl .

    PRIVATE         reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    MAIN            reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    FUN             reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    ID              reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    IF              reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    WRITE           reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    FOR             reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    WHILE           reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    WHEN            reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)
    RETURN          reduce using rule 140 (multvarsdecl -> vars multvarsdecl .)


state 59

    (43) vars -> vars3 tipo vars2 . COLON

    COLON           shift and go to state 70


state 60

    (44) vars -> vars3 tipo LIST . vars2 COLON
    (47) vars2 -> . ID varsr

    ID              shift and go to state 49

    vars2                          shift and go to state 71

state 61

    (6) class2 -> DOSPUNTOS CID PARIZQ vars2 PARDER .

    LLAVEIZQ        reduce using rule 6 (class2 -> DOSPUNTOS CID PARIZQ vars2 PARDER .)
    CLASS           reduce using rule 6 (class2 -> DOSPUNTOS CID PARIZQ vars2 PARDER .)
    DATA            reduce using rule 6 (class2 -> DOSPUNTOS CID PARIZQ vars2 PARDER .)
    $end            reduce using rule 6 (class2 -> DOSPUNTOS CID PARIZQ vars2 PARDER .)


state 62

    (47) vars2 -> ID varsr .

    PARDER          reduce using rule 47 (vars2 -> ID varsr .)
    COLON           reduce using rule 47 (vars2 -> ID varsr .)


state 63

    (45) varsr -> COMA . ID varsr

    ID              shift and go to state 72


state 64

    (46) varsr -> empty .

    PARDER          reduce using rule 46 (varsr -> empty .)
    COLON           reduce using rule 46 (varsr -> empty .)


state 65

    (12) classparams3 -> COMA vars3 . tipo ID classparams3
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . BOOL
    (92) tipo -> . STRING
    (93) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 73

state 66

    (49) vars3 -> empty .

    INT             reduce using rule 49 (vars3 -> empty .)
    FLOAT           reduce using rule 49 (vars3 -> empty .)
    BOOL            reduce using rule 49 (vars3 -> empty .)
    STRING          reduce using rule 49 (vars3 -> empty .)
    CID             reduce using rule 49 (vars3 -> empty .)


state 67

    (133) body -> LLAVEIZQ body2 funr body_main LLAVEDER .

    CLASS           reduce using rule 133 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)
    DATA            reduce using rule 133 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)
    $end            reduce using rule 133 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)


state 68

    (135) body_main -> MAIN PARIZQ . PARDER mainbloque

    PARDER          shift and go to state 74


state 69

    (121) fun -> vars3 FUN ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 75


state 70

    (43) vars -> vars3 tipo vars2 COLON .

    PRIVATE         reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    INT             reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    FLOAT           reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    BOOL            reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    STRING          reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    CID             reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    MAIN            reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    LLAVEDER        reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    FUN             reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    ID              reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    IF              reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    WRITE           reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    FOR             reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    WHILE           reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    WHEN            reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)
    RETURN          reduce using rule 43 (vars -> vars3 tipo vars2 COLON .)


state 71

    (44) vars -> vars3 tipo LIST vars2 . COLON

    COLON           shift and go to state 76


state 72

    (45) varsr -> COMA ID . varsr
    (45) varsr -> . COMA ID varsr
    (46) varsr -> . empty
    (150) empty -> .

    COMA            shift and go to state 63
    PARDER          reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)

    varsr                          shift and go to state 77
    empty                          shift and go to state 64

state 73

    (12) classparams3 -> COMA vars3 tipo . ID classparams3

    ID              shift and go to state 78


state 74

    (135) body_main -> MAIN PARIZQ PARDER . mainbloque
    (139) mainbloque -> . LLAVEIZQ body2 estatuto LLAVEDER

    LLAVEIZQ        shift and go to state 80

    mainbloque                     shift and go to state 79

state 75

    (121) fun -> vars3 FUN ID PARIZQ . fun2 PARDER fun3 funbody
    (122) fun2 -> . tipo ID funparamr
    (123) fun2 -> . empty
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . BOOL
    (92) tipo -> . STRING
    (93) tipo -> . CID
    (150) empty -> .

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33
    PARDER          reduce using rule 150 (empty -> .)

    fun2                           shift and go to state 81
    tipo                           shift and go to state 82
    empty                          shift and go to state 83

state 76

    (44) vars -> vars3 tipo LIST vars2 COLON .

    PRIVATE         reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    INT             reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    FLOAT           reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    BOOL            reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    STRING          reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    CID             reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    MAIN            reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    LLAVEDER        reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    FUN             reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    ID              reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    IF              reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    WRITE           reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    FOR             reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    WHILE           reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    WHEN            reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)
    RETURN          reduce using rule 44 (vars -> vars3 tipo LIST vars2 COLON .)


state 77

    (45) varsr -> COMA ID varsr .

    PARDER          reduce using rule 45 (varsr -> COMA ID varsr .)
    COLON           reduce using rule 45 (varsr -> COMA ID varsr .)


state 78

    (12) classparams3 -> COMA vars3 tipo ID . classparams3
    (12) classparams3 -> . COMA vars3 tipo ID classparams3
    (13) classparams3 -> . empty
    (150) empty -> .

    COMA            shift and go to state 51
    PARDER          reduce using rule 150 (empty -> .)

    classparams3                   shift and go to state 84
    empty                          shift and go to state 52

state 79

    (135) body_main -> MAIN PARIZQ PARDER mainbloque .

    LLAVEDER        reduce using rule 135 (body_main -> MAIN PARIZQ PARDER mainbloque .)


state 80

    (139) mainbloque -> LLAVEIZQ . body2 estatuto LLAVEDER
    (137) body2 -> . vars multvarsdecl
    (138) body2 -> . empty
    (43) vars -> . vars3 tipo vars2 COLON
    (44) vars -> . vars3 tipo LIST vars2 COLON
    (150) empty -> .
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty

    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    WRITE           reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    WHEN            reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    INT             reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 150 (empty -> .)
    BOOL            reduce using rule 150 (empty -> .)
    STRING          reduce using rule 150 (empty -> .)
    CID             reduce using rule 150 (empty -> .)
    PRIVATE         shift and go to state 21

    body2                          shift and go to state 85
    vars                           shift and go to state 35
    empty                          shift and go to state 36
    vars3                          shift and go to state 37

state 81

    (121) fun -> vars3 FUN ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 86


state 82

    (122) fun2 -> tipo . ID funparamr

    ID              shift and go to state 87


state 83

    (123) fun2 -> empty .

    PARDER          reduce using rule 123 (fun2 -> empty .)


state 84

    (12) classparams3 -> COMA vars3 tipo ID classparams3 .

    PARDER          reduce using rule 12 (classparams3 -> COMA vars3 tipo ID classparams3 .)


state 85

    (139) mainbloque -> LLAVEIZQ body2 . estatuto LLAVEDER
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    LLAVEDER        reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    estatuto                       shift and go to state 88
    asignacion                     shift and go to state 89
    condicion                      shift and go to state 90
    escritura                      shift and go to state 91
    for                            shift and go to state 92
    while                          shift and go to state 93
    when                           shift and go to state 94
    llamada                        shift and go to state 95
    obj_call                       shift and go to state 96
    empty                          shift and go to state 97

state 86

    (121) fun -> vars3 FUN ID PARIZQ fun2 PARDER . fun3 funbody
    (126) fun3 -> . DOSPUNTOS tipo
    (127) fun3 -> . empty
    (150) empty -> .

    DOSPUNTOS       shift and go to state 105
    LLAVEIZQ        reduce using rule 150 (empty -> .)

    fun3                           shift and go to state 104
    empty                          shift and go to state 106

state 87

    (122) fun2 -> tipo ID . funparamr
    (124) funparamr -> . COMA tipo ID funparamr
    (125) funparamr -> . empty
    (150) empty -> .

    COMA            shift and go to state 108
    PARDER          reduce using rule 150 (empty -> .)

    funparamr                      shift and go to state 107
    empty                          shift and go to state 109

state 88

    (139) mainbloque -> LLAVEIZQ body2 estatuto . LLAVEDER

    LLAVEDER        shift and go to state 110


state 89

    (50) estatuto -> asignacion . estatuto
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    LLAVEDER        reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    asignacion                     shift and go to state 89
    estatuto                       shift and go to state 111
    condicion                      shift and go to state 90
    escritura                      shift and go to state 91
    for                            shift and go to state 92
    while                          shift and go to state 93
    when                           shift and go to state 94
    llamada                        shift and go to state 95
    obj_call                       shift and go to state 96
    empty                          shift and go to state 97

state 90

    (51) estatuto -> condicion . estatuto
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    LLAVEDER        reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    condicion                      shift and go to state 90
    estatuto                       shift and go to state 112
    asignacion                     shift and go to state 89
    escritura                      shift and go to state 91
    for                            shift and go to state 92
    while                          shift and go to state 93
    when                           shift and go to state 94
    llamada                        shift and go to state 95
    obj_call                       shift and go to state 96
    empty                          shift and go to state 97

state 91

    (52) estatuto -> escritura . estatuto
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    LLAVEDER        reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    escritura                      shift and go to state 91
    estatuto                       shift and go to state 113
    asignacion                     shift and go to state 89
    condicion                      shift and go to state 90
    for                            shift and go to state 92
    while                          shift and go to state 93
    when                           shift and go to state 94
    llamada                        shift and go to state 95
    obj_call                       shift and go to state 96
    empty                          shift and go to state 97

state 92

    (53) estatuto -> for . estatuto
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    LLAVEDER        reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    for                            shift and go to state 92
    estatuto                       shift and go to state 114
    asignacion                     shift and go to state 89
    condicion                      shift and go to state 90
    escritura                      shift and go to state 91
    while                          shift and go to state 93
    when                           shift and go to state 94
    llamada                        shift and go to state 95
    obj_call                       shift and go to state 96
    empty                          shift and go to state 97

state 93

    (54) estatuto -> while . estatuto
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    LLAVEDER        reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    while                          shift and go to state 93
    estatuto                       shift and go to state 115
    asignacion                     shift and go to state 89
    condicion                      shift and go to state 90
    escritura                      shift and go to state 91
    for                            shift and go to state 92
    when                           shift and go to state 94
    llamada                        shift and go to state 95
    obj_call                       shift and go to state 96
    empty                          shift and go to state 97

state 94

    (55) estatuto -> when . estatuto
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    LLAVEDER        reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    when                           shift and go to state 94
    estatuto                       shift and go to state 116
    asignacion                     shift and go to state 89
    condicion                      shift and go to state 90
    escritura                      shift and go to state 91
    for                            shift and go to state 92
    while                          shift and go to state 93
    llamada                        shift and go to state 95
    obj_call                       shift and go to state 96
    empty                          shift and go to state 97

state 95

    (56) estatuto -> llamada . estatuto
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    LLAVEDER        reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    llamada                        shift and go to state 95
    estatuto                       shift and go to state 117
    asignacion                     shift and go to state 89
    condicion                      shift and go to state 90
    escritura                      shift and go to state 91
    for                            shift and go to state 92
    while                          shift and go to state 93
    when                           shift and go to state 94
    obj_call                       shift and go to state 96
    empty                          shift and go to state 97

state 96

    (57) estatuto -> obj_call . estatuto
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    LLAVEDER        reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    obj_call                       shift and go to state 96
    estatuto                       shift and go to state 118
    asignacion                     shift and go to state 89
    condicion                      shift and go to state 90
    escritura                      shift and go to state 91
    for                            shift and go to state 92
    while                          shift and go to state 93
    when                           shift and go to state 94
    llamada                        shift and go to state 95
    empty                          shift and go to state 97

state 97

    (58) estatuto -> empty .
    (145) llamada -> empty .
    (147) obj_call -> empty .

  ! reduce/reduce conflict for LLAVEDER resolved using rule 58 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 58 (estatuto -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for WHEN resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 58 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 58 (estatuto -> empty .)
    LLAVEDER        reduce using rule 58 (estatuto -> empty .)
    RETURN          reduce using rule 58 (estatuto -> empty .)
    ID              reduce using rule 145 (llamada -> empty .)
    IF              reduce using rule 145 (llamada -> empty .)
    WRITE           reduce using rule 145 (llamada -> empty .)
    FOR             reduce using rule 145 (llamada -> empty .)
    WHILE           reduce using rule 145 (llamada -> empty .)
    WHEN            reduce using rule 145 (llamada -> empty .)

  ! LLAVEDER        [ reduce using rule 145 (llamada -> empty .) ]
  ! RETURN          [ reduce using rule 145 (llamada -> empty .) ]
  ! ID              [ reduce using rule 147 (obj_call -> empty .) ]
  ! IF              [ reduce using rule 147 (obj_call -> empty .) ]
  ! WRITE           [ reduce using rule 147 (obj_call -> empty .) ]
  ! FOR             [ reduce using rule 147 (obj_call -> empty .) ]
  ! WHILE           [ reduce using rule 147 (obj_call -> empty .) ]
  ! WHEN            [ reduce using rule 147 (obj_call -> empty .) ]
  ! LLAVEDER        [ reduce using rule 147 (obj_call -> empty .) ]
  ! RETURN          [ reduce using rule 147 (obj_call -> empty .) ]


state 98

    (59) asignacion -> ID . asignacion3 IGUAL asignacion2 COLON
    (144) llamada -> ID . PARIZQ llamada_param PARDER COLON
    (146) obj_call -> ID . PUNTO ID PARIZQ llamada_param PARDER COLON
    (70) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (71) asignacion3 -> . PUNTO ID
    (72) asignacion3 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 120
    PUNTO           shift and go to state 121
    CORCHIZQ        shift and go to state 122
    IGUAL           reduce using rule 150 (empty -> .)

    asignacion3                    shift and go to state 119
    empty                          shift and go to state 123

state 99

    (73) condicion -> IF . condicion2 estatutor
    (74) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 125

    condicion2                     shift and go to state 124

state 100

    (84) escritura -> WRITE . PARIZQ esc1 esc2 PARDER COLON

    PARIZQ          shift and go to state 126


state 101

    (109) for -> FOR . PARIZQ ID IN for2 PARDER bloque

    PARIZQ          shift and go to state 127


state 102

    (116) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 128


state 103

    (117) when -> WHEN . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 129


state 104

    (121) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 . funbody
    (128) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 131

    funbody                        shift and go to state 130

state 105

    (126) fun3 -> DOSPUNTOS . tipo
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . BOOL
    (92) tipo -> . STRING
    (93) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 132

state 106

    (127) fun3 -> empty .

    LLAVEIZQ        reduce using rule 127 (fun3 -> empty .)


state 107

    (122) fun2 -> tipo ID funparamr .

    PARDER          reduce using rule 122 (fun2 -> tipo ID funparamr .)


state 108

    (124) funparamr -> COMA . tipo ID funparamr
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . BOOL
    (92) tipo -> . STRING
    (93) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 133

state 109

    (125) funparamr -> empty .

    PARDER          reduce using rule 125 (funparamr -> empty .)


state 110

    (139) mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .

    LLAVEDER        reduce using rule 139 (mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .)


state 111

    (50) estatuto -> asignacion estatuto .

    LLAVEDER        reduce using rule 50 (estatuto -> asignacion estatuto .)
    RETURN          reduce using rule 50 (estatuto -> asignacion estatuto .)


state 112

    (51) estatuto -> condicion estatuto .

    LLAVEDER        reduce using rule 51 (estatuto -> condicion estatuto .)
    RETURN          reduce using rule 51 (estatuto -> condicion estatuto .)


state 113

    (52) estatuto -> escritura estatuto .

    LLAVEDER        reduce using rule 52 (estatuto -> escritura estatuto .)
    RETURN          reduce using rule 52 (estatuto -> escritura estatuto .)


state 114

    (53) estatuto -> for estatuto .

    LLAVEDER        reduce using rule 53 (estatuto -> for estatuto .)
    RETURN          reduce using rule 53 (estatuto -> for estatuto .)


state 115

    (54) estatuto -> while estatuto .

    LLAVEDER        reduce using rule 54 (estatuto -> while estatuto .)
    RETURN          reduce using rule 54 (estatuto -> while estatuto .)


state 116

    (55) estatuto -> when estatuto .

    LLAVEDER        reduce using rule 55 (estatuto -> when estatuto .)
    RETURN          reduce using rule 55 (estatuto -> when estatuto .)


state 117

    (56) estatuto -> llamada estatuto .

    LLAVEDER        reduce using rule 56 (estatuto -> llamada estatuto .)
    RETURN          reduce using rule 56 (estatuto -> llamada estatuto .)


state 118

    (57) estatuto -> obj_call estatuto .

    LLAVEDER        reduce using rule 57 (estatuto -> obj_call estatuto .)
    RETURN          reduce using rule 57 (estatuto -> obj_call estatuto .)


state 119

    (59) asignacion -> ID asignacion3 . IGUAL asignacion2 COLON

    IGUAL           shift and go to state 134


state 120

    (144) llamada -> ID PARIZQ . llamada_param PARDER COLON
    (148) llamada_param -> . expresion expresionr
    (149) llamada_param -> . empty
    (26) expresion -> . megaexp
    (150) empty -> .
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty

    PARDER          reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146

    llamada_param                  shift and go to state 136
    expresion                      shift and go to state 137
    empty                          shift and go to state 138
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144

state 121

    (146) obj_call -> ID PUNTO . ID PARIZQ llamada_param PARDER COLON
    (71) asignacion3 -> PUNTO . ID

    ID              shift and go to state 147


state 122

    (70) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    expresion                      shift and go to state 148
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 123

    (72) asignacion3 -> empty .

    IGUAL           reduce using rule 72 (asignacion3 -> empty .)


state 124

    (73) condicion -> IF condicion2 . estatutor
    (82) estatutor -> . ELSE bloque
    (83) estatutor -> . empty
    (150) empty -> .

    ELSE            shift and go to state 151
    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    WRITE           reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    WHEN            reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

    estatutor                      shift and go to state 150
    empty                          shift and go to state 152

state 125

    (74) condicion2 -> PARIZQ . expresion PARDER bloque
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    expresion                      shift and go to state 153
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 126

    (84) escritura -> WRITE PARIZQ . esc1 esc2 PARDER COLON
    (85) esc1 -> . expresion
    (86) esc1 -> . STRING
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    STRING          shift and go to state 156
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    esc1                           shift and go to state 154
    expresion                      shift and go to state 155
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 127

    (109) for -> FOR PARIZQ . ID IN for2 PARDER bloque

    ID              shift and go to state 157


state 128

    (116) while -> WHILE PARIZQ . expresion PARDER bloque
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    expresion                      shift and go to state 158
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 129

    (117) when -> WHEN LLAVEIZQ . when2 LLAVEDER
    (118) when2 -> . expresion FLECHITA bloque when2
    (119) when2 -> . ELSE FLECHITA bloque
    (120) when2 -> . empty
    (26) expresion -> . megaexp
    (150) empty -> .
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty

    ELSE            shift and go to state 161
    LLAVEDER        reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146

    when2                          shift and go to state 159
    expresion                      shift and go to state 160
    empty                          shift and go to state 162
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144

state 130

    (121) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .

    PRIVATE         reduce using rule 121 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    FUN             reduce using rule 121 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    MAIN            reduce using rule 121 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    LLAVEDER        reduce using rule 121 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)


state 131

    (128) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (129) opc1 -> . vars multvarsdecl
    (130) opc1 -> . empty
    (43) vars -> . vars3 tipo vars2 COLON
    (44) vars -> . vars3 tipo LIST vars2 COLON
    (150) empty -> .
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty

    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    WRITE           reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    WHEN            reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    INT             reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 150 (empty -> .)
    BOOL            reduce using rule 150 (empty -> .)
    STRING          reduce using rule 150 (empty -> .)
    CID             reduce using rule 150 (empty -> .)
    PRIVATE         shift and go to state 21

    opc1                           shift and go to state 163
    vars                           shift and go to state 164
    empty                          shift and go to state 165
    vars3                          shift and go to state 37

state 132

    (126) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 126 (fun3 -> DOSPUNTOS tipo .)


state 133

    (124) funparamr -> COMA tipo . ID funparamr

    ID              shift and go to state 166


state 134

    (59) asignacion -> ID asignacion3 IGUAL . asignacion2 COLON
    (60) asignacion2 -> . expresion
    (61) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (62) asignacion2 -> . READ PARIZQ assign_read PARDER
    (63) asignacion2 -> . CID PARIZQ class_call_args expresionr PARDER
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    CORCHDER        shift and go to state 169
    READ            shift and go to state 170
    CID             shift and go to state 171
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    asignacion2                    shift and go to state 167
    expresion                      shift and go to state 168
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 135

    (94) factor -> PARIZQ . expresion PARDER
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    expresion                      shift and go to state 172
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 136

    (144) llamada -> ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 173


state 137

    (148) llamada_param -> expresion . expresionr
    (27) expresionr -> . COMA expresion expresionr
    (28) expresionr -> . empty
    (150) empty -> .

    COMA            shift and go to state 175
    PARDER          reduce using rule 150 (empty -> .)

    expresionr                     shift and go to state 174
    empty                          shift and go to state 176

state 138

    (149) llamada_param -> empty .
    (108) factor2 -> empty .

    PARDER          reduce using rule 149 (llamada_param -> empty .)
    ID              reduce using rule 108 (factor2 -> empty .)
    INTNUM          reduce using rule 108 (factor2 -> empty .)
    FLOATNUM        reduce using rule 108 (factor2 -> empty .)
    TRUE            reduce using rule 108 (factor2 -> empty .)
    FALSE           reduce using rule 108 (factor2 -> empty .)
    STRINGVAL       reduce using rule 108 (factor2 -> empty .)
    NULL            reduce using rule 108 (factor2 -> empty .)


state 139

    (26) expresion -> megaexp .

    COMA            reduce using rule 26 (expresion -> megaexp .)
    PARDER          reduce using rule 26 (expresion -> megaexp .)
    CORCHDER        reduce using rule 26 (expresion -> megaexp .)
    FLECHITA        reduce using rule 26 (expresion -> megaexp .)
    COLON           reduce using rule 26 (expresion -> megaexp .)
    CORCHIZQ        reduce using rule 26 (expresion -> megaexp .)


state 140

    (39) megaexp -> superexp . megaexpr
    (40) megaexpr -> . AND superexp megaexpr
    (41) megaexpr -> . OR superexp megaexpr
    (42) megaexpr -> . empty
    (150) empty -> .

    AND             shift and go to state 178
    OR              shift and go to state 179
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    megaexpr                       shift and go to state 177
    empty                          shift and go to state 180

state 141

    (31) superexp -> exp . oplog
    (32) oplog -> . MAYORQUE exp
    (33) oplog -> . MENORQUE exp
    (34) oplog -> . DIFERENTE exp
    (35) oplog -> . MAYOROIGUAL exp
    (36) oplog -> . MENOROIGUAL exp
    (37) oplog -> . IGUALIGUAL exp
    (38) oplog -> . empty
    (150) empty -> .

    MAYORQUE        shift and go to state 182
    MENORQUE        shift and go to state 183
    DIFERENTE       shift and go to state 184
    MAYOROIGUAL     shift and go to state 185
    MENOROIGUAL     shift and go to state 186
    IGUALIGUAL      shift and go to state 187
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    oplog                          shift and go to state 181
    empty                          shift and go to state 188

state 142

    (100) exp -> termino . expr
    (101) expr -> . MAS termino expr
    (102) expr -> . MENOS termino expr
    (103) expr -> . empty
    (150) empty -> .

    MAS             shift and go to state 190
    MENOS           shift and go to state 191
    MAYORQUE        reduce using rule 150 (empty -> .)
    MENORQUE        reduce using rule 150 (empty -> .)
    DIFERENTE       reduce using rule 150 (empty -> .)
    MAYOROIGUAL     reduce using rule 150 (empty -> .)
    MENOROIGUAL     reduce using rule 150 (empty -> .)
    IGUALIGUAL      reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    expr                           shift and go to state 189
    empty                          shift and go to state 192

state 143

    (99) termino -> factor . terminor
    (96) terminor -> . POR factor terminor
    (97) terminor -> . SOBRE factor terminor
    (98) terminor -> . empty
    (150) empty -> .

    POR             shift and go to state 194
    SOBRE           shift and go to state 195
    MAS             reduce using rule 150 (empty -> .)
    MENOS           reduce using rule 150 (empty -> .)
    MAYORQUE        reduce using rule 150 (empty -> .)
    MENORQUE        reduce using rule 150 (empty -> .)
    DIFERENTE       reduce using rule 150 (empty -> .)
    MAYOROIGUAL     reduce using rule 150 (empty -> .)
    MENOROIGUAL     reduce using rule 150 (empty -> .)
    IGUALIGUAL      reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    terminor                       shift and go to state 193
    empty                          shift and go to state 196

state 144

    (95) factor -> factor2 . varcte
    (14) varcte -> . ID
    (15) varcte -> . INTNUM
    (16) varcte -> . FLOATNUM
    (17) varcte -> . TRUE
    (18) varcte -> . FALSE
    (19) varcte -> . STRINGVAL
    (20) varcte -> . NULL
    (21) varcte -> . ID CORCHIZQ varcte CORCHDER
    (22) varcte -> . ID PUNTO ID varcte_param_fun
    (23) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 198
    INTNUM          shift and go to state 199
    FLOATNUM        shift and go to state 200
    TRUE            shift and go to state 201
    FALSE           shift and go to state 202
    STRINGVAL       shift and go to state 203
    NULL            shift and go to state 204

    varcte                         shift and go to state 197

state 145

    (106) factor2 -> MAS .

    ID              reduce using rule 106 (factor2 -> MAS .)
    INTNUM          reduce using rule 106 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 106 (factor2 -> MAS .)
    TRUE            reduce using rule 106 (factor2 -> MAS .)
    FALSE           reduce using rule 106 (factor2 -> MAS .)
    STRINGVAL       reduce using rule 106 (factor2 -> MAS .)
    NULL            reduce using rule 106 (factor2 -> MAS .)


state 146

    (107) factor2 -> MENOS .

    ID              reduce using rule 107 (factor2 -> MENOS .)
    INTNUM          reduce using rule 107 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 107 (factor2 -> MENOS .)
    TRUE            reduce using rule 107 (factor2 -> MENOS .)
    FALSE           reduce using rule 107 (factor2 -> MENOS .)
    STRINGVAL       reduce using rule 107 (factor2 -> MENOS .)
    NULL            reduce using rule 107 (factor2 -> MENOS .)


state 147

    (146) obj_call -> ID PUNTO ID . PARIZQ llamada_param PARDER COLON
    (71) asignacion3 -> PUNTO ID .

    PARIZQ          shift and go to state 205
    IGUAL           reduce using rule 71 (asignacion3 -> PUNTO ID .)


state 148

    (70) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 206


state 149

    (108) factor2 -> empty .

    ID              reduce using rule 108 (factor2 -> empty .)
    INTNUM          reduce using rule 108 (factor2 -> empty .)
    FLOATNUM        reduce using rule 108 (factor2 -> empty .)
    TRUE            reduce using rule 108 (factor2 -> empty .)
    FALSE           reduce using rule 108 (factor2 -> empty .)
    STRINGVAL       reduce using rule 108 (factor2 -> empty .)
    NULL            reduce using rule 108 (factor2 -> empty .)


state 150

    (73) condicion -> IF condicion2 estatutor .

    ID              reduce using rule 73 (condicion -> IF condicion2 estatutor .)
    IF              reduce using rule 73 (condicion -> IF condicion2 estatutor .)
    WRITE           reduce using rule 73 (condicion -> IF condicion2 estatutor .)
    FOR             reduce using rule 73 (condicion -> IF condicion2 estatutor .)
    WHILE           reduce using rule 73 (condicion -> IF condicion2 estatutor .)
    WHEN            reduce using rule 73 (condicion -> IF condicion2 estatutor .)
    LLAVEDER        reduce using rule 73 (condicion -> IF condicion2 estatutor .)
    RETURN          reduce using rule 73 (condicion -> IF condicion2 estatutor .)


state 151

    (82) estatutor -> ELSE . bloque
    (77) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 208

    bloque                         shift and go to state 207

state 152

    (83) estatutor -> empty .

    ID              reduce using rule 83 (estatutor -> empty .)
    IF              reduce using rule 83 (estatutor -> empty .)
    WRITE           reduce using rule 83 (estatutor -> empty .)
    FOR             reduce using rule 83 (estatutor -> empty .)
    WHILE           reduce using rule 83 (estatutor -> empty .)
    WHEN            reduce using rule 83 (estatutor -> empty .)
    LLAVEDER        reduce using rule 83 (estatutor -> empty .)
    RETURN          reduce using rule 83 (estatutor -> empty .)


state 153

    (74) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 209


state 154

    (84) escritura -> WRITE PARIZQ esc1 . esc2 PARDER COLON
    (87) esc2 -> . COMA esc1 esc2
    (88) esc2 -> . empty
    (150) empty -> .

    COMA            shift and go to state 211
    PARDER          reduce using rule 150 (empty -> .)

    esc2                           shift and go to state 210
    empty                          shift and go to state 212

state 155

    (85) esc1 -> expresion .

    COMA            reduce using rule 85 (esc1 -> expresion .)
    PARDER          reduce using rule 85 (esc1 -> expresion .)


state 156

    (86) esc1 -> STRING .

    COMA            reduce using rule 86 (esc1 -> STRING .)
    PARDER          reduce using rule 86 (esc1 -> STRING .)


state 157

    (109) for -> FOR PARIZQ ID . IN for2 PARDER bloque

    IN              shift and go to state 213


state 158

    (116) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 214


state 159

    (117) when -> WHEN LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 215


state 160

    (118) when2 -> expresion . FLECHITA bloque when2

    FLECHITA        shift and go to state 216


state 161

    (119) when2 -> ELSE . FLECHITA bloque

    FLECHITA        shift and go to state 217


state 162

    (120) when2 -> empty .
    (108) factor2 -> empty .

    LLAVEDER        reduce using rule 120 (when2 -> empty .)
    ID              reduce using rule 108 (factor2 -> empty .)
    INTNUM          reduce using rule 108 (factor2 -> empty .)
    FLOATNUM        reduce using rule 108 (factor2 -> empty .)
    TRUE            reduce using rule 108 (factor2 -> empty .)
    FALSE           reduce using rule 108 (factor2 -> empty .)
    STRINGVAL       reduce using rule 108 (factor2 -> empty .)
    NULL            reduce using rule 108 (factor2 -> empty .)


state 163

    (128) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (131) opc2 -> . estatuto
    (132) opc2 -> . empty
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (150) empty -> .
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    opc2                           shift and go to state 218
    estatuto                       shift and go to state 219
    empty                          shift and go to state 220
    asignacion                     shift and go to state 89
    condicion                      shift and go to state 90
    escritura                      shift and go to state 91
    for                            shift and go to state 92
    while                          shift and go to state 93
    when                           shift and go to state 94
    llamada                        shift and go to state 95
    obj_call                       shift and go to state 96

state 164

    (129) opc1 -> vars . multvarsdecl
    (140) multvarsdecl -> . vars multvarsdecl
    (141) multvarsdecl -> . empty
    (43) vars -> . vars3 tipo vars2 COLON
    (44) vars -> . vars3 tipo LIST vars2 COLON
    (150) empty -> .
    (48) vars3 -> . PRIVATE
    (49) vars3 -> . empty

    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    WRITE           reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    WHEN            reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)
    INT             reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 150 (empty -> .)
    BOOL            reduce using rule 150 (empty -> .)
    STRING          reduce using rule 150 (empty -> .)
    CID             reduce using rule 150 (empty -> .)
    PRIVATE         shift and go to state 21

    vars                           shift and go to state 44
    multvarsdecl                   shift and go to state 221
    empty                          shift and go to state 46
    vars3                          shift and go to state 37

state 165

    (130) opc1 -> empty .
    (49) vars3 -> empty .

    ID              reduce using rule 130 (opc1 -> empty .)
    IF              reduce using rule 130 (opc1 -> empty .)
    WRITE           reduce using rule 130 (opc1 -> empty .)
    FOR             reduce using rule 130 (opc1 -> empty .)
    WHILE           reduce using rule 130 (opc1 -> empty .)
    WHEN            reduce using rule 130 (opc1 -> empty .)
    RETURN          reduce using rule 130 (opc1 -> empty .)
    LLAVEDER        reduce using rule 130 (opc1 -> empty .)
    INT             reduce using rule 49 (vars3 -> empty .)
    FLOAT           reduce using rule 49 (vars3 -> empty .)
    BOOL            reduce using rule 49 (vars3 -> empty .)
    STRING          reduce using rule 49 (vars3 -> empty .)
    CID             reduce using rule 49 (vars3 -> empty .)


state 166

    (124) funparamr -> COMA tipo ID . funparamr
    (124) funparamr -> . COMA tipo ID funparamr
    (125) funparamr -> . empty
    (150) empty -> .

    COMA            shift and go to state 108
    PARDER          reduce using rule 150 (empty -> .)

    funparamr                      shift and go to state 222
    empty                          shift and go to state 109

state 167

    (59) asignacion -> ID asignacion3 IGUAL asignacion2 . COLON

    COLON           shift and go to state 223


state 168

    (60) asignacion2 -> expresion .

    COLON           reduce using rule 60 (asignacion2 -> expresion .)


state 169

    (61) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    expresion                      shift and go to state 224
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 170

    (62) asignacion2 -> READ . PARIZQ assign_read PARDER

    PARIZQ          shift and go to state 225


state 171

    (63) asignacion2 -> CID . PARIZQ class_call_args expresionr PARDER

    PARIZQ          shift and go to state 226


state 172

    (94) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 227


state 173

    (144) llamada -> ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 228


state 174

    (148) llamada_param -> expresion expresionr .

    PARDER          reduce using rule 148 (llamada_param -> expresion expresionr .)


state 175

    (27) expresionr -> COMA . expresion expresionr
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    expresion                      shift and go to state 229
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 176

    (28) expresionr -> empty .

    PARDER          reduce using rule 28 (expresionr -> empty .)


state 177

    (39) megaexp -> superexp megaexpr .

    COMA            reduce using rule 39 (megaexp -> superexp megaexpr .)
    PARDER          reduce using rule 39 (megaexp -> superexp megaexpr .)
    CORCHDER        reduce using rule 39 (megaexp -> superexp megaexpr .)
    FLECHITA        reduce using rule 39 (megaexp -> superexp megaexpr .)
    COLON           reduce using rule 39 (megaexp -> superexp megaexpr .)
    CORCHIZQ        reduce using rule 39 (megaexp -> superexp megaexpr .)


state 178

    (40) megaexpr -> AND . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    superexp                       shift and go to state 230
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 179

    (41) megaexpr -> OR . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    superexp                       shift and go to state 231
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 180

    (42) megaexpr -> empty .

    COMA            reduce using rule 42 (megaexpr -> empty .)
    PARDER          reduce using rule 42 (megaexpr -> empty .)
    CORCHDER        reduce using rule 42 (megaexpr -> empty .)
    FLECHITA        reduce using rule 42 (megaexpr -> empty .)
    COLON           reduce using rule 42 (megaexpr -> empty .)
    CORCHIZQ        reduce using rule 42 (megaexpr -> empty .)


state 181

    (31) superexp -> exp oplog .

    AND             reduce using rule 31 (superexp -> exp oplog .)
    OR              reduce using rule 31 (superexp -> exp oplog .)
    COMA            reduce using rule 31 (superexp -> exp oplog .)
    PARDER          reduce using rule 31 (superexp -> exp oplog .)
    CORCHDER        reduce using rule 31 (superexp -> exp oplog .)
    FLECHITA        reduce using rule 31 (superexp -> exp oplog .)
    COLON           reduce using rule 31 (superexp -> exp oplog .)
    CORCHIZQ        reduce using rule 31 (superexp -> exp oplog .)


state 182

    (32) oplog -> MAYORQUE . exp
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    exp                            shift and go to state 232
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 183

    (33) oplog -> MENORQUE . exp
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    exp                            shift and go to state 233
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 184

    (34) oplog -> DIFERENTE . exp
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    exp                            shift and go to state 234
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 185

    (35) oplog -> MAYOROIGUAL . exp
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    exp                            shift and go to state 235
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 186

    (36) oplog -> MENOROIGUAL . exp
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    exp                            shift and go to state 236
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 187

    (37) oplog -> IGUALIGUAL . exp
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    exp                            shift and go to state 237
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 188

    (38) oplog -> empty .

    AND             reduce using rule 38 (oplog -> empty .)
    OR              reduce using rule 38 (oplog -> empty .)
    COMA            reduce using rule 38 (oplog -> empty .)
    PARDER          reduce using rule 38 (oplog -> empty .)
    CORCHDER        reduce using rule 38 (oplog -> empty .)
    FLECHITA        reduce using rule 38 (oplog -> empty .)
    COLON           reduce using rule 38 (oplog -> empty .)
    CORCHIZQ        reduce using rule 38 (oplog -> empty .)


state 189

    (100) exp -> termino expr .

    MAYORQUE        reduce using rule 100 (exp -> termino expr .)
    MENORQUE        reduce using rule 100 (exp -> termino expr .)
    DIFERENTE       reduce using rule 100 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 100 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 100 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 100 (exp -> termino expr .)
    AND             reduce using rule 100 (exp -> termino expr .)
    OR              reduce using rule 100 (exp -> termino expr .)
    COMA            reduce using rule 100 (exp -> termino expr .)
    PARDER          reduce using rule 100 (exp -> termino expr .)
    CORCHDER        reduce using rule 100 (exp -> termino expr .)
    FLECHITA        reduce using rule 100 (exp -> termino expr .)
    COLON           reduce using rule 100 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 100 (exp -> termino expr .)


state 190

    (101) expr -> MAS . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    termino                        shift and go to state 238
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 191

    (102) expr -> MENOS . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    termino                        shift and go to state 239
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 192

    (103) expr -> empty .

    MAYORQUE        reduce using rule 103 (expr -> empty .)
    MENORQUE        reduce using rule 103 (expr -> empty .)
    DIFERENTE       reduce using rule 103 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 103 (expr -> empty .)
    MENOROIGUAL     reduce using rule 103 (expr -> empty .)
    IGUALIGUAL      reduce using rule 103 (expr -> empty .)
    AND             reduce using rule 103 (expr -> empty .)
    OR              reduce using rule 103 (expr -> empty .)
    COMA            reduce using rule 103 (expr -> empty .)
    PARDER          reduce using rule 103 (expr -> empty .)
    CORCHDER        reduce using rule 103 (expr -> empty .)
    FLECHITA        reduce using rule 103 (expr -> empty .)
    COLON           reduce using rule 103 (expr -> empty .)
    CORCHIZQ        reduce using rule 103 (expr -> empty .)


state 193

    (99) termino -> factor terminor .

    MAS             reduce using rule 99 (termino -> factor terminor .)
    MENOS           reduce using rule 99 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 99 (termino -> factor terminor .)
    MENORQUE        reduce using rule 99 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 99 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 99 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 99 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 99 (termino -> factor terminor .)
    AND             reduce using rule 99 (termino -> factor terminor .)
    OR              reduce using rule 99 (termino -> factor terminor .)
    COMA            reduce using rule 99 (termino -> factor terminor .)
    PARDER          reduce using rule 99 (termino -> factor terminor .)
    CORCHDER        reduce using rule 99 (termino -> factor terminor .)
    FLECHITA        reduce using rule 99 (termino -> factor terminor .)
    COLON           reduce using rule 99 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 99 (termino -> factor terminor .)


state 194

    (96) terminor -> POR . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    factor                         shift and go to state 240
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 195

    (97) terminor -> SOBRE . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    factor                         shift and go to state 241
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 196

    (98) terminor -> empty .

    MAS             reduce using rule 98 (terminor -> empty .)
    MENOS           reduce using rule 98 (terminor -> empty .)
    MAYORQUE        reduce using rule 98 (terminor -> empty .)
    MENORQUE        reduce using rule 98 (terminor -> empty .)
    DIFERENTE       reduce using rule 98 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 98 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 98 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 98 (terminor -> empty .)
    AND             reduce using rule 98 (terminor -> empty .)
    OR              reduce using rule 98 (terminor -> empty .)
    COMA            reduce using rule 98 (terminor -> empty .)
    PARDER          reduce using rule 98 (terminor -> empty .)
    CORCHDER        reduce using rule 98 (terminor -> empty .)
    FLECHITA        reduce using rule 98 (terminor -> empty .)
    COLON           reduce using rule 98 (terminor -> empty .)
    CORCHIZQ        reduce using rule 98 (terminor -> empty .)


state 197

    (95) factor -> factor2 varcte .

    POR             reduce using rule 95 (factor -> factor2 varcte .)
    SOBRE           reduce using rule 95 (factor -> factor2 varcte .)
    MAS             reduce using rule 95 (factor -> factor2 varcte .)
    MENOS           reduce using rule 95 (factor -> factor2 varcte .)
    MAYORQUE        reduce using rule 95 (factor -> factor2 varcte .)
    MENORQUE        reduce using rule 95 (factor -> factor2 varcte .)
    DIFERENTE       reduce using rule 95 (factor -> factor2 varcte .)
    MAYOROIGUAL     reduce using rule 95 (factor -> factor2 varcte .)
    MENOROIGUAL     reduce using rule 95 (factor -> factor2 varcte .)
    IGUALIGUAL      reduce using rule 95 (factor -> factor2 varcte .)
    AND             reduce using rule 95 (factor -> factor2 varcte .)
    OR              reduce using rule 95 (factor -> factor2 varcte .)
    COMA            reduce using rule 95 (factor -> factor2 varcte .)
    PARDER          reduce using rule 95 (factor -> factor2 varcte .)
    CORCHDER        reduce using rule 95 (factor -> factor2 varcte .)
    FLECHITA        reduce using rule 95 (factor -> factor2 varcte .)
    COLON           reduce using rule 95 (factor -> factor2 varcte .)
    CORCHIZQ        reduce using rule 95 (factor -> factor2 varcte .)


state 198

    (14) varcte -> ID .
    (21) varcte -> ID . CORCHIZQ varcte CORCHDER
    (22) varcte -> ID . PUNTO ID varcte_param_fun
    (23) varcte -> ID . PARIZQ llamada_param PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    POR             reduce using rule 14 (varcte -> ID .)
    SOBRE           reduce using rule 14 (varcte -> ID .)
    MAS             reduce using rule 14 (varcte -> ID .)
    MENOS           reduce using rule 14 (varcte -> ID .)
    MAYORQUE        reduce using rule 14 (varcte -> ID .)
    MENORQUE        reduce using rule 14 (varcte -> ID .)
    DIFERENTE       reduce using rule 14 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 14 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 14 (varcte -> ID .)
    AND             reduce using rule 14 (varcte -> ID .)
    OR              reduce using rule 14 (varcte -> ID .)
    COMA            reduce using rule 14 (varcte -> ID .)
    PARDER          reduce using rule 14 (varcte -> ID .)
    CORCHDER        reduce using rule 14 (varcte -> ID .)
    FLECHITA        reduce using rule 14 (varcte -> ID .)
    COLON           reduce using rule 14 (varcte -> ID .)
    CORCHIZQ        shift and go to state 242
    PUNTO           shift and go to state 243
    PARIZQ          shift and go to state 244

  ! CORCHIZQ        [ reduce using rule 14 (varcte -> ID .) ]


state 199

    (15) varcte -> INTNUM .

    POR             reduce using rule 15 (varcte -> INTNUM .)
    SOBRE           reduce using rule 15 (varcte -> INTNUM .)
    MAS             reduce using rule 15 (varcte -> INTNUM .)
    MENOS           reduce using rule 15 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 15 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 15 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 15 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 15 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 15 (varcte -> INTNUM .)
    AND             reduce using rule 15 (varcte -> INTNUM .)
    OR              reduce using rule 15 (varcte -> INTNUM .)
    COMA            reduce using rule 15 (varcte -> INTNUM .)
    PARDER          reduce using rule 15 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 15 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 15 (varcte -> INTNUM .)
    COLON           reduce using rule 15 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 15 (varcte -> INTNUM .)


state 200

    (16) varcte -> FLOATNUM .

    POR             reduce using rule 16 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 16 (varcte -> FLOATNUM .)
    MAS             reduce using rule 16 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 16 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 16 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 16 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 16 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 16 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 16 (varcte -> FLOATNUM .)
    AND             reduce using rule 16 (varcte -> FLOATNUM .)
    OR              reduce using rule 16 (varcte -> FLOATNUM .)
    COMA            reduce using rule 16 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 16 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 16 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 16 (varcte -> FLOATNUM .)
    COLON           reduce using rule 16 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 16 (varcte -> FLOATNUM .)


state 201

    (17) varcte -> TRUE .

    POR             reduce using rule 17 (varcte -> TRUE .)
    SOBRE           reduce using rule 17 (varcte -> TRUE .)
    MAS             reduce using rule 17 (varcte -> TRUE .)
    MENOS           reduce using rule 17 (varcte -> TRUE .)
    MAYORQUE        reduce using rule 17 (varcte -> TRUE .)
    MENORQUE        reduce using rule 17 (varcte -> TRUE .)
    DIFERENTE       reduce using rule 17 (varcte -> TRUE .)
    MAYOROIGUAL     reduce using rule 17 (varcte -> TRUE .)
    MENOROIGUAL     reduce using rule 17 (varcte -> TRUE .)
    IGUALIGUAL      reduce using rule 17 (varcte -> TRUE .)
    AND             reduce using rule 17 (varcte -> TRUE .)
    OR              reduce using rule 17 (varcte -> TRUE .)
    COMA            reduce using rule 17 (varcte -> TRUE .)
    PARDER          reduce using rule 17 (varcte -> TRUE .)
    CORCHDER        reduce using rule 17 (varcte -> TRUE .)
    FLECHITA        reduce using rule 17 (varcte -> TRUE .)
    COLON           reduce using rule 17 (varcte -> TRUE .)
    CORCHIZQ        reduce using rule 17 (varcte -> TRUE .)


state 202

    (18) varcte -> FALSE .

    POR             reduce using rule 18 (varcte -> FALSE .)
    SOBRE           reduce using rule 18 (varcte -> FALSE .)
    MAS             reduce using rule 18 (varcte -> FALSE .)
    MENOS           reduce using rule 18 (varcte -> FALSE .)
    MAYORQUE        reduce using rule 18 (varcte -> FALSE .)
    MENORQUE        reduce using rule 18 (varcte -> FALSE .)
    DIFERENTE       reduce using rule 18 (varcte -> FALSE .)
    MAYOROIGUAL     reduce using rule 18 (varcte -> FALSE .)
    MENOROIGUAL     reduce using rule 18 (varcte -> FALSE .)
    IGUALIGUAL      reduce using rule 18 (varcte -> FALSE .)
    AND             reduce using rule 18 (varcte -> FALSE .)
    OR              reduce using rule 18 (varcte -> FALSE .)
    COMA            reduce using rule 18 (varcte -> FALSE .)
    PARDER          reduce using rule 18 (varcte -> FALSE .)
    CORCHDER        reduce using rule 18 (varcte -> FALSE .)
    FLECHITA        reduce using rule 18 (varcte -> FALSE .)
    COLON           reduce using rule 18 (varcte -> FALSE .)
    CORCHIZQ        reduce using rule 18 (varcte -> FALSE .)


state 203

    (19) varcte -> STRINGVAL .

    POR             reduce using rule 19 (varcte -> STRINGVAL .)
    SOBRE           reduce using rule 19 (varcte -> STRINGVAL .)
    MAS             reduce using rule 19 (varcte -> STRINGVAL .)
    MENOS           reduce using rule 19 (varcte -> STRINGVAL .)
    MAYORQUE        reduce using rule 19 (varcte -> STRINGVAL .)
    MENORQUE        reduce using rule 19 (varcte -> STRINGVAL .)
    DIFERENTE       reduce using rule 19 (varcte -> STRINGVAL .)
    MAYOROIGUAL     reduce using rule 19 (varcte -> STRINGVAL .)
    MENOROIGUAL     reduce using rule 19 (varcte -> STRINGVAL .)
    IGUALIGUAL      reduce using rule 19 (varcte -> STRINGVAL .)
    AND             reduce using rule 19 (varcte -> STRINGVAL .)
    OR              reduce using rule 19 (varcte -> STRINGVAL .)
    COMA            reduce using rule 19 (varcte -> STRINGVAL .)
    PARDER          reduce using rule 19 (varcte -> STRINGVAL .)
    CORCHDER        reduce using rule 19 (varcte -> STRINGVAL .)
    FLECHITA        reduce using rule 19 (varcte -> STRINGVAL .)
    COLON           reduce using rule 19 (varcte -> STRINGVAL .)
    CORCHIZQ        reduce using rule 19 (varcte -> STRINGVAL .)


state 204

    (20) varcte -> NULL .

    POR             reduce using rule 20 (varcte -> NULL .)
    SOBRE           reduce using rule 20 (varcte -> NULL .)
    MAS             reduce using rule 20 (varcte -> NULL .)
    MENOS           reduce using rule 20 (varcte -> NULL .)
    MAYORQUE        reduce using rule 20 (varcte -> NULL .)
    MENORQUE        reduce using rule 20 (varcte -> NULL .)
    DIFERENTE       reduce using rule 20 (varcte -> NULL .)
    MAYOROIGUAL     reduce using rule 20 (varcte -> NULL .)
    MENOROIGUAL     reduce using rule 20 (varcte -> NULL .)
    IGUALIGUAL      reduce using rule 20 (varcte -> NULL .)
    AND             reduce using rule 20 (varcte -> NULL .)
    OR              reduce using rule 20 (varcte -> NULL .)
    COMA            reduce using rule 20 (varcte -> NULL .)
    PARDER          reduce using rule 20 (varcte -> NULL .)
    CORCHDER        reduce using rule 20 (varcte -> NULL .)
    FLECHITA        reduce using rule 20 (varcte -> NULL .)
    COLON           reduce using rule 20 (varcte -> NULL .)
    CORCHIZQ        reduce using rule 20 (varcte -> NULL .)


state 205

    (146) obj_call -> ID PUNTO ID PARIZQ . llamada_param PARDER COLON
    (148) llamada_param -> . expresion expresionr
    (149) llamada_param -> . empty
    (26) expresion -> . megaexp
    (150) empty -> .
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty

    PARDER          reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146

    llamada_param                  shift and go to state 245
    expresion                      shift and go to state 137
    empty                          shift and go to state 138
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144

state 206

    (70) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 70 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 207

    (82) estatutor -> ELSE bloque .

    ID              reduce using rule 82 (estatutor -> ELSE bloque .)
    IF              reduce using rule 82 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 82 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 82 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 82 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 82 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 82 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 82 (estatutor -> ELSE bloque .)


state 208

    (77) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (50) estatuto -> . asignacion estatuto
    (51) estatuto -> . condicion estatuto
    (52) estatuto -> . escritura estatuto
    (53) estatuto -> . for estatuto
    (54) estatuto -> . while estatuto
    (55) estatuto -> . when estatuto
    (56) estatuto -> . llamada estatuto
    (57) estatuto -> . obj_call estatuto
    (58) estatuto -> . empty
    (59) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (73) condicion -> . IF condicion2 estatutor
    (84) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (109) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (116) while -> . WHILE PARIZQ expresion PARDER bloque
    (117) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (144) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (145) llamada -> . empty
    (146) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (147) obj_call -> . empty
    (150) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 98
    IF              shift and go to state 99
    WRITE           shift and go to state 100
    FOR             shift and go to state 101
    WHILE           shift and go to state 102
    WHEN            shift and go to state 103
    RETURN          reduce using rule 150 (empty -> .)
    LLAVEDER        reduce using rule 150 (empty -> .)

  ! ID              [ reduce using rule 150 (empty -> .) ]
  ! IF              [ reduce using rule 150 (empty -> .) ]
  ! WRITE           [ reduce using rule 150 (empty -> .) ]
  ! FOR             [ reduce using rule 150 (empty -> .) ]
  ! WHILE           [ reduce using rule 150 (empty -> .) ]
  ! WHEN            [ reduce using rule 150 (empty -> .) ]

    estatuto                       shift and go to state 246
    asignacion                     shift and go to state 89
    condicion                      shift and go to state 90
    escritura                      shift and go to state 91
    for                            shift and go to state 92
    while                          shift and go to state 93
    when                           shift and go to state 94
    llamada                        shift and go to state 95
    obj_call                       shift and go to state 96
    empty                          shift and go to state 97

state 209

    (74) condicion2 -> PARIZQ expresion PARDER . bloque
    (77) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 208

    bloque                         shift and go to state 247

state 210

    (84) escritura -> WRITE PARIZQ esc1 esc2 . PARDER COLON

    PARDER          shift and go to state 248


state 211

    (87) esc2 -> COMA . esc1 esc2
    (85) esc1 -> . expresion
    (86) esc1 -> . STRING
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    STRING          shift and go to state 156
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    esc1                           shift and go to state 249
    expresion                      shift and go to state 155
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 212

    (88) esc2 -> empty .

    PARDER          reduce using rule 88 (esc2 -> empty .)


state 213

    (109) for -> FOR PARIZQ ID IN . for2 PARDER bloque
    (110) for2 -> . ID
    (111) for2 -> . range
    (112) range -> . INTNUM PUNTOSRANGO INTNUM
    (113) range -> . ID PUNTOSRANGO ID
    (114) range -> . ID PUNTOSRANGO INTNUM
    (115) range -> . INTNUM PUNTOSRANGO ID

    ID              shift and go to state 250
    INTNUM          shift and go to state 253

    for2                           shift and go to state 251
    range                          shift and go to state 252

state 214

    (116) while -> WHILE PARIZQ expresion PARDER . bloque
    (77) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 208

    bloque                         shift and go to state 254

state 215

    (117) when -> WHEN LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 117 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 117 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 117 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 117 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 117 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 117 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 117 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 117 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)


state 216

    (118) when2 -> expresion FLECHITA . bloque when2
    (77) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 208

    bloque                         shift and go to state 255

state 217

    (119) when2 -> ELSE FLECHITA . bloque
    (77) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 208

    bloque                         shift and go to state 256

state 218

    (128) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (78) bloque2 -> . RETURN bloque3
    (79) bloque2 -> . empty
    (150) empty -> .

    RETURN          shift and go to state 258
    LLAVEDER        reduce using rule 150 (empty -> .)

    bloque2                        shift and go to state 257
    empty                          shift and go to state 259

state 219

    (131) opc2 -> estatuto .

    RETURN          reduce using rule 131 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 131 (opc2 -> estatuto .)


state 220

    (132) opc2 -> empty .
    (58) estatuto -> empty .
    (145) llamada -> empty .
    (147) obj_call -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 58 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 58 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 58 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 58 (estatuto -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for WHEN resolved using rule 145 (llamada -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 58 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 58 (estatuto -> empty .)
    RETURN          reduce using rule 58 (estatuto -> empty .)
    LLAVEDER        reduce using rule 58 (estatuto -> empty .)
    ID              reduce using rule 145 (llamada -> empty .)
    IF              reduce using rule 145 (llamada -> empty .)
    WRITE           reduce using rule 145 (llamada -> empty .)
    FOR             reduce using rule 145 (llamada -> empty .)
    WHILE           reduce using rule 145 (llamada -> empty .)
    WHEN            reduce using rule 145 (llamada -> empty .)

  ! RETURN          [ reduce using rule 132 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 132 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 145 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 145 (llamada -> empty .) ]
  ! ID              [ reduce using rule 147 (obj_call -> empty .) ]
  ! IF              [ reduce using rule 147 (obj_call -> empty .) ]
  ! WRITE           [ reduce using rule 147 (obj_call -> empty .) ]
  ! FOR             [ reduce using rule 147 (obj_call -> empty .) ]
  ! WHILE           [ reduce using rule 147 (obj_call -> empty .) ]
  ! WHEN            [ reduce using rule 147 (obj_call -> empty .) ]
  ! RETURN          [ reduce using rule 147 (obj_call -> empty .) ]
  ! LLAVEDER        [ reduce using rule 147 (obj_call -> empty .) ]


state 221

    (129) opc1 -> vars multvarsdecl .

    ID              reduce using rule 129 (opc1 -> vars multvarsdecl .)
    IF              reduce using rule 129 (opc1 -> vars multvarsdecl .)
    WRITE           reduce using rule 129 (opc1 -> vars multvarsdecl .)
    FOR             reduce using rule 129 (opc1 -> vars multvarsdecl .)
    WHILE           reduce using rule 129 (opc1 -> vars multvarsdecl .)
    WHEN            reduce using rule 129 (opc1 -> vars multvarsdecl .)
    RETURN          reduce using rule 129 (opc1 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 129 (opc1 -> vars multvarsdecl .)


state 222

    (124) funparamr -> COMA tipo ID funparamr .

    PARDER          reduce using rule 124 (funparamr -> COMA tipo ID funparamr .)


state 223

    (59) asignacion -> ID asignacion3 IGUAL asignacion2 COLON .

    ID              reduce using rule 59 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    IF              reduce using rule 59 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WRITE           reduce using rule 59 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    FOR             reduce using rule 59 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHILE           reduce using rule 59 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHEN            reduce using rule 59 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    LLAVEDER        reduce using rule 59 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    RETURN          reduce using rule 59 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)


state 224

    (61) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (68) asignacion2r -> . COMA expresion asignacion2r
    (69) asignacion2r -> . empty
    (150) empty -> .

    COMA            shift and go to state 261
    CORCHIZQ        reduce using rule 150 (empty -> .)

    asignacion2r                   shift and go to state 260
    empty                          shift and go to state 262

state 225

    (62) asignacion2 -> READ PARIZQ . assign_read PARDER
    (66) assign_read -> . STRINGVAL
    (67) assign_read -> . empty
    (150) empty -> .

    STRINGVAL       shift and go to state 264
    PARDER          reduce using rule 150 (empty -> .)

    assign_read                    shift and go to state 263
    empty                          shift and go to state 265

state 226

    (63) asignacion2 -> CID PARIZQ . class_call_args expresionr PARDER
    (64) class_call_args -> . expresion
    (65) class_call_args -> . empty
    (26) expresion -> . megaexp
    (150) empty -> .
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty

    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146

    class_call_args                shift and go to state 266
    expresion                      shift and go to state 267
    empty                          shift and go to state 268
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144

state 227

    (94) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    FLECHITA        reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    COLON           reduce using rule 94 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 94 (factor -> PARIZQ expresion PARDER .)


state 228

    (144) llamada -> ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 144 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 144 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 144 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 144 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 144 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 144 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 144 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 144 (llamada -> ID PARIZQ llamada_param PARDER COLON .)


state 229

    (27) expresionr -> COMA expresion . expresionr
    (27) expresionr -> . COMA expresion expresionr
    (28) expresionr -> . empty
    (150) empty -> .

    COMA            shift and go to state 175
    PARDER          reduce using rule 150 (empty -> .)

    expresionr                     shift and go to state 269
    empty                          shift and go to state 176

state 230

    (40) megaexpr -> AND superexp . megaexpr
    (40) megaexpr -> . AND superexp megaexpr
    (41) megaexpr -> . OR superexp megaexpr
    (42) megaexpr -> . empty
    (150) empty -> .

    AND             shift and go to state 178
    OR              shift and go to state 179
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    megaexpr                       shift and go to state 270
    empty                          shift and go to state 180

state 231

    (41) megaexpr -> OR superexp . megaexpr
    (40) megaexpr -> . AND superexp megaexpr
    (41) megaexpr -> . OR superexp megaexpr
    (42) megaexpr -> . empty
    (150) empty -> .

    AND             shift and go to state 178
    OR              shift and go to state 179
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    megaexpr                       shift and go to state 271
    empty                          shift and go to state 180

state 232

    (32) oplog -> MAYORQUE exp .

    AND             reduce using rule 32 (oplog -> MAYORQUE exp .)
    OR              reduce using rule 32 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 32 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 32 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 32 (oplog -> MAYORQUE exp .)
    FLECHITA        reduce using rule 32 (oplog -> MAYORQUE exp .)
    COLON           reduce using rule 32 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 32 (oplog -> MAYORQUE exp .)


state 233

    (33) oplog -> MENORQUE exp .

    AND             reduce using rule 33 (oplog -> MENORQUE exp .)
    OR              reduce using rule 33 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 33 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 33 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 33 (oplog -> MENORQUE exp .)
    FLECHITA        reduce using rule 33 (oplog -> MENORQUE exp .)
    COLON           reduce using rule 33 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 33 (oplog -> MENORQUE exp .)


state 234

    (34) oplog -> DIFERENTE exp .

    AND             reduce using rule 34 (oplog -> DIFERENTE exp .)
    OR              reduce using rule 34 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 34 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 34 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 34 (oplog -> DIFERENTE exp .)
    FLECHITA        reduce using rule 34 (oplog -> DIFERENTE exp .)
    COLON           reduce using rule 34 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 34 (oplog -> DIFERENTE exp .)


state 235

    (35) oplog -> MAYOROIGUAL exp .

    AND             reduce using rule 35 (oplog -> MAYOROIGUAL exp .)
    OR              reduce using rule 35 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 35 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 35 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 35 (oplog -> MAYOROIGUAL exp .)
    FLECHITA        reduce using rule 35 (oplog -> MAYOROIGUAL exp .)
    COLON           reduce using rule 35 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 35 (oplog -> MAYOROIGUAL exp .)


state 236

    (36) oplog -> MENOROIGUAL exp .

    AND             reduce using rule 36 (oplog -> MENOROIGUAL exp .)
    OR              reduce using rule 36 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 36 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 36 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 36 (oplog -> MENOROIGUAL exp .)
    FLECHITA        reduce using rule 36 (oplog -> MENOROIGUAL exp .)
    COLON           reduce using rule 36 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 36 (oplog -> MENOROIGUAL exp .)


state 237

    (37) oplog -> IGUALIGUAL exp .

    AND             reduce using rule 37 (oplog -> IGUALIGUAL exp .)
    OR              reduce using rule 37 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 37 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 37 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 37 (oplog -> IGUALIGUAL exp .)
    FLECHITA        reduce using rule 37 (oplog -> IGUALIGUAL exp .)
    COLON           reduce using rule 37 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 37 (oplog -> IGUALIGUAL exp .)


state 238

    (101) expr -> MAS termino . expr
    (101) expr -> . MAS termino expr
    (102) expr -> . MENOS termino expr
    (103) expr -> . empty
    (150) empty -> .

    MAS             shift and go to state 190
    MENOS           shift and go to state 191
    MAYORQUE        reduce using rule 150 (empty -> .)
    MENORQUE        reduce using rule 150 (empty -> .)
    DIFERENTE       reduce using rule 150 (empty -> .)
    MAYOROIGUAL     reduce using rule 150 (empty -> .)
    MENOROIGUAL     reduce using rule 150 (empty -> .)
    IGUALIGUAL      reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    expr                           shift and go to state 272
    empty                          shift and go to state 192

state 239

    (102) expr -> MENOS termino . expr
    (101) expr -> . MAS termino expr
    (102) expr -> . MENOS termino expr
    (103) expr -> . empty
    (150) empty -> .

    MAS             shift and go to state 190
    MENOS           shift and go to state 191
    MAYORQUE        reduce using rule 150 (empty -> .)
    MENORQUE        reduce using rule 150 (empty -> .)
    DIFERENTE       reduce using rule 150 (empty -> .)
    MAYOROIGUAL     reduce using rule 150 (empty -> .)
    MENOROIGUAL     reduce using rule 150 (empty -> .)
    IGUALIGUAL      reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    expr                           shift and go to state 273
    empty                          shift and go to state 192

state 240

    (96) terminor -> POR factor . terminor
    (96) terminor -> . POR factor terminor
    (97) terminor -> . SOBRE factor terminor
    (98) terminor -> . empty
    (150) empty -> .

    POR             shift and go to state 194
    SOBRE           shift and go to state 195
    MAS             reduce using rule 150 (empty -> .)
    MENOS           reduce using rule 150 (empty -> .)
    MAYORQUE        reduce using rule 150 (empty -> .)
    MENORQUE        reduce using rule 150 (empty -> .)
    DIFERENTE       reduce using rule 150 (empty -> .)
    MAYOROIGUAL     reduce using rule 150 (empty -> .)
    MENOROIGUAL     reduce using rule 150 (empty -> .)
    IGUALIGUAL      reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    terminor                       shift and go to state 274
    empty                          shift and go to state 196

state 241

    (97) terminor -> SOBRE factor . terminor
    (96) terminor -> . POR factor terminor
    (97) terminor -> . SOBRE factor terminor
    (98) terminor -> . empty
    (150) empty -> .

    POR             shift and go to state 194
    SOBRE           shift and go to state 195
    MAS             reduce using rule 150 (empty -> .)
    MENOS           reduce using rule 150 (empty -> .)
    MAYORQUE        reduce using rule 150 (empty -> .)
    MENORQUE        reduce using rule 150 (empty -> .)
    DIFERENTE       reduce using rule 150 (empty -> .)
    MAYOROIGUAL     reduce using rule 150 (empty -> .)
    MENOROIGUAL     reduce using rule 150 (empty -> .)
    IGUALIGUAL      reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    terminor                       shift and go to state 275
    empty                          shift and go to state 196

state 242

    (21) varcte -> ID CORCHIZQ . varcte CORCHDER
    (14) varcte -> . ID
    (15) varcte -> . INTNUM
    (16) varcte -> . FLOATNUM
    (17) varcte -> . TRUE
    (18) varcte -> . FALSE
    (19) varcte -> . STRINGVAL
    (20) varcte -> . NULL
    (21) varcte -> . ID CORCHIZQ varcte CORCHDER
    (22) varcte -> . ID PUNTO ID varcte_param_fun
    (23) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 198
    INTNUM          shift and go to state 199
    FLOATNUM        shift and go to state 200
    TRUE            shift and go to state 201
    FALSE           shift and go to state 202
    STRINGVAL       shift and go to state 203
    NULL            shift and go to state 204

    varcte                         shift and go to state 276

state 243

    (22) varcte -> ID PUNTO . ID varcte_param_fun

    ID              shift and go to state 277


state 244

    (23) varcte -> ID PARIZQ . llamada_param PARDER
    (148) llamada_param -> . expresion expresionr
    (149) llamada_param -> . empty
    (26) expresion -> . megaexp
    (150) empty -> .
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty

    PARDER          reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146

    llamada_param                  shift and go to state 278
    expresion                      shift and go to state 137
    empty                          shift and go to state 138
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144

state 245

    (146) obj_call -> ID PUNTO ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 279


state 246

    (77) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (78) bloque2 -> . RETURN bloque3
    (79) bloque2 -> . empty
    (150) empty -> .

    RETURN          shift and go to state 258
    LLAVEDER        reduce using rule 150 (empty -> .)

    bloque2                        shift and go to state 280
    empty                          shift and go to state 259

state 247

    (74) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 74 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 74 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 74 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 74 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 74 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 74 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 74 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 74 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 74 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 248

    (84) escritura -> WRITE PARIZQ esc1 esc2 PARDER . COLON

    COLON           shift and go to state 281


state 249

    (87) esc2 -> COMA esc1 . esc2
    (87) esc2 -> . COMA esc1 esc2
    (88) esc2 -> . empty
    (150) empty -> .

    COMA            shift and go to state 211
    PARDER          reduce using rule 150 (empty -> .)

    esc2                           shift and go to state 282
    empty                          shift and go to state 212

state 250

    (110) for2 -> ID .
    (113) range -> ID . PUNTOSRANGO ID
    (114) range -> ID . PUNTOSRANGO INTNUM

    PARDER          reduce using rule 110 (for2 -> ID .)
    PUNTOSRANGO     shift and go to state 283


state 251

    (109) for -> FOR PARIZQ ID IN for2 . PARDER bloque

    PARDER          shift and go to state 284


state 252

    (111) for2 -> range .

    PARDER          reduce using rule 111 (for2 -> range .)


state 253

    (112) range -> INTNUM . PUNTOSRANGO INTNUM
    (115) range -> INTNUM . PUNTOSRANGO ID

    PUNTOSRANGO     shift and go to state 285


state 254

    (116) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 116 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 116 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 116 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 116 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 116 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 116 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 116 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 116 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 255

    (118) when2 -> expresion FLECHITA bloque . when2
    (118) when2 -> . expresion FLECHITA bloque when2
    (119) when2 -> . ELSE FLECHITA bloque
    (120) when2 -> . empty
    (26) expresion -> . megaexp
    (150) empty -> .
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty

    ELSE            shift and go to state 161
    LLAVEDER        reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146

    expresion                      shift and go to state 160
    when2                          shift and go to state 286
    empty                          shift and go to state 162
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144

state 256

    (119) when2 -> ELSE FLECHITA bloque .

    LLAVEDER        reduce using rule 119 (when2 -> ELSE FLECHITA bloque .)


state 257

    (128) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 287


state 258

    (78) bloque2 -> RETURN . bloque3
    (80) bloque3 -> . expresion COLON
    (81) bloque3 -> . empty
    (26) expresion -> . megaexp
    (150) empty -> .
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty

    LLAVEDER        reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146

    bloque3                        shift and go to state 288
    expresion                      shift and go to state 289
    empty                          shift and go to state 290
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144

state 259

    (79) bloque2 -> empty .

    LLAVEDER        reduce using rule 79 (bloque2 -> empty .)


state 260

    (61) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 291


state 261

    (68) asignacion2r -> COMA . expresion asignacion2r
    (26) expresion -> . megaexp
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)

    expresion                      shift and go to state 292
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144
    empty                          shift and go to state 149

state 262

    (69) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 69 (asignacion2r -> empty .)


state 263

    (62) asignacion2 -> READ PARIZQ assign_read . PARDER

    PARDER          shift and go to state 293


state 264

    (66) assign_read -> STRINGVAL .

    PARDER          reduce using rule 66 (assign_read -> STRINGVAL .)


state 265

    (67) assign_read -> empty .

    PARDER          reduce using rule 67 (assign_read -> empty .)


state 266

    (63) asignacion2 -> CID PARIZQ class_call_args . expresionr PARDER
    (27) expresionr -> . COMA expresion expresionr
    (28) expresionr -> . empty
    (150) empty -> .

    COMA            shift and go to state 175
    PARDER          reduce using rule 150 (empty -> .)

    expresionr                     shift and go to state 294
    empty                          shift and go to state 176

state 267

    (64) class_call_args -> expresion .

    COMA            reduce using rule 64 (class_call_args -> expresion .)
    PARDER          reduce using rule 64 (class_call_args -> expresion .)


state 268

    (65) class_call_args -> empty .
    (108) factor2 -> empty .

    COMA            reduce using rule 65 (class_call_args -> empty .)
    PARDER          reduce using rule 65 (class_call_args -> empty .)
    ID              reduce using rule 108 (factor2 -> empty .)
    INTNUM          reduce using rule 108 (factor2 -> empty .)
    FLOATNUM        reduce using rule 108 (factor2 -> empty .)
    TRUE            reduce using rule 108 (factor2 -> empty .)
    FALSE           reduce using rule 108 (factor2 -> empty .)
    STRINGVAL       reduce using rule 108 (factor2 -> empty .)
    NULL            reduce using rule 108 (factor2 -> empty .)


state 269

    (27) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 27 (expresionr -> COMA expresion expresionr .)


state 270

    (40) megaexpr -> AND superexp megaexpr .

    COMA            reduce using rule 40 (megaexpr -> AND superexp megaexpr .)
    PARDER          reduce using rule 40 (megaexpr -> AND superexp megaexpr .)
    CORCHDER        reduce using rule 40 (megaexpr -> AND superexp megaexpr .)
    FLECHITA        reduce using rule 40 (megaexpr -> AND superexp megaexpr .)
    COLON           reduce using rule 40 (megaexpr -> AND superexp megaexpr .)
    CORCHIZQ        reduce using rule 40 (megaexpr -> AND superexp megaexpr .)


state 271

    (41) megaexpr -> OR superexp megaexpr .

    COMA            reduce using rule 41 (megaexpr -> OR superexp megaexpr .)
    PARDER          reduce using rule 41 (megaexpr -> OR superexp megaexpr .)
    CORCHDER        reduce using rule 41 (megaexpr -> OR superexp megaexpr .)
    FLECHITA        reduce using rule 41 (megaexpr -> OR superexp megaexpr .)
    COLON           reduce using rule 41 (megaexpr -> OR superexp megaexpr .)
    CORCHIZQ        reduce using rule 41 (megaexpr -> OR superexp megaexpr .)


state 272

    (101) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 101 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 101 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 101 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 101 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 101 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 101 (expr -> MAS termino expr .)
    AND             reduce using rule 101 (expr -> MAS termino expr .)
    OR              reduce using rule 101 (expr -> MAS termino expr .)
    COMA            reduce using rule 101 (expr -> MAS termino expr .)
    PARDER          reduce using rule 101 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 101 (expr -> MAS termino expr .)
    FLECHITA        reduce using rule 101 (expr -> MAS termino expr .)
    COLON           reduce using rule 101 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 101 (expr -> MAS termino expr .)


state 273

    (102) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 102 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 102 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 102 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 102 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 102 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 102 (expr -> MENOS termino expr .)
    AND             reduce using rule 102 (expr -> MENOS termino expr .)
    OR              reduce using rule 102 (expr -> MENOS termino expr .)
    COMA            reduce using rule 102 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 102 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 102 (expr -> MENOS termino expr .)
    FLECHITA        reduce using rule 102 (expr -> MENOS termino expr .)
    COLON           reduce using rule 102 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 102 (expr -> MENOS termino expr .)


state 274

    (96) terminor -> POR factor terminor .

    MAS             reduce using rule 96 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 96 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 96 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 96 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 96 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 96 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 96 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 96 (terminor -> POR factor terminor .)
    AND             reduce using rule 96 (terminor -> POR factor terminor .)
    OR              reduce using rule 96 (terminor -> POR factor terminor .)
    COMA            reduce using rule 96 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 96 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 96 (terminor -> POR factor terminor .)
    FLECHITA        reduce using rule 96 (terminor -> POR factor terminor .)
    COLON           reduce using rule 96 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 96 (terminor -> POR factor terminor .)


state 275

    (97) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 97 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 97 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 97 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 97 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 97 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 97 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 97 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 97 (terminor -> SOBRE factor terminor .)
    AND             reduce using rule 97 (terminor -> SOBRE factor terminor .)
    OR              reduce using rule 97 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 97 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 97 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 97 (terminor -> SOBRE factor terminor .)
    FLECHITA        reduce using rule 97 (terminor -> SOBRE factor terminor .)
    COLON           reduce using rule 97 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 97 (terminor -> SOBRE factor terminor .)


state 276

    (21) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 295


state 277

    (22) varcte -> ID PUNTO ID . varcte_param_fun
    (24) varcte_param_fun -> . PARIZQ llamada_param PARDER
    (25) varcte_param_fun -> . empty
    (150) empty -> .

    PARIZQ          shift and go to state 297
    POR             reduce using rule 150 (empty -> .)
    SOBRE           reduce using rule 150 (empty -> .)
    MAS             reduce using rule 150 (empty -> .)
    MENOS           reduce using rule 150 (empty -> .)
    MAYORQUE        reduce using rule 150 (empty -> .)
    MENORQUE        reduce using rule 150 (empty -> .)
    DIFERENTE       reduce using rule 150 (empty -> .)
    MAYOROIGUAL     reduce using rule 150 (empty -> .)
    MENOROIGUAL     reduce using rule 150 (empty -> .)
    IGUALIGUAL      reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    COMA            reduce using rule 150 (empty -> .)
    PARDER          reduce using rule 150 (empty -> .)
    CORCHDER        reduce using rule 150 (empty -> .)
    FLECHITA        reduce using rule 150 (empty -> .)
    COLON           reduce using rule 150 (empty -> .)
    CORCHIZQ        reduce using rule 150 (empty -> .)

    varcte_param_fun               shift and go to state 296
    empty                          shift and go to state 298

state 278

    (23) varcte -> ID PARIZQ llamada_param . PARDER

    PARDER          shift and go to state 299


state 279

    (146) obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 300


state 280

    (77) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 301


state 281

    (84) escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .

    ID              reduce using rule 84 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    IF              reduce using rule 84 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WRITE           reduce using rule 84 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    FOR             reduce using rule 84 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHILE           reduce using rule 84 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHEN            reduce using rule 84 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    LLAVEDER        reduce using rule 84 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    RETURN          reduce using rule 84 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)


state 282

    (87) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 87 (esc2 -> COMA esc1 esc2 .)


state 283

    (113) range -> ID PUNTOSRANGO . ID
    (114) range -> ID PUNTOSRANGO . INTNUM

    ID              shift and go to state 302
    INTNUM          shift and go to state 303


state 284

    (109) for -> FOR PARIZQ ID IN for2 PARDER . bloque
    (77) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 208

    bloque                         shift and go to state 304

state 285

    (112) range -> INTNUM PUNTOSRANGO . INTNUM
    (115) range -> INTNUM PUNTOSRANGO . ID

    INTNUM          shift and go to state 305
    ID              shift and go to state 306


state 286

    (118) when2 -> expresion FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 118 (when2 -> expresion FLECHITA bloque when2 .)


state 287

    (128) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    PRIVATE         reduce using rule 128 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    FUN             reduce using rule 128 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    MAIN            reduce using rule 128 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 128 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 288

    (78) bloque2 -> RETURN bloque3 .

    LLAVEDER        reduce using rule 78 (bloque2 -> RETURN bloque3 .)


state 289

    (80) bloque3 -> expresion . COLON

    COLON           shift and go to state 307


state 290

    (81) bloque3 -> empty .
    (108) factor2 -> empty .

    LLAVEDER        reduce using rule 81 (bloque3 -> empty .)
    ID              reduce using rule 108 (factor2 -> empty .)
    INTNUM          reduce using rule 108 (factor2 -> empty .)
    FLOATNUM        reduce using rule 108 (factor2 -> empty .)
    TRUE            reduce using rule 108 (factor2 -> empty .)
    FALSE           reduce using rule 108 (factor2 -> empty .)
    STRINGVAL       reduce using rule 108 (factor2 -> empty .)
    NULL            reduce using rule 108 (factor2 -> empty .)


state 291

    (61) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    COLON           reduce using rule 61 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 292

    (68) asignacion2r -> COMA expresion . asignacion2r
    (68) asignacion2r -> . COMA expresion asignacion2r
    (69) asignacion2r -> . empty
    (150) empty -> .

    COMA            shift and go to state 261
    CORCHIZQ        reduce using rule 150 (empty -> .)

    asignacion2r                   shift and go to state 308
    empty                          shift and go to state 262

state 293

    (62) asignacion2 -> READ PARIZQ assign_read PARDER .

    COLON           reduce using rule 62 (asignacion2 -> READ PARIZQ assign_read PARDER .)


state 294

    (63) asignacion2 -> CID PARIZQ class_call_args expresionr . PARDER

    PARDER          shift and go to state 309


state 295

    (21) varcte -> ID CORCHIZQ varcte CORCHDER .

    POR             reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    AND             reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    OR              reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COMA            reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COLON           reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 21 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 296

    (22) varcte -> ID PUNTO ID varcte_param_fun .

    POR             reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    SOBRE           reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    MAS             reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    MENOS           reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    MAYORQUE        reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    MENORQUE        reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    DIFERENTE       reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    MAYOROIGUAL     reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    MENOROIGUAL     reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    IGUALIGUAL      reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    AND             reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    OR              reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    COMA            reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    PARDER          reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    CORCHDER        reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    FLECHITA        reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    COLON           reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)
    CORCHIZQ        reduce using rule 22 (varcte -> ID PUNTO ID varcte_param_fun .)


state 297

    (24) varcte_param_fun -> PARIZQ . llamada_param PARDER
    (148) llamada_param -> . expresion expresionr
    (149) llamada_param -> . empty
    (26) expresion -> . megaexp
    (150) empty -> .
    (39) megaexp -> . superexp megaexpr
    (31) superexp -> . exp oplog
    (100) exp -> . termino expr
    (99) termino -> . factor terminor
    (94) factor -> . PARIZQ expresion PARDER
    (95) factor -> . factor2 varcte
    (106) factor2 -> . MAS
    (107) factor2 -> . MENOS
    (108) factor2 -> . empty

    PARDER          reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    INTNUM          reduce using rule 150 (empty -> .)
    FLOATNUM        reduce using rule 150 (empty -> .)
    TRUE            reduce using rule 150 (empty -> .)
    FALSE           reduce using rule 150 (empty -> .)
    STRINGVAL       reduce using rule 150 (empty -> .)
    NULL            reduce using rule 150 (empty -> .)
    PARIZQ          shift and go to state 135
    MAS             shift and go to state 145
    MENOS           shift and go to state 146

    llamada_param                  shift and go to state 310
    expresion                      shift and go to state 137
    empty                          shift and go to state 138
    megaexp                        shift and go to state 139
    superexp                       shift and go to state 140
    exp                            shift and go to state 141
    termino                        shift and go to state 142
    factor                         shift and go to state 143
    factor2                        shift and go to state 144

state 298

    (25) varcte_param_fun -> empty .

    POR             reduce using rule 25 (varcte_param_fun -> empty .)
    SOBRE           reduce using rule 25 (varcte_param_fun -> empty .)
    MAS             reduce using rule 25 (varcte_param_fun -> empty .)
    MENOS           reduce using rule 25 (varcte_param_fun -> empty .)
    MAYORQUE        reduce using rule 25 (varcte_param_fun -> empty .)
    MENORQUE        reduce using rule 25 (varcte_param_fun -> empty .)
    DIFERENTE       reduce using rule 25 (varcte_param_fun -> empty .)
    MAYOROIGUAL     reduce using rule 25 (varcte_param_fun -> empty .)
    MENOROIGUAL     reduce using rule 25 (varcte_param_fun -> empty .)
    IGUALIGUAL      reduce using rule 25 (varcte_param_fun -> empty .)
    AND             reduce using rule 25 (varcte_param_fun -> empty .)
    OR              reduce using rule 25 (varcte_param_fun -> empty .)
    COMA            reduce using rule 25 (varcte_param_fun -> empty .)
    PARDER          reduce using rule 25 (varcte_param_fun -> empty .)
    CORCHDER        reduce using rule 25 (varcte_param_fun -> empty .)
    FLECHITA        reduce using rule 25 (varcte_param_fun -> empty .)
    COLON           reduce using rule 25 (varcte_param_fun -> empty .)
    CORCHIZQ        reduce using rule 25 (varcte_param_fun -> empty .)


state 299

    (23) varcte -> ID PARIZQ llamada_param PARDER .

    POR             reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    SOBRE           reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAS             reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOS           reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYORQUE        reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENORQUE        reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    DIFERENTE       reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYOROIGUAL     reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOROIGUAL     reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    IGUALIGUAL      reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    AND             reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    OR              reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    COMA            reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    PARDER          reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHDER        reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    FLECHITA        reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    COLON           reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHIZQ        reduce using rule 23 (varcte -> ID PARIZQ llamada_param PARDER .)


state 300

    (146) obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 146 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 146 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 146 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 146 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 146 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 146 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 146 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 146 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)


state 301

    (77) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    ID              reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    PARIZQ          reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MAS             reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MENOS           reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    TRUE            reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FALSE           reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRINGVAL       reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    NULL            reduce using rule 77 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 302

    (113) range -> ID PUNTOSRANGO ID .

    PARDER          reduce using rule 113 (range -> ID PUNTOSRANGO ID .)


state 303

    (114) range -> ID PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 114 (range -> ID PUNTOSRANGO INTNUM .)


state 304

    (109) for -> FOR PARIZQ ID IN for2 PARDER bloque .

    ID              reduce using rule 109 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    IF              reduce using rule 109 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WRITE           reduce using rule 109 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    FOR             reduce using rule 109 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHILE           reduce using rule 109 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHEN            reduce using rule 109 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    LLAVEDER        reduce using rule 109 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    RETURN          reduce using rule 109 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)


state 305

    (112) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 112 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 306

    (115) range -> INTNUM PUNTOSRANGO ID .

    PARDER          reduce using rule 115 (range -> INTNUM PUNTOSRANGO ID .)


state 307

    (80) bloque3 -> expresion COLON .

    LLAVEDER        reduce using rule 80 (bloque3 -> expresion COLON .)


state 308

    (68) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 68 (asignacion2r -> COMA expresion asignacion2r .)


state 309

    (63) asignacion2 -> CID PARIZQ class_call_args expresionr PARDER .

    COLON           reduce using rule 63 (asignacion2 -> CID PARIZQ class_call_args expresionr PARDER .)


state 310

    (24) varcte_param_fun -> PARIZQ llamada_param . PARDER

    PARDER          shift and go to state 311


state 311

    (24) varcte_param_fun -> PARIZQ llamada_param PARDER .

    POR             reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    SOBRE           reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MAS             reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MENOS           reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MAYORQUE        reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MENORQUE        reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    DIFERENTE       reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MAYOROIGUAL     reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MENOROIGUAL     reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    IGUALIGUAL      reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    AND             reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    OR              reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    COMA            reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    PARDER          reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    CORCHDER        reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    FLECHITA        reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    COLON           reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    CORCHIZQ        reduce using rule 24 (varcte_param_fun -> PARIZQ llamada_param PARDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 24 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 35 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 44 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 85 resolved as shift
WARNING: shift/reduce conflict for FOR in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for IF in state 91 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 91 resolved as shift
WARNING: shift/reduce conflict for FOR in state 91 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 91 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 92 resolved as shift
WARNING: shift/reduce conflict for FOR in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 92 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for IF in state 94 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 94 resolved as shift
WARNING: shift/reduce conflict for FOR in state 94 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 94 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 95 resolved as shift
WARNING: shift/reduce conflict for FOR in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 96 resolved as shift
WARNING: shift/reduce conflict for FOR in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 163 resolved as shift
WARNING: shift/reduce conflict for IF in state 163 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 163 resolved as shift
WARNING: shift/reduce conflict for FOR in state 163 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 163 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 163 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 198 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: shift/reduce conflict for IF in state 208 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 208 resolved as shift
WARNING: shift/reduce conflict for FOR in state 208 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 208 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 208 resolved as shift
WARNING: reduce/reduce conflict in state 97 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 97
WARNING: reduce/reduce conflict in state 97 resolved using rule (llamada -> empty)
WARNING: rejected rule (obj_call -> empty) in state 97
WARNING: reduce/reduce conflict in state 97 resolved using rule (estatuto -> empty)
WARNING: rejected rule (obj_call -> empty) in state 97
WARNING: reduce/reduce conflict in state 220 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 220
WARNING: reduce/reduce conflict in state 220 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 220
WARNING: reduce/reduce conflict in state 220 resolved using rule (llamada -> empty)
WARNING: rejected rule (obj_call -> empty) in state 220
WARNING: reduce/reduce conflict in state 220 resolved using rule (estatuto -> empty)
WARNING: rejected rule (obj_call -> empty) in state 220
WARNING: Rule (obj_call -> empty) is never reduced
WARNING: Rule (opc2 -> empty) is never reduced
