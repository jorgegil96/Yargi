Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    RANGE

Grammar

Rule 0     S' -> file
Rule 1     file -> class classr
Rule 2     classr -> class classr
Rule 3     classr -> empty
Rule 4     class -> CLASS CID classparams class2 body
Rule 5     class -> DATA CLASS CID classparams
Rule 6     class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER
Rule 7     class2 -> empty
Rule 8     classparams -> PARIZQ classparams2 PARDER
Rule 9     classparams -> empty
Rule 10    classparams2 -> vars3 tipo ID classparams3
Rule 11    classparams2 -> empty
Rule 12    classparams3 -> COMA vars3 tipo ID classparams3
Rule 13    classparams3 -> empty
Rule 14    varcte -> ID
Rule 15    varcte -> INTNUM
Rule 16    varcte -> FLOATNUM
Rule 17    varcte -> TRUE
Rule 18    varcte -> FALSE
Rule 19    varcte -> STRINGVAL
Rule 20    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 21    varcte -> ID PUNTO ID varcte_param_fun
Rule 22    varcte -> ID PARIZQ llamada_param PARDER
Rule 23    varcte_param_fun -> PARIZQ llamada_param PARDER
Rule 24    varcte_param_fun -> empty
Rule 25    expresion -> megaexp
Rule 26    expresionr -> COMA expresion expresionr
Rule 27    expresionr -> empty
Rule 28    expresion2 -> expresion expresionr
Rule 29    expresion2 -> empty
Rule 30    superexp -> exp oplog
Rule 31    oplog -> MAYORQUE exp
Rule 32    oplog -> MENORQUE exp
Rule 33    oplog -> DIFERENTE exp
Rule 34    oplog -> MAYOROIGUAL exp
Rule 35    oplog -> MENOROIGUAL exp
Rule 36    oplog -> IGUALIGUAL exp
Rule 37    oplog -> empty
Rule 38    megaexp -> superexp megaexpr
Rule 39    megaexpr -> AND superexp megaexpr
Rule 40    megaexpr -> OR superexp megaexpr
Rule 41    megaexpr -> empty
Rule 42    vars -> vars3 tipo vars2 COLON
Rule 43    vars -> vars3 tipo LIST vars2 COLON
Rule 44    varsr -> COMA ID varsr
Rule 45    varsr -> empty
Rule 46    vars2 -> ID varsr
Rule 47    vars3 -> PRIVATE
Rule 48    vars3 -> empty
Rule 49    estatuto -> asignacion estatuto
Rule 50    estatuto -> condicion estatuto
Rule 51    estatuto -> escritura estatuto
Rule 52    estatuto -> for estatuto
Rule 53    estatuto -> while estatuto
Rule 54    estatuto -> when estatuto
Rule 55    estatuto -> llamada estatuto
Rule 56    estatuto -> obj_call estatuto
Rule 57    estatuto -> empty
Rule 58    asignacion -> ID asignacion3 IGUAL asignacion2 COLON
Rule 59    asignacion2 -> expresion
Rule 60    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 61    asignacion2 -> READ PARIZQ assign_read PARDER
Rule 62    asignacion2 -> CID PARIZQ class_call_args expresionr PARDER
Rule 63    class_call_args -> expresion
Rule 64    class_call_args -> empty
Rule 65    assign_read -> STRINGVAL
Rule 66    assign_read -> empty
Rule 67    asignacion2r -> COMA expresion asignacion2r
Rule 68    asignacion2r -> empty
Rule 69    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 70    asignacion3 -> PUNTO ID
Rule 71    asignacion3 -> empty
Rule 72    condicion -> IF condicion2 estatutor
Rule 73    condicion2 -> PARIZQ expresion PARDER bloque
Rule 74    condicionr -> ELSE IF condicion2
Rule 75    condicionr -> empty
Rule 76    bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 77    bloque2 -> RETURN bloque3
Rule 78    bloque2 -> empty
Rule 79    bloque3 -> expresion COLON
Rule 80    bloque3 -> empty
Rule 81    estatutor -> ELSE bloque
Rule 82    estatutor -> empty
Rule 83    escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON
Rule 84    esc1 -> expresion
Rule 85    esc1 -> STRING
Rule 86    esc2 -> COMA esc1 esc2
Rule 87    esc2 -> empty
Rule 88    tipo -> INT
Rule 89    tipo -> FLOAT
Rule 90    tipo -> BOOL
Rule 91    tipo -> STRING
Rule 92    tipo -> CID
Rule 93    factor -> PARIZQ expresion PARDER
Rule 94    factor -> factor2 varcte
Rule 95    terminor -> POR factor terminor
Rule 96    terminor -> SOBRE factor terminor
Rule 97    terminor -> empty
Rule 98    termino -> factor terminor
Rule 99    exp -> termino expr
Rule 100   expr -> MAS termino expr
Rule 101   expr -> MENOS termino expr
Rule 102   expr -> empty
Rule 103   varcter -> COMA varcte varcter
Rule 104   varcter -> empty
Rule 105   factor2 -> MAS
Rule 106   factor2 -> MENOS
Rule 107   factor2 -> empty
Rule 108   for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 109   for2 -> ID
Rule 110   for2 -> range
Rule 111   range -> INTNUM PUNTOSRANGO INTNUM
Rule 112   range -> ID PUNTOSRANGO ID
Rule 113   range -> ID PUNTOSRANGO INTNUM
Rule 114   range -> INTNUM PUNTOSRANGO ID
Rule 115   while -> WHILE PARIZQ expresion PARDER bloque
Rule 116   when -> WHEN LLAVEIZQ when2 LLAVEDER
Rule 117   when2 -> expresion FLECHITA bloque when2
Rule 118   when2 -> ELSE FLECHITA bloque
Rule 119   when2 -> empty
Rule 120   fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 121   fun2 -> tipo ID funparamr
Rule 122   fun2 -> empty
Rule 123   funparamr -> COMA tipo ID funparamr
Rule 124   funparamr -> empty
Rule 125   fun3 -> DOSPUNTOS tipo
Rule 126   fun3 -> empty
Rule 127   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 128   opc1 -> vars multvarsdecl
Rule 129   opc1 -> empty
Rule 130   opc2 -> estatuto
Rule 131   opc2 -> empty
Rule 132   body -> LLAVEIZQ body2 funr body_main LLAVEDER
Rule 133   body -> empty
Rule 134   body_main -> MAIN PARIZQ PARDER mainbloque
Rule 135   body_main -> empty
Rule 136   body2 -> vars multvarsdecl
Rule 137   body2 -> empty
Rule 138   mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER
Rule 139   multvarsdecl -> vars
Rule 140   multvarsdecl -> empty
Rule 141   funr -> fun funr
Rule 142   funr -> empty
Rule 143   llamada -> ID PARIZQ llamada_param PARDER COLON
Rule 144   llamada -> empty
Rule 145   obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON
Rule 146   obj_call -> empty
Rule 147   llamada_param -> expresion expresionr
Rule 148   llamada_param -> empty
Rule 149   empty -> <empty>

Terminals, with rules where they appear

AND                  : 39
BOOL                 : 90
CID                  : 4 5 62 92
CLASS                : 4 5
COLON                : 42 43 58 79 83 143 145
COMA                 : 12 26 44 67 86 103 123
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 20 60 69
CORCHIZQ             : 20 60 69
DATA                 : 5
DIFERENTE            : 33
DOSPUNTOS            : 6 125
ELSE                 : 74 81 118
EOL                  : 
FALSE                : 18
FLECHITA             : 117 118
FLOAT                : 89
FLOATNUM             : 16
FOR                  : 108
FUN                  : 120
GLOBAL               : 
ID                   : 6 10 12 14 20 21 21 22 44 46 58 70 108 109 112 112 113 114 120 121 123 143 145 145
IF                   : 72 74
IGUAL                : 58
IGUALIGUAL           : 36
IN                   : 108
INT                  : 88
INTNUM               : 15 111 111 113 114
LIST                 : 43
LLAVEDER             : 76 116 127 132 138
LLAVEIZQ             : 76 116 127 132 138
MAIN                 : 134
MAS                  : 100 105
MAYOROIGUAL          : 34
MAYORQUE             : 31
MENOROIGUAL          : 35
MENORQUE             : 32
MENOS                : 101 106
OR                   : 40
PARDER               : 6 8 22 23 61 62 73 83 93 108 115 120 134 143 145
PARIZQ               : 6 8 22 23 61 62 73 83 93 108 115 120 134 143 145
POR                  : 95
PRIVATE              : 47
PUNTO                : 21 70 145
PUNTOSRANGO          : 111 112 113 114
RANGE                : 
READ                 : 61
RETURN               : 77
SOBRE                : 96
STRING               : 85 91
STRINGVAL            : 19 65
TRUE                 : 17
WHEN                 : 116
WHILE                : 115
WRITE                : 83
error                : 

Nonterminals, with rules where they appear

asignacion           : 49
asignacion2          : 58
asignacion2r         : 60 67
asignacion3          : 58
assign_read          : 61
bloque               : 73 81 108 115 117 118
bloque2              : 76 127
bloque3              : 77
body                 : 4
body2                : 132 138
body_main            : 132
class                : 1 2
class2               : 4
class_call_args      : 62
classparams          : 4 5
classparams2         : 8
classparams3         : 10 12
classr               : 1 2
condicion            : 50
condicion2           : 72 74
condicionr           : 
empty                : 3 7 9 11 13 24 27 29 37 41 45 48 57 64 66 68 71 75 78 80 82 87 97 102 104 107 119 122 124 126 129 131 133 135 137 140 142 144 146 148
esc1                 : 83 86
esc2                 : 83 86
escritura            : 51
estatuto             : 49 50 51 52 53 54 55 56 76 130 138
estatutor            : 72
exp                  : 30 31 32 33 34 35 36
expr                 : 99 100 101
expresion            : 26 28 59 60 63 67 69 73 79 84 93 115 117 147
expresion2           : 
expresionr           : 26 28 62 147
factor               : 95 96 98
factor2              : 94
file                 : 0
for                  : 52
for2                 : 108
fun                  : 141
fun2                 : 120
fun3                 : 120
funbody              : 120
funparamr            : 121 123
funr                 : 132 141
llamada              : 55
llamada_param        : 22 23 143 145
mainbloque           : 134
megaexp              : 25
megaexpr             : 38 39 40
multvarsdecl         : 128 136
obj_call             : 56
opc1                 : 127
opc2                 : 127
oplog                : 30
range                : 110
superexp             : 38 39 40
termino              : 99 100 101
terminor             : 95 96 98
tipo                 : 10 12 42 43 121 123 125
varcte               : 20 94 103
varcte_param_fun     : 21
varcter              : 103
vars                 : 128 136 139
vars2                : 6 42 43
vars3                : 10 12 42 43 120
varsr                : 44 46
when                 : 54
when2                : 116 117
while                : 53

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . class classr
    (4) class -> . CLASS CID classparams class2 body
    (5) class -> . DATA CLASS CID classparams

    CLASS           shift and go to state 3
    DATA            shift and go to state 4

    file                           shift and go to state 1
    class                          shift and go to state 2

state 1

    (0) S' -> file .



state 2

    (1) file -> class . classr
    (2) classr -> . class classr
    (3) classr -> . empty
    (4) class -> . CLASS CID classparams class2 body
    (5) class -> . DATA CLASS CID classparams
    (149) empty -> .

    CLASS           shift and go to state 3
    DATA            shift and go to state 4
    $end            reduce using rule 149 (empty -> .)

    class                          shift and go to state 5
    classr                         shift and go to state 6
    empty                          shift and go to state 7

state 3

    (4) class -> CLASS . CID classparams class2 body

    CID             shift and go to state 8


state 4

    (5) class -> DATA . CLASS CID classparams

    CLASS           shift and go to state 9


state 5

    (2) classr -> class . classr
    (2) classr -> . class classr
    (3) classr -> . empty
    (4) class -> . CLASS CID classparams class2 body
    (5) class -> . DATA CLASS CID classparams
    (149) empty -> .

    CLASS           shift and go to state 3
    DATA            shift and go to state 4
    $end            reduce using rule 149 (empty -> .)

    class                          shift and go to state 5
    classr                         shift and go to state 10
    empty                          shift and go to state 7

state 6

    (1) file -> class classr .

    $end            reduce using rule 1 (file -> class classr .)


state 7

    (3) classr -> empty .

    $end            reduce using rule 3 (classr -> empty .)


state 8

    (4) class -> CLASS CID . classparams class2 body
    (8) classparams -> . PARIZQ classparams2 PARDER
    (9) classparams -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 12
    DOSPUNTOS       reduce using rule 149 (empty -> .)
    LLAVEIZQ        reduce using rule 149 (empty -> .)
    CLASS           reduce using rule 149 (empty -> .)
    DATA            reduce using rule 149 (empty -> .)
    $end            reduce using rule 149 (empty -> .)

    classparams                    shift and go to state 11
    empty                          shift and go to state 13

state 9

    (5) class -> DATA CLASS . CID classparams

    CID             shift and go to state 14


state 10

    (2) classr -> class classr .

    $end            reduce using rule 2 (classr -> class classr .)


state 11

    (4) class -> CLASS CID classparams . class2 body
    (6) class2 -> . DOSPUNTOS ID PARIZQ vars2 PARDER
    (7) class2 -> . empty
    (149) empty -> .

    DOSPUNTOS       shift and go to state 16
    LLAVEIZQ        reduce using rule 149 (empty -> .)
    CLASS           reduce using rule 149 (empty -> .)
    DATA            reduce using rule 149 (empty -> .)
    $end            reduce using rule 149 (empty -> .)

    class2                         shift and go to state 15
    empty                          shift and go to state 17

state 12

    (8) classparams -> PARIZQ . classparams2 PARDER
    (10) classparams2 -> . vars3 tipo ID classparams3
    (11) classparams2 -> . empty
    (47) vars3 -> . PRIVATE
    (48) vars3 -> . empty
    (149) empty -> .

    PRIVATE         shift and go to state 21
    PARDER          reduce using rule 149 (empty -> .)
    INT             reduce using rule 149 (empty -> .)
    FLOAT           reduce using rule 149 (empty -> .)
    BOOL            reduce using rule 149 (empty -> .)
    STRING          reduce using rule 149 (empty -> .)
    CID             reduce using rule 149 (empty -> .)

    classparams2                   shift and go to state 18
    vars3                          shift and go to state 19
    empty                          shift and go to state 20

state 13

    (9) classparams -> empty .

    DOSPUNTOS       reduce using rule 9 (classparams -> empty .)
    LLAVEIZQ        reduce using rule 9 (classparams -> empty .)
    CLASS           reduce using rule 9 (classparams -> empty .)
    DATA            reduce using rule 9 (classparams -> empty .)
    $end            reduce using rule 9 (classparams -> empty .)


state 14

    (5) class -> DATA CLASS CID . classparams
    (8) classparams -> . PARIZQ classparams2 PARDER
    (9) classparams -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 12
    CLASS           reduce using rule 149 (empty -> .)
    DATA            reduce using rule 149 (empty -> .)
    $end            reduce using rule 149 (empty -> .)

    classparams                    shift and go to state 22
    empty                          shift and go to state 13

state 15

    (4) class -> CLASS CID classparams class2 . body
    (132) body -> . LLAVEIZQ body2 funr body_main LLAVEDER
    (133) body -> . empty
    (149) empty -> .

    LLAVEIZQ        shift and go to state 24
    CLASS           reduce using rule 149 (empty -> .)
    DATA            reduce using rule 149 (empty -> .)
    $end            reduce using rule 149 (empty -> .)

    body                           shift and go to state 23
    empty                          shift and go to state 25

state 16

    (6) class2 -> DOSPUNTOS . ID PARIZQ vars2 PARDER

    ID              shift and go to state 26


state 17

    (7) class2 -> empty .

    LLAVEIZQ        reduce using rule 7 (class2 -> empty .)
    CLASS           reduce using rule 7 (class2 -> empty .)
    DATA            reduce using rule 7 (class2 -> empty .)
    $end            reduce using rule 7 (class2 -> empty .)


state 18

    (8) classparams -> PARIZQ classparams2 . PARDER

    PARDER          shift and go to state 27


state 19

    (10) classparams2 -> vars3 . tipo ID classparams3
    (88) tipo -> . INT
    (89) tipo -> . FLOAT
    (90) tipo -> . BOOL
    (91) tipo -> . STRING
    (92) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 28

state 20

    (11) classparams2 -> empty .
    (48) vars3 -> empty .

    PARDER          reduce using rule 11 (classparams2 -> empty .)
    INT             reduce using rule 48 (vars3 -> empty .)
    FLOAT           reduce using rule 48 (vars3 -> empty .)
    BOOL            reduce using rule 48 (vars3 -> empty .)
    STRING          reduce using rule 48 (vars3 -> empty .)
    CID             reduce using rule 48 (vars3 -> empty .)


state 21

    (47) vars3 -> PRIVATE .

    INT             reduce using rule 47 (vars3 -> PRIVATE .)
    FLOAT           reduce using rule 47 (vars3 -> PRIVATE .)
    BOOL            reduce using rule 47 (vars3 -> PRIVATE .)
    STRING          reduce using rule 47 (vars3 -> PRIVATE .)
    CID             reduce using rule 47 (vars3 -> PRIVATE .)
    FUN             reduce using rule 47 (vars3 -> PRIVATE .)


state 22

    (5) class -> DATA CLASS CID classparams .

    CLASS           reduce using rule 5 (class -> DATA CLASS CID classparams .)
    DATA            reduce using rule 5 (class -> DATA CLASS CID classparams .)
    $end            reduce using rule 5 (class -> DATA CLASS CID classparams .)


state 23

    (4) class -> CLASS CID classparams class2 body .

    CLASS           reduce using rule 4 (class -> CLASS CID classparams class2 body .)
    DATA            reduce using rule 4 (class -> CLASS CID classparams class2 body .)
    $end            reduce using rule 4 (class -> CLASS CID classparams class2 body .)


state 24

    (132) body -> LLAVEIZQ . body2 funr body_main LLAVEDER
    (136) body2 -> . vars multvarsdecl
    (137) body2 -> . empty
    (42) vars -> . vars3 tipo vars2 COLON
    (43) vars -> . vars3 tipo LIST vars2 COLON
    (149) empty -> .
    (47) vars3 -> . PRIVATE
    (48) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)
    FUN             reduce using rule 149 (empty -> .)
    INT             reduce using rule 149 (empty -> .)
    FLOAT           reduce using rule 149 (empty -> .)
    BOOL            reduce using rule 149 (empty -> .)
    STRING          reduce using rule 149 (empty -> .)
    CID             reduce using rule 149 (empty -> .)
    PRIVATE         shift and go to state 21

  ! PRIVATE         [ reduce using rule 149 (empty -> .) ]

    body2                          shift and go to state 34
    vars                           shift and go to state 35
    empty                          shift and go to state 36
    vars3                          shift and go to state 37

state 25

    (133) body -> empty .

    CLASS           reduce using rule 133 (body -> empty .)
    DATA            reduce using rule 133 (body -> empty .)
    $end            reduce using rule 133 (body -> empty .)


state 26

    (6) class2 -> DOSPUNTOS ID . PARIZQ vars2 PARDER

    PARIZQ          shift and go to state 38


state 27

    (8) classparams -> PARIZQ classparams2 PARDER .

    DOSPUNTOS       reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    LLAVEIZQ        reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    CLASS           reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    DATA            reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    $end            reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)


state 28

    (10) classparams2 -> vars3 tipo . ID classparams3

    ID              shift and go to state 39


state 29

    (88) tipo -> INT .

    ID              reduce using rule 88 (tipo -> INT .)
    LIST            reduce using rule 88 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 88 (tipo -> INT .)


state 30

    (89) tipo -> FLOAT .

    ID              reduce using rule 89 (tipo -> FLOAT .)
    LIST            reduce using rule 89 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 89 (tipo -> FLOAT .)


state 31

    (90) tipo -> BOOL .

    ID              reduce using rule 90 (tipo -> BOOL .)
    LIST            reduce using rule 90 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 90 (tipo -> BOOL .)


state 32

    (91) tipo -> STRING .

    ID              reduce using rule 91 (tipo -> STRING .)
    LIST            reduce using rule 91 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 91 (tipo -> STRING .)


state 33

    (92) tipo -> CID .

    ID              reduce using rule 92 (tipo -> CID .)
    LIST            reduce using rule 92 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 92 (tipo -> CID .)


state 34

    (132) body -> LLAVEIZQ body2 . funr body_main LLAVEDER
    (141) funr -> . fun funr
    (142) funr -> . empty
    (120) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (149) empty -> .
    (47) vars3 -> . PRIVATE
    (48) vars3 -> . empty

    MAIN            reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)
    FUN             reduce using rule 149 (empty -> .)
    PRIVATE         shift and go to state 21

    funr                           shift and go to state 40
    fun                            shift and go to state 41
    empty                          shift and go to state 42
    vars3                          shift and go to state 43

state 35

    (136) body2 -> vars . multvarsdecl
    (139) multvarsdecl -> . vars
    (140) multvarsdecl -> . empty
    (42) vars -> . vars3 tipo vars2 COLON
    (43) vars -> . vars3 tipo LIST vars2 COLON
    (149) empty -> .
    (47) vars3 -> . PRIVATE
    (48) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)
    FUN             reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WRITE           reduce using rule 149 (empty -> .)
    FOR             reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    WHEN            reduce using rule 149 (empty -> .)
    INT             reduce using rule 149 (empty -> .)
    FLOAT           reduce using rule 149 (empty -> .)
    BOOL            reduce using rule 149 (empty -> .)
    STRING          reduce using rule 149 (empty -> .)
    CID             reduce using rule 149 (empty -> .)
    PRIVATE         shift and go to state 21

  ! PRIVATE         [ reduce using rule 149 (empty -> .) ]

    vars                           shift and go to state 44
    multvarsdecl                   shift and go to state 45
    empty                          shift and go to state 46
    vars3                          shift and go to state 37

state 36

    (137) body2 -> empty .
    (48) vars3 -> empty .

    PRIVATE         reduce using rule 137 (body2 -> empty .)
    MAIN            reduce using rule 137 (body2 -> empty .)
    LLAVEDER        reduce using rule 137 (body2 -> empty .)
    FUN             reduce using rule 137 (body2 -> empty .)
    ID              reduce using rule 137 (body2 -> empty .)
    IF              reduce using rule 137 (body2 -> empty .)
    WRITE           reduce using rule 137 (body2 -> empty .)
    FOR             reduce using rule 137 (body2 -> empty .)
    WHILE           reduce using rule 137 (body2 -> empty .)
    WHEN            reduce using rule 137 (body2 -> empty .)
    INT             reduce using rule 48 (vars3 -> empty .)
    FLOAT           reduce using rule 48 (vars3 -> empty .)
    BOOL            reduce using rule 48 (vars3 -> empty .)
    STRING          reduce using rule 48 (vars3 -> empty .)
    CID             reduce using rule 48 (vars3 -> empty .)


state 37

    (42) vars -> vars3 . tipo vars2 COLON
    (43) vars -> vars3 . tipo LIST vars2 COLON
    (88) tipo -> . INT
    (89) tipo -> . FLOAT
    (90) tipo -> . BOOL
    (91) tipo -> . STRING
    (92) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 47

state 38

    (6) class2 -> DOSPUNTOS ID PARIZQ . vars2 PARDER
    (46) vars2 -> . ID varsr

    ID              shift and go to state 48

    vars2                          shift and go to state 49

state 39

    (10) classparams2 -> vars3 tipo ID . classparams3
    (12) classparams3 -> . COMA vars3 tipo ID classparams3
    (13) classparams3 -> . empty
    (149) empty -> .

    COMA            shift and go to state 51
    PARDER          reduce using rule 149 (empty -> .)

    classparams3                   shift and go to state 50
    empty                          shift and go to state 52

state 40

    (132) body -> LLAVEIZQ body2 funr . body_main LLAVEDER
    (134) body_main -> . MAIN PARIZQ PARDER mainbloque
    (135) body_main -> . empty
    (149) empty -> .

    MAIN            shift and go to state 54
    LLAVEDER        reduce using rule 149 (empty -> .)

    body_main                      shift and go to state 53
    empty                          shift and go to state 55

state 41

    (141) funr -> fun . funr
    (141) funr -> . fun funr
    (142) funr -> . empty
    (120) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (149) empty -> .
    (47) vars3 -> . PRIVATE
    (48) vars3 -> . empty

    MAIN            reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)
    FUN             reduce using rule 149 (empty -> .)
    PRIVATE         shift and go to state 21

    fun                            shift and go to state 41
    funr                           shift and go to state 56
    empty                          shift and go to state 42
    vars3                          shift and go to state 43

state 42

    (142) funr -> empty .
    (48) vars3 -> empty .

    MAIN            reduce using rule 142 (funr -> empty .)
    LLAVEDER        reduce using rule 142 (funr -> empty .)
    FUN             reduce using rule 48 (vars3 -> empty .)


state 43

    (120) fun -> vars3 . FUN ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 57


state 44

    (139) multvarsdecl -> vars .

    PRIVATE         reduce using rule 139 (multvarsdecl -> vars .)
    MAIN            reduce using rule 139 (multvarsdecl -> vars .)
    LLAVEDER        reduce using rule 139 (multvarsdecl -> vars .)
    FUN             reduce using rule 139 (multvarsdecl -> vars .)
    ID              reduce using rule 139 (multvarsdecl -> vars .)
    IF              reduce using rule 139 (multvarsdecl -> vars .)
    WRITE           reduce using rule 139 (multvarsdecl -> vars .)
    FOR             reduce using rule 139 (multvarsdecl -> vars .)
    WHILE           reduce using rule 139 (multvarsdecl -> vars .)
    WHEN            reduce using rule 139 (multvarsdecl -> vars .)
    RETURN          reduce using rule 139 (multvarsdecl -> vars .)


state 45

    (136) body2 -> vars multvarsdecl .

    PRIVATE         reduce using rule 136 (body2 -> vars multvarsdecl .)
    MAIN            reduce using rule 136 (body2 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 136 (body2 -> vars multvarsdecl .)
    FUN             reduce using rule 136 (body2 -> vars multvarsdecl .)
    ID              reduce using rule 136 (body2 -> vars multvarsdecl .)
    IF              reduce using rule 136 (body2 -> vars multvarsdecl .)
    WRITE           reduce using rule 136 (body2 -> vars multvarsdecl .)
    FOR             reduce using rule 136 (body2 -> vars multvarsdecl .)
    WHILE           reduce using rule 136 (body2 -> vars multvarsdecl .)
    WHEN            reduce using rule 136 (body2 -> vars multvarsdecl .)


state 46

    (140) multvarsdecl -> empty .
    (48) vars3 -> empty .

    PRIVATE         reduce using rule 140 (multvarsdecl -> empty .)
    MAIN            reduce using rule 140 (multvarsdecl -> empty .)
    LLAVEDER        reduce using rule 140 (multvarsdecl -> empty .)
    FUN             reduce using rule 140 (multvarsdecl -> empty .)
    ID              reduce using rule 140 (multvarsdecl -> empty .)
    IF              reduce using rule 140 (multvarsdecl -> empty .)
    WRITE           reduce using rule 140 (multvarsdecl -> empty .)
    FOR             reduce using rule 140 (multvarsdecl -> empty .)
    WHILE           reduce using rule 140 (multvarsdecl -> empty .)
    WHEN            reduce using rule 140 (multvarsdecl -> empty .)
    RETURN          reduce using rule 140 (multvarsdecl -> empty .)
    INT             reduce using rule 48 (vars3 -> empty .)
    FLOAT           reduce using rule 48 (vars3 -> empty .)
    BOOL            reduce using rule 48 (vars3 -> empty .)
    STRING          reduce using rule 48 (vars3 -> empty .)
    CID             reduce using rule 48 (vars3 -> empty .)


state 47

    (42) vars -> vars3 tipo . vars2 COLON
    (43) vars -> vars3 tipo . LIST vars2 COLON
    (46) vars2 -> . ID varsr

    LIST            shift and go to state 59
    ID              shift and go to state 48

    vars2                          shift and go to state 58

state 48

    (46) vars2 -> ID . varsr
    (44) varsr -> . COMA ID varsr
    (45) varsr -> . empty
    (149) empty -> .

    COMA            shift and go to state 61
    PARDER          reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)

    varsr                          shift and go to state 60
    empty                          shift and go to state 62

state 49

    (6) class2 -> DOSPUNTOS ID PARIZQ vars2 . PARDER

    PARDER          shift and go to state 63


state 50

    (10) classparams2 -> vars3 tipo ID classparams3 .

    PARDER          reduce using rule 10 (classparams2 -> vars3 tipo ID classparams3 .)


state 51

    (12) classparams3 -> COMA . vars3 tipo ID classparams3
    (47) vars3 -> . PRIVATE
    (48) vars3 -> . empty
    (149) empty -> .

    PRIVATE         shift and go to state 21
    INT             reduce using rule 149 (empty -> .)
    FLOAT           reduce using rule 149 (empty -> .)
    BOOL            reduce using rule 149 (empty -> .)
    STRING          reduce using rule 149 (empty -> .)
    CID             reduce using rule 149 (empty -> .)

    vars3                          shift and go to state 64
    empty                          shift and go to state 65

state 52

    (13) classparams3 -> empty .

    PARDER          reduce using rule 13 (classparams3 -> empty .)


state 53

    (132) body -> LLAVEIZQ body2 funr body_main . LLAVEDER

    LLAVEDER        shift and go to state 66


state 54

    (134) body_main -> MAIN . PARIZQ PARDER mainbloque

    PARIZQ          shift and go to state 67


state 55

    (135) body_main -> empty .

    LLAVEDER        reduce using rule 135 (body_main -> empty .)


state 56

    (141) funr -> fun funr .

    MAIN            reduce using rule 141 (funr -> fun funr .)
    LLAVEDER        reduce using rule 141 (funr -> fun funr .)


state 57

    (120) fun -> vars3 FUN . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 68


state 58

    (42) vars -> vars3 tipo vars2 . COLON

    COLON           shift and go to state 69


state 59

    (43) vars -> vars3 tipo LIST . vars2 COLON
    (46) vars2 -> . ID varsr

    ID              shift and go to state 48

    vars2                          shift and go to state 70

state 60

    (46) vars2 -> ID varsr .

    PARDER          reduce using rule 46 (vars2 -> ID varsr .)
    COLON           reduce using rule 46 (vars2 -> ID varsr .)


state 61

    (44) varsr -> COMA . ID varsr

    ID              shift and go to state 71


state 62

    (45) varsr -> empty .

    PARDER          reduce using rule 45 (varsr -> empty .)
    COLON           reduce using rule 45 (varsr -> empty .)


state 63

    (6) class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .

    LLAVEIZQ        reduce using rule 6 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)
    CLASS           reduce using rule 6 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)
    DATA            reduce using rule 6 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)
    $end            reduce using rule 6 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)


state 64

    (12) classparams3 -> COMA vars3 . tipo ID classparams3
    (88) tipo -> . INT
    (89) tipo -> . FLOAT
    (90) tipo -> . BOOL
    (91) tipo -> . STRING
    (92) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 72

state 65

    (48) vars3 -> empty .

    INT             reduce using rule 48 (vars3 -> empty .)
    FLOAT           reduce using rule 48 (vars3 -> empty .)
    BOOL            reduce using rule 48 (vars3 -> empty .)
    STRING          reduce using rule 48 (vars3 -> empty .)
    CID             reduce using rule 48 (vars3 -> empty .)


state 66

    (132) body -> LLAVEIZQ body2 funr body_main LLAVEDER .

    CLASS           reduce using rule 132 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)
    DATA            reduce using rule 132 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)
    $end            reduce using rule 132 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)


state 67

    (134) body_main -> MAIN PARIZQ . PARDER mainbloque

    PARDER          shift and go to state 73


state 68

    (120) fun -> vars3 FUN ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 74


state 69

    (42) vars -> vars3 tipo vars2 COLON .

    PRIVATE         reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    INT             reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    FLOAT           reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    BOOL            reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    STRING          reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    CID             reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    MAIN            reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    LLAVEDER        reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    FUN             reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    ID              reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    IF              reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    WRITE           reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    FOR             reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    WHILE           reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    WHEN            reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)
    RETURN          reduce using rule 42 (vars -> vars3 tipo vars2 COLON .)


state 70

    (43) vars -> vars3 tipo LIST vars2 . COLON

    COLON           shift and go to state 75


state 71

    (44) varsr -> COMA ID . varsr
    (44) varsr -> . COMA ID varsr
    (45) varsr -> . empty
    (149) empty -> .

    COMA            shift and go to state 61
    PARDER          reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)

    varsr                          shift and go to state 76
    empty                          shift and go to state 62

state 72

    (12) classparams3 -> COMA vars3 tipo . ID classparams3

    ID              shift and go to state 77


state 73

    (134) body_main -> MAIN PARIZQ PARDER . mainbloque
    (138) mainbloque -> . LLAVEIZQ body2 estatuto LLAVEDER

    LLAVEIZQ        shift and go to state 79

    mainbloque                     shift and go to state 78

state 74

    (120) fun -> vars3 FUN ID PARIZQ . fun2 PARDER fun3 funbody
    (121) fun2 -> . tipo ID funparamr
    (122) fun2 -> . empty
    (88) tipo -> . INT
    (89) tipo -> . FLOAT
    (90) tipo -> . BOOL
    (91) tipo -> . STRING
    (92) tipo -> . CID
    (149) empty -> .

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33
    PARDER          reduce using rule 149 (empty -> .)

    fun2                           shift and go to state 80
    tipo                           shift and go to state 81
    empty                          shift and go to state 82

state 75

    (43) vars -> vars3 tipo LIST vars2 COLON .

    PRIVATE         reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    INT             reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    FLOAT           reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    BOOL            reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    STRING          reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    CID             reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    MAIN            reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    LLAVEDER        reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    FUN             reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    ID              reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    IF              reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    WRITE           reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    FOR             reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    WHILE           reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    WHEN            reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)
    RETURN          reduce using rule 43 (vars -> vars3 tipo LIST vars2 COLON .)


state 76

    (44) varsr -> COMA ID varsr .

    PARDER          reduce using rule 44 (varsr -> COMA ID varsr .)
    COLON           reduce using rule 44 (varsr -> COMA ID varsr .)


state 77

    (12) classparams3 -> COMA vars3 tipo ID . classparams3
    (12) classparams3 -> . COMA vars3 tipo ID classparams3
    (13) classparams3 -> . empty
    (149) empty -> .

    COMA            shift and go to state 51
    PARDER          reduce using rule 149 (empty -> .)

    classparams3                   shift and go to state 83
    empty                          shift and go to state 52

state 78

    (134) body_main -> MAIN PARIZQ PARDER mainbloque .

    LLAVEDER        reduce using rule 134 (body_main -> MAIN PARIZQ PARDER mainbloque .)


state 79

    (138) mainbloque -> LLAVEIZQ . body2 estatuto LLAVEDER
    (136) body2 -> . vars multvarsdecl
    (137) body2 -> . empty
    (42) vars -> . vars3 tipo vars2 COLON
    (43) vars -> . vars3 tipo LIST vars2 COLON
    (149) empty -> .
    (47) vars3 -> . PRIVATE
    (48) vars3 -> . empty

    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WRITE           reduce using rule 149 (empty -> .)
    FOR             reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    WHEN            reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)
    INT             reduce using rule 149 (empty -> .)
    FLOAT           reduce using rule 149 (empty -> .)
    BOOL            reduce using rule 149 (empty -> .)
    STRING          reduce using rule 149 (empty -> .)
    CID             reduce using rule 149 (empty -> .)
    PRIVATE         shift and go to state 21

    body2                          shift and go to state 84
    vars                           shift and go to state 35
    empty                          shift and go to state 36
    vars3                          shift and go to state 37

state 80

    (120) fun -> vars3 FUN ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 85


state 81

    (121) fun2 -> tipo . ID funparamr

    ID              shift and go to state 86


state 82

    (122) fun2 -> empty .

    PARDER          reduce using rule 122 (fun2 -> empty .)


state 83

    (12) classparams3 -> COMA vars3 tipo ID classparams3 .

    PARDER          reduce using rule 12 (classparams3 -> COMA vars3 tipo ID classparams3 .)


state 84

    (138) mainbloque -> LLAVEIZQ body2 . estatuto LLAVEDER
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    LLAVEDER        reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    estatuto                       shift and go to state 87
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    obj_call                       shift and go to state 95
    empty                          shift and go to state 96

state 85

    (120) fun -> vars3 FUN ID PARIZQ fun2 PARDER . fun3 funbody
    (125) fun3 -> . DOSPUNTOS tipo
    (126) fun3 -> . empty
    (149) empty -> .

    DOSPUNTOS       shift and go to state 104
    LLAVEIZQ        reduce using rule 149 (empty -> .)

    fun3                           shift and go to state 103
    empty                          shift and go to state 105

state 86

    (121) fun2 -> tipo ID . funparamr
    (123) funparamr -> . COMA tipo ID funparamr
    (124) funparamr -> . empty
    (149) empty -> .

    COMA            shift and go to state 107
    PARDER          reduce using rule 149 (empty -> .)

    funparamr                      shift and go to state 106
    empty                          shift and go to state 108

state 87

    (138) mainbloque -> LLAVEIZQ body2 estatuto . LLAVEDER

    LLAVEDER        shift and go to state 109


state 88

    (49) estatuto -> asignacion . estatuto
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    LLAVEDER        reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    asignacion                     shift and go to state 88
    estatuto                       shift and go to state 110
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    obj_call                       shift and go to state 95
    empty                          shift and go to state 96

state 89

    (50) estatuto -> condicion . estatuto
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    LLAVEDER        reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    condicion                      shift and go to state 89
    estatuto                       shift and go to state 111
    asignacion                     shift and go to state 88
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    obj_call                       shift and go to state 95
    empty                          shift and go to state 96

state 90

    (51) estatuto -> escritura . estatuto
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    LLAVEDER        reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    escritura                      shift and go to state 90
    estatuto                       shift and go to state 112
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    obj_call                       shift and go to state 95
    empty                          shift and go to state 96

state 91

    (52) estatuto -> for . estatuto
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    LLAVEDER        reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    for                            shift and go to state 91
    estatuto                       shift and go to state 113
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    obj_call                       shift and go to state 95
    empty                          shift and go to state 96

state 92

    (53) estatuto -> while . estatuto
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    LLAVEDER        reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    while                          shift and go to state 92
    estatuto                       shift and go to state 114
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    obj_call                       shift and go to state 95
    empty                          shift and go to state 96

state 93

    (54) estatuto -> when . estatuto
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    LLAVEDER        reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    when                           shift and go to state 93
    estatuto                       shift and go to state 115
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    llamada                        shift and go to state 94
    obj_call                       shift and go to state 95
    empty                          shift and go to state 96

state 94

    (55) estatuto -> llamada . estatuto
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    LLAVEDER        reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    llamada                        shift and go to state 94
    estatuto                       shift and go to state 116
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    obj_call                       shift and go to state 95
    empty                          shift and go to state 96

state 95

    (56) estatuto -> obj_call . estatuto
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    LLAVEDER        reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    obj_call                       shift and go to state 95
    estatuto                       shift and go to state 117
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    empty                          shift and go to state 96

state 96

    (57) estatuto -> empty .
    (144) llamada -> empty .
    (146) obj_call -> empty .

  ! reduce/reduce conflict for LLAVEDER resolved using rule 57 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 57 (estatuto -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for WHEN resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 57 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 57 (estatuto -> empty .)
    LLAVEDER        reduce using rule 57 (estatuto -> empty .)
    RETURN          reduce using rule 57 (estatuto -> empty .)
    ID              reduce using rule 144 (llamada -> empty .)
    IF              reduce using rule 144 (llamada -> empty .)
    WRITE           reduce using rule 144 (llamada -> empty .)
    FOR             reduce using rule 144 (llamada -> empty .)
    WHILE           reduce using rule 144 (llamada -> empty .)
    WHEN            reduce using rule 144 (llamada -> empty .)

  ! LLAVEDER        [ reduce using rule 144 (llamada -> empty .) ]
  ! RETURN          [ reduce using rule 144 (llamada -> empty .) ]
  ! ID              [ reduce using rule 146 (obj_call -> empty .) ]
  ! IF              [ reduce using rule 146 (obj_call -> empty .) ]
  ! WRITE           [ reduce using rule 146 (obj_call -> empty .) ]
  ! FOR             [ reduce using rule 146 (obj_call -> empty .) ]
  ! WHILE           [ reduce using rule 146 (obj_call -> empty .) ]
  ! WHEN            [ reduce using rule 146 (obj_call -> empty .) ]
  ! LLAVEDER        [ reduce using rule 146 (obj_call -> empty .) ]
  ! RETURN          [ reduce using rule 146 (obj_call -> empty .) ]


state 97

    (58) asignacion -> ID . asignacion3 IGUAL asignacion2 COLON
    (143) llamada -> ID . PARIZQ llamada_param PARDER COLON
    (145) obj_call -> ID . PUNTO ID PARIZQ llamada_param PARDER COLON
    (69) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (70) asignacion3 -> . PUNTO ID
    (71) asignacion3 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 119
    PUNTO           shift and go to state 120
    CORCHIZQ        shift and go to state 121
    IGUAL           reduce using rule 149 (empty -> .)

    asignacion3                    shift and go to state 118
    empty                          shift and go to state 122

state 98

    (72) condicion -> IF . condicion2 estatutor
    (73) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 124

    condicion2                     shift and go to state 123

state 99

    (83) escritura -> WRITE . PARIZQ esc1 esc2 PARDER COLON

    PARIZQ          shift and go to state 125


state 100

    (108) for -> FOR . PARIZQ ID IN for2 PARDER bloque

    PARIZQ          shift and go to state 126


state 101

    (115) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 127


state 102

    (116) when -> WHEN . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 128


state 103

    (120) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 . funbody
    (127) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 130

    funbody                        shift and go to state 129

state 104

    (125) fun3 -> DOSPUNTOS . tipo
    (88) tipo -> . INT
    (89) tipo -> . FLOAT
    (90) tipo -> . BOOL
    (91) tipo -> . STRING
    (92) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 131

state 105

    (126) fun3 -> empty .

    LLAVEIZQ        reduce using rule 126 (fun3 -> empty .)


state 106

    (121) fun2 -> tipo ID funparamr .

    PARDER          reduce using rule 121 (fun2 -> tipo ID funparamr .)


state 107

    (123) funparamr -> COMA . tipo ID funparamr
    (88) tipo -> . INT
    (89) tipo -> . FLOAT
    (90) tipo -> . BOOL
    (91) tipo -> . STRING
    (92) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 132

state 108

    (124) funparamr -> empty .

    PARDER          reduce using rule 124 (funparamr -> empty .)


state 109

    (138) mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .

    LLAVEDER        reduce using rule 138 (mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .)


state 110

    (49) estatuto -> asignacion estatuto .

    LLAVEDER        reduce using rule 49 (estatuto -> asignacion estatuto .)
    RETURN          reduce using rule 49 (estatuto -> asignacion estatuto .)


state 111

    (50) estatuto -> condicion estatuto .

    LLAVEDER        reduce using rule 50 (estatuto -> condicion estatuto .)
    RETURN          reduce using rule 50 (estatuto -> condicion estatuto .)


state 112

    (51) estatuto -> escritura estatuto .

    LLAVEDER        reduce using rule 51 (estatuto -> escritura estatuto .)
    RETURN          reduce using rule 51 (estatuto -> escritura estatuto .)


state 113

    (52) estatuto -> for estatuto .

    LLAVEDER        reduce using rule 52 (estatuto -> for estatuto .)
    RETURN          reduce using rule 52 (estatuto -> for estatuto .)


state 114

    (53) estatuto -> while estatuto .

    LLAVEDER        reduce using rule 53 (estatuto -> while estatuto .)
    RETURN          reduce using rule 53 (estatuto -> while estatuto .)


state 115

    (54) estatuto -> when estatuto .

    LLAVEDER        reduce using rule 54 (estatuto -> when estatuto .)
    RETURN          reduce using rule 54 (estatuto -> when estatuto .)


state 116

    (55) estatuto -> llamada estatuto .

    LLAVEDER        reduce using rule 55 (estatuto -> llamada estatuto .)
    RETURN          reduce using rule 55 (estatuto -> llamada estatuto .)


state 117

    (56) estatuto -> obj_call estatuto .

    LLAVEDER        reduce using rule 56 (estatuto -> obj_call estatuto .)
    RETURN          reduce using rule 56 (estatuto -> obj_call estatuto .)


state 118

    (58) asignacion -> ID asignacion3 . IGUAL asignacion2 COLON

    IGUAL           shift and go to state 133


state 119

    (143) llamada -> ID PARIZQ . llamada_param PARDER COLON
    (147) llamada_param -> . expresion expresionr
    (148) llamada_param -> . empty
    (25) expresion -> . megaexp
    (149) empty -> .
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty

    PARDER          reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145

    llamada_param                  shift and go to state 135
    expresion                      shift and go to state 136
    empty                          shift and go to state 137
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143

state 120

    (145) obj_call -> ID PUNTO . ID PARIZQ llamada_param PARDER COLON
    (70) asignacion3 -> PUNTO . ID

    ID              shift and go to state 146


state 121

    (69) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    expresion                      shift and go to state 147
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 122

    (71) asignacion3 -> empty .

    IGUAL           reduce using rule 71 (asignacion3 -> empty .)


state 123

    (72) condicion -> IF condicion2 . estatutor
    (81) estatutor -> . ELSE bloque
    (82) estatutor -> . empty
    (149) empty -> .

    ELSE            shift and go to state 150
    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WRITE           reduce using rule 149 (empty -> .)
    FOR             reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    WHEN            reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)

    estatutor                      shift and go to state 149
    empty                          shift and go to state 151

state 124

    (73) condicion2 -> PARIZQ . expresion PARDER bloque
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    expresion                      shift and go to state 152
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 125

    (83) escritura -> WRITE PARIZQ . esc1 esc2 PARDER COLON
    (84) esc1 -> . expresion
    (85) esc1 -> . STRING
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    STRING          shift and go to state 155
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    esc1                           shift and go to state 153
    expresion                      shift and go to state 154
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 126

    (108) for -> FOR PARIZQ . ID IN for2 PARDER bloque

    ID              shift and go to state 156


state 127

    (115) while -> WHILE PARIZQ . expresion PARDER bloque
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    expresion                      shift and go to state 157
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 128

    (116) when -> WHEN LLAVEIZQ . when2 LLAVEDER
    (117) when2 -> . expresion FLECHITA bloque when2
    (118) when2 -> . ELSE FLECHITA bloque
    (119) when2 -> . empty
    (25) expresion -> . megaexp
    (149) empty -> .
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty

    ELSE            shift and go to state 160
    LLAVEDER        reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145

    when2                          shift and go to state 158
    expresion                      shift and go to state 159
    empty                          shift and go to state 161
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143

state 129

    (120) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .

    PRIVATE         reduce using rule 120 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    FUN             reduce using rule 120 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    MAIN            reduce using rule 120 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    LLAVEDER        reduce using rule 120 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)


state 130

    (127) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (128) opc1 -> . vars multvarsdecl
    (129) opc1 -> . empty
    (42) vars -> . vars3 tipo vars2 COLON
    (43) vars -> . vars3 tipo LIST vars2 COLON
    (149) empty -> .
    (47) vars3 -> . PRIVATE
    (48) vars3 -> . empty

    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WRITE           reduce using rule 149 (empty -> .)
    FOR             reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    WHEN            reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)
    INT             reduce using rule 149 (empty -> .)
    FLOAT           reduce using rule 149 (empty -> .)
    BOOL            reduce using rule 149 (empty -> .)
    STRING          reduce using rule 149 (empty -> .)
    CID             reduce using rule 149 (empty -> .)
    PRIVATE         shift and go to state 21

    opc1                           shift and go to state 162
    vars                           shift and go to state 163
    empty                          shift and go to state 164
    vars3                          shift and go to state 37

state 131

    (125) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 125 (fun3 -> DOSPUNTOS tipo .)


state 132

    (123) funparamr -> COMA tipo . ID funparamr

    ID              shift and go to state 165


state 133

    (58) asignacion -> ID asignacion3 IGUAL . asignacion2 COLON
    (59) asignacion2 -> . expresion
    (60) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (61) asignacion2 -> . READ PARIZQ assign_read PARDER
    (62) asignacion2 -> . CID PARIZQ class_call_args expresionr PARDER
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    CORCHDER        shift and go to state 168
    READ            shift and go to state 169
    CID             shift and go to state 170
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    asignacion2                    shift and go to state 166
    expresion                      shift and go to state 167
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 134

    (93) factor -> PARIZQ . expresion PARDER
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    expresion                      shift and go to state 171
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 135

    (143) llamada -> ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 172


state 136

    (147) llamada_param -> expresion . expresionr
    (26) expresionr -> . COMA expresion expresionr
    (27) expresionr -> . empty
    (149) empty -> .

    COMA            shift and go to state 174
    PARDER          reduce using rule 149 (empty -> .)

    expresionr                     shift and go to state 173
    empty                          shift and go to state 175

state 137

    (148) llamada_param -> empty .
    (107) factor2 -> empty .

    PARDER          reduce using rule 148 (llamada_param -> empty .)
    ID              reduce using rule 107 (factor2 -> empty .)
    INTNUM          reduce using rule 107 (factor2 -> empty .)
    FLOATNUM        reduce using rule 107 (factor2 -> empty .)
    TRUE            reduce using rule 107 (factor2 -> empty .)
    FALSE           reduce using rule 107 (factor2 -> empty .)
    STRINGVAL       reduce using rule 107 (factor2 -> empty .)


state 138

    (25) expresion -> megaexp .

    COMA            reduce using rule 25 (expresion -> megaexp .)
    PARDER          reduce using rule 25 (expresion -> megaexp .)
    CORCHDER        reduce using rule 25 (expresion -> megaexp .)
    FLECHITA        reduce using rule 25 (expresion -> megaexp .)
    COLON           reduce using rule 25 (expresion -> megaexp .)
    CORCHIZQ        reduce using rule 25 (expresion -> megaexp .)


state 139

    (38) megaexp -> superexp . megaexpr
    (39) megaexpr -> . AND superexp megaexpr
    (40) megaexpr -> . OR superexp megaexpr
    (41) megaexpr -> . empty
    (149) empty -> .

    AND             shift and go to state 177
    OR              shift and go to state 178
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    megaexpr                       shift and go to state 176
    empty                          shift and go to state 179

state 140

    (30) superexp -> exp . oplog
    (31) oplog -> . MAYORQUE exp
    (32) oplog -> . MENORQUE exp
    (33) oplog -> . DIFERENTE exp
    (34) oplog -> . MAYOROIGUAL exp
    (35) oplog -> . MENOROIGUAL exp
    (36) oplog -> . IGUALIGUAL exp
    (37) oplog -> . empty
    (149) empty -> .

    MAYORQUE        shift and go to state 181
    MENORQUE        shift and go to state 182
    DIFERENTE       shift and go to state 183
    MAYOROIGUAL     shift and go to state 184
    MENOROIGUAL     shift and go to state 185
    IGUALIGUAL      shift and go to state 186
    AND             reduce using rule 149 (empty -> .)
    OR              reduce using rule 149 (empty -> .)
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    oplog                          shift and go to state 180
    empty                          shift and go to state 187

state 141

    (99) exp -> termino . expr
    (100) expr -> . MAS termino expr
    (101) expr -> . MENOS termino expr
    (102) expr -> . empty
    (149) empty -> .

    MAS             shift and go to state 189
    MENOS           shift and go to state 190
    MAYORQUE        reduce using rule 149 (empty -> .)
    MENORQUE        reduce using rule 149 (empty -> .)
    DIFERENTE       reduce using rule 149 (empty -> .)
    MAYOROIGUAL     reduce using rule 149 (empty -> .)
    MENOROIGUAL     reduce using rule 149 (empty -> .)
    IGUALIGUAL      reduce using rule 149 (empty -> .)
    AND             reduce using rule 149 (empty -> .)
    OR              reduce using rule 149 (empty -> .)
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    expr                           shift and go to state 188
    empty                          shift and go to state 191

state 142

    (98) termino -> factor . terminor
    (95) terminor -> . POR factor terminor
    (96) terminor -> . SOBRE factor terminor
    (97) terminor -> . empty
    (149) empty -> .

    POR             shift and go to state 193
    SOBRE           shift and go to state 194
    MAS             reduce using rule 149 (empty -> .)
    MENOS           reduce using rule 149 (empty -> .)
    MAYORQUE        reduce using rule 149 (empty -> .)
    MENORQUE        reduce using rule 149 (empty -> .)
    DIFERENTE       reduce using rule 149 (empty -> .)
    MAYOROIGUAL     reduce using rule 149 (empty -> .)
    MENOROIGUAL     reduce using rule 149 (empty -> .)
    IGUALIGUAL      reduce using rule 149 (empty -> .)
    AND             reduce using rule 149 (empty -> .)
    OR              reduce using rule 149 (empty -> .)
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    terminor                       shift and go to state 192
    empty                          shift and go to state 195

state 143

    (94) factor -> factor2 . varcte
    (14) varcte -> . ID
    (15) varcte -> . INTNUM
    (16) varcte -> . FLOATNUM
    (17) varcte -> . TRUE
    (18) varcte -> . FALSE
    (19) varcte -> . STRINGVAL
    (20) varcte -> . ID CORCHIZQ varcte CORCHDER
    (21) varcte -> . ID PUNTO ID varcte_param_fun
    (22) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 197
    INTNUM          shift and go to state 198
    FLOATNUM        shift and go to state 199
    TRUE            shift and go to state 200
    FALSE           shift and go to state 201
    STRINGVAL       shift and go to state 202

    varcte                         shift and go to state 196

state 144

    (105) factor2 -> MAS .

    ID              reduce using rule 105 (factor2 -> MAS .)
    INTNUM          reduce using rule 105 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 105 (factor2 -> MAS .)
    TRUE            reduce using rule 105 (factor2 -> MAS .)
    FALSE           reduce using rule 105 (factor2 -> MAS .)
    STRINGVAL       reduce using rule 105 (factor2 -> MAS .)


state 145

    (106) factor2 -> MENOS .

    ID              reduce using rule 106 (factor2 -> MENOS .)
    INTNUM          reduce using rule 106 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 106 (factor2 -> MENOS .)
    TRUE            reduce using rule 106 (factor2 -> MENOS .)
    FALSE           reduce using rule 106 (factor2 -> MENOS .)
    STRINGVAL       reduce using rule 106 (factor2 -> MENOS .)


state 146

    (145) obj_call -> ID PUNTO ID . PARIZQ llamada_param PARDER COLON
    (70) asignacion3 -> PUNTO ID .

    PARIZQ          shift and go to state 203
    IGUAL           reduce using rule 70 (asignacion3 -> PUNTO ID .)


state 147

    (69) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 204


state 148

    (107) factor2 -> empty .

    ID              reduce using rule 107 (factor2 -> empty .)
    INTNUM          reduce using rule 107 (factor2 -> empty .)
    FLOATNUM        reduce using rule 107 (factor2 -> empty .)
    TRUE            reduce using rule 107 (factor2 -> empty .)
    FALSE           reduce using rule 107 (factor2 -> empty .)
    STRINGVAL       reduce using rule 107 (factor2 -> empty .)


state 149

    (72) condicion -> IF condicion2 estatutor .

    ID              reduce using rule 72 (condicion -> IF condicion2 estatutor .)
    IF              reduce using rule 72 (condicion -> IF condicion2 estatutor .)
    WRITE           reduce using rule 72 (condicion -> IF condicion2 estatutor .)
    FOR             reduce using rule 72 (condicion -> IF condicion2 estatutor .)
    WHILE           reduce using rule 72 (condicion -> IF condicion2 estatutor .)
    WHEN            reduce using rule 72 (condicion -> IF condicion2 estatutor .)
    LLAVEDER        reduce using rule 72 (condicion -> IF condicion2 estatutor .)
    RETURN          reduce using rule 72 (condicion -> IF condicion2 estatutor .)


state 150

    (81) estatutor -> ELSE . bloque
    (76) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 206

    bloque                         shift and go to state 205

state 151

    (82) estatutor -> empty .

    ID              reduce using rule 82 (estatutor -> empty .)
    IF              reduce using rule 82 (estatutor -> empty .)
    WRITE           reduce using rule 82 (estatutor -> empty .)
    FOR             reduce using rule 82 (estatutor -> empty .)
    WHILE           reduce using rule 82 (estatutor -> empty .)
    WHEN            reduce using rule 82 (estatutor -> empty .)
    LLAVEDER        reduce using rule 82 (estatutor -> empty .)
    RETURN          reduce using rule 82 (estatutor -> empty .)


state 152

    (73) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 207


state 153

    (83) escritura -> WRITE PARIZQ esc1 . esc2 PARDER COLON
    (86) esc2 -> . COMA esc1 esc2
    (87) esc2 -> . empty
    (149) empty -> .

    COMA            shift and go to state 209
    PARDER          reduce using rule 149 (empty -> .)

    esc2                           shift and go to state 208
    empty                          shift and go to state 210

state 154

    (84) esc1 -> expresion .

    COMA            reduce using rule 84 (esc1 -> expresion .)
    PARDER          reduce using rule 84 (esc1 -> expresion .)


state 155

    (85) esc1 -> STRING .

    COMA            reduce using rule 85 (esc1 -> STRING .)
    PARDER          reduce using rule 85 (esc1 -> STRING .)


state 156

    (108) for -> FOR PARIZQ ID . IN for2 PARDER bloque

    IN              shift and go to state 211


state 157

    (115) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 212


state 158

    (116) when -> WHEN LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 213


state 159

    (117) when2 -> expresion . FLECHITA bloque when2

    FLECHITA        shift and go to state 214


state 160

    (118) when2 -> ELSE . FLECHITA bloque

    FLECHITA        shift and go to state 215


state 161

    (119) when2 -> empty .
    (107) factor2 -> empty .

    LLAVEDER        reduce using rule 119 (when2 -> empty .)
    ID              reduce using rule 107 (factor2 -> empty .)
    INTNUM          reduce using rule 107 (factor2 -> empty .)
    FLOATNUM        reduce using rule 107 (factor2 -> empty .)
    TRUE            reduce using rule 107 (factor2 -> empty .)
    FALSE           reduce using rule 107 (factor2 -> empty .)
    STRINGVAL       reduce using rule 107 (factor2 -> empty .)


state 162

    (127) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (130) opc2 -> . estatuto
    (131) opc2 -> . empty
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (149) empty -> .
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    opc2                           shift and go to state 216
    estatuto                       shift and go to state 217
    empty                          shift and go to state 218
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    obj_call                       shift and go to state 95

state 163

    (128) opc1 -> vars . multvarsdecl
    (139) multvarsdecl -> . vars
    (140) multvarsdecl -> . empty
    (42) vars -> . vars3 tipo vars2 COLON
    (43) vars -> . vars3 tipo LIST vars2 COLON
    (149) empty -> .
    (47) vars3 -> . PRIVATE
    (48) vars3 -> . empty

    ID              reduce using rule 149 (empty -> .)
    IF              reduce using rule 149 (empty -> .)
    WRITE           reduce using rule 149 (empty -> .)
    FOR             reduce using rule 149 (empty -> .)
    WHILE           reduce using rule 149 (empty -> .)
    WHEN            reduce using rule 149 (empty -> .)
    RETURN          reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)
    INT             reduce using rule 149 (empty -> .)
    FLOAT           reduce using rule 149 (empty -> .)
    BOOL            reduce using rule 149 (empty -> .)
    STRING          reduce using rule 149 (empty -> .)
    CID             reduce using rule 149 (empty -> .)
    PRIVATE         shift and go to state 21

    vars                           shift and go to state 44
    multvarsdecl                   shift and go to state 219
    empty                          shift and go to state 46
    vars3                          shift and go to state 37

state 164

    (129) opc1 -> empty .
    (48) vars3 -> empty .

    ID              reduce using rule 129 (opc1 -> empty .)
    IF              reduce using rule 129 (opc1 -> empty .)
    WRITE           reduce using rule 129 (opc1 -> empty .)
    FOR             reduce using rule 129 (opc1 -> empty .)
    WHILE           reduce using rule 129 (opc1 -> empty .)
    WHEN            reduce using rule 129 (opc1 -> empty .)
    RETURN          reduce using rule 129 (opc1 -> empty .)
    LLAVEDER        reduce using rule 129 (opc1 -> empty .)
    INT             reduce using rule 48 (vars3 -> empty .)
    FLOAT           reduce using rule 48 (vars3 -> empty .)
    BOOL            reduce using rule 48 (vars3 -> empty .)
    STRING          reduce using rule 48 (vars3 -> empty .)
    CID             reduce using rule 48 (vars3 -> empty .)


state 165

    (123) funparamr -> COMA tipo ID . funparamr
    (123) funparamr -> . COMA tipo ID funparamr
    (124) funparamr -> . empty
    (149) empty -> .

    COMA            shift and go to state 107
    PARDER          reduce using rule 149 (empty -> .)

    funparamr                      shift and go to state 220
    empty                          shift and go to state 108

state 166

    (58) asignacion -> ID asignacion3 IGUAL asignacion2 . COLON

    COLON           shift and go to state 221


state 167

    (59) asignacion2 -> expresion .

    COLON           reduce using rule 59 (asignacion2 -> expresion .)


state 168

    (60) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    expresion                      shift and go to state 222
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 169

    (61) asignacion2 -> READ . PARIZQ assign_read PARDER

    PARIZQ          shift and go to state 223


state 170

    (62) asignacion2 -> CID . PARIZQ class_call_args expresionr PARDER

    PARIZQ          shift and go to state 224


state 171

    (93) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 225


state 172

    (143) llamada -> ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 226


state 173

    (147) llamada_param -> expresion expresionr .

    PARDER          reduce using rule 147 (llamada_param -> expresion expresionr .)


state 174

    (26) expresionr -> COMA . expresion expresionr
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    expresion                      shift and go to state 227
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 175

    (27) expresionr -> empty .

    PARDER          reduce using rule 27 (expresionr -> empty .)


state 176

    (38) megaexp -> superexp megaexpr .

    COMA            reduce using rule 38 (megaexp -> superexp megaexpr .)
    PARDER          reduce using rule 38 (megaexp -> superexp megaexpr .)
    CORCHDER        reduce using rule 38 (megaexp -> superexp megaexpr .)
    FLECHITA        reduce using rule 38 (megaexp -> superexp megaexpr .)
    COLON           reduce using rule 38 (megaexp -> superexp megaexpr .)
    CORCHIZQ        reduce using rule 38 (megaexp -> superexp megaexpr .)


state 177

    (39) megaexpr -> AND . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    superexp                       shift and go to state 228
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 178

    (40) megaexpr -> OR . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    superexp                       shift and go to state 229
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 179

    (41) megaexpr -> empty .

    COMA            reduce using rule 41 (megaexpr -> empty .)
    PARDER          reduce using rule 41 (megaexpr -> empty .)
    CORCHDER        reduce using rule 41 (megaexpr -> empty .)
    FLECHITA        reduce using rule 41 (megaexpr -> empty .)
    COLON           reduce using rule 41 (megaexpr -> empty .)
    CORCHIZQ        reduce using rule 41 (megaexpr -> empty .)


state 180

    (30) superexp -> exp oplog .

    AND             reduce using rule 30 (superexp -> exp oplog .)
    OR              reduce using rule 30 (superexp -> exp oplog .)
    COMA            reduce using rule 30 (superexp -> exp oplog .)
    PARDER          reduce using rule 30 (superexp -> exp oplog .)
    CORCHDER        reduce using rule 30 (superexp -> exp oplog .)
    FLECHITA        reduce using rule 30 (superexp -> exp oplog .)
    COLON           reduce using rule 30 (superexp -> exp oplog .)
    CORCHIZQ        reduce using rule 30 (superexp -> exp oplog .)


state 181

    (31) oplog -> MAYORQUE . exp
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    exp                            shift and go to state 230
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 182

    (32) oplog -> MENORQUE . exp
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    exp                            shift and go to state 231
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 183

    (33) oplog -> DIFERENTE . exp
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    exp                            shift and go to state 232
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 184

    (34) oplog -> MAYOROIGUAL . exp
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    exp                            shift and go to state 233
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 185

    (35) oplog -> MENOROIGUAL . exp
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    exp                            shift and go to state 234
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 186

    (36) oplog -> IGUALIGUAL . exp
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    exp                            shift and go to state 235
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 187

    (37) oplog -> empty .

    AND             reduce using rule 37 (oplog -> empty .)
    OR              reduce using rule 37 (oplog -> empty .)
    COMA            reduce using rule 37 (oplog -> empty .)
    PARDER          reduce using rule 37 (oplog -> empty .)
    CORCHDER        reduce using rule 37 (oplog -> empty .)
    FLECHITA        reduce using rule 37 (oplog -> empty .)
    COLON           reduce using rule 37 (oplog -> empty .)
    CORCHIZQ        reduce using rule 37 (oplog -> empty .)


state 188

    (99) exp -> termino expr .

    MAYORQUE        reduce using rule 99 (exp -> termino expr .)
    MENORQUE        reduce using rule 99 (exp -> termino expr .)
    DIFERENTE       reduce using rule 99 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 99 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 99 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 99 (exp -> termino expr .)
    AND             reduce using rule 99 (exp -> termino expr .)
    OR              reduce using rule 99 (exp -> termino expr .)
    COMA            reduce using rule 99 (exp -> termino expr .)
    PARDER          reduce using rule 99 (exp -> termino expr .)
    CORCHDER        reduce using rule 99 (exp -> termino expr .)
    FLECHITA        reduce using rule 99 (exp -> termino expr .)
    COLON           reduce using rule 99 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 99 (exp -> termino expr .)


state 189

    (100) expr -> MAS . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    termino                        shift and go to state 236
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 190

    (101) expr -> MENOS . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    termino                        shift and go to state 237
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 191

    (102) expr -> empty .

    MAYORQUE        reduce using rule 102 (expr -> empty .)
    MENORQUE        reduce using rule 102 (expr -> empty .)
    DIFERENTE       reduce using rule 102 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 102 (expr -> empty .)
    MENOROIGUAL     reduce using rule 102 (expr -> empty .)
    IGUALIGUAL      reduce using rule 102 (expr -> empty .)
    AND             reduce using rule 102 (expr -> empty .)
    OR              reduce using rule 102 (expr -> empty .)
    COMA            reduce using rule 102 (expr -> empty .)
    PARDER          reduce using rule 102 (expr -> empty .)
    CORCHDER        reduce using rule 102 (expr -> empty .)
    FLECHITA        reduce using rule 102 (expr -> empty .)
    COLON           reduce using rule 102 (expr -> empty .)
    CORCHIZQ        reduce using rule 102 (expr -> empty .)


state 192

    (98) termino -> factor terminor .

    MAS             reduce using rule 98 (termino -> factor terminor .)
    MENOS           reduce using rule 98 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 98 (termino -> factor terminor .)
    MENORQUE        reduce using rule 98 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 98 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 98 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 98 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 98 (termino -> factor terminor .)
    AND             reduce using rule 98 (termino -> factor terminor .)
    OR              reduce using rule 98 (termino -> factor terminor .)
    COMA            reduce using rule 98 (termino -> factor terminor .)
    PARDER          reduce using rule 98 (termino -> factor terminor .)
    CORCHDER        reduce using rule 98 (termino -> factor terminor .)
    FLECHITA        reduce using rule 98 (termino -> factor terminor .)
    COLON           reduce using rule 98 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 98 (termino -> factor terminor .)


state 193

    (95) terminor -> POR . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    factor                         shift and go to state 238
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 194

    (96) terminor -> SOBRE . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    factor                         shift and go to state 239
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 195

    (97) terminor -> empty .

    MAS             reduce using rule 97 (terminor -> empty .)
    MENOS           reduce using rule 97 (terminor -> empty .)
    MAYORQUE        reduce using rule 97 (terminor -> empty .)
    MENORQUE        reduce using rule 97 (terminor -> empty .)
    DIFERENTE       reduce using rule 97 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 97 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 97 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 97 (terminor -> empty .)
    AND             reduce using rule 97 (terminor -> empty .)
    OR              reduce using rule 97 (terminor -> empty .)
    COMA            reduce using rule 97 (terminor -> empty .)
    PARDER          reduce using rule 97 (terminor -> empty .)
    CORCHDER        reduce using rule 97 (terminor -> empty .)
    FLECHITA        reduce using rule 97 (terminor -> empty .)
    COLON           reduce using rule 97 (terminor -> empty .)
    CORCHIZQ        reduce using rule 97 (terminor -> empty .)


state 196

    (94) factor -> factor2 varcte .

    POR             reduce using rule 94 (factor -> factor2 varcte .)
    SOBRE           reduce using rule 94 (factor -> factor2 varcte .)
    MAS             reduce using rule 94 (factor -> factor2 varcte .)
    MENOS           reduce using rule 94 (factor -> factor2 varcte .)
    MAYORQUE        reduce using rule 94 (factor -> factor2 varcte .)
    MENORQUE        reduce using rule 94 (factor -> factor2 varcte .)
    DIFERENTE       reduce using rule 94 (factor -> factor2 varcte .)
    MAYOROIGUAL     reduce using rule 94 (factor -> factor2 varcte .)
    MENOROIGUAL     reduce using rule 94 (factor -> factor2 varcte .)
    IGUALIGUAL      reduce using rule 94 (factor -> factor2 varcte .)
    AND             reduce using rule 94 (factor -> factor2 varcte .)
    OR              reduce using rule 94 (factor -> factor2 varcte .)
    COMA            reduce using rule 94 (factor -> factor2 varcte .)
    PARDER          reduce using rule 94 (factor -> factor2 varcte .)
    CORCHDER        reduce using rule 94 (factor -> factor2 varcte .)
    FLECHITA        reduce using rule 94 (factor -> factor2 varcte .)
    COLON           reduce using rule 94 (factor -> factor2 varcte .)
    CORCHIZQ        reduce using rule 94 (factor -> factor2 varcte .)


state 197

    (14) varcte -> ID .
    (20) varcte -> ID . CORCHIZQ varcte CORCHDER
    (21) varcte -> ID . PUNTO ID varcte_param_fun
    (22) varcte -> ID . PARIZQ llamada_param PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    POR             reduce using rule 14 (varcte -> ID .)
    SOBRE           reduce using rule 14 (varcte -> ID .)
    MAS             reduce using rule 14 (varcte -> ID .)
    MENOS           reduce using rule 14 (varcte -> ID .)
    MAYORQUE        reduce using rule 14 (varcte -> ID .)
    MENORQUE        reduce using rule 14 (varcte -> ID .)
    DIFERENTE       reduce using rule 14 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 14 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 14 (varcte -> ID .)
    AND             reduce using rule 14 (varcte -> ID .)
    OR              reduce using rule 14 (varcte -> ID .)
    COMA            reduce using rule 14 (varcte -> ID .)
    PARDER          reduce using rule 14 (varcte -> ID .)
    CORCHDER        reduce using rule 14 (varcte -> ID .)
    FLECHITA        reduce using rule 14 (varcte -> ID .)
    COLON           reduce using rule 14 (varcte -> ID .)
    CORCHIZQ        shift and go to state 240
    PUNTO           shift and go to state 241
    PARIZQ          shift and go to state 242

  ! CORCHIZQ        [ reduce using rule 14 (varcte -> ID .) ]


state 198

    (15) varcte -> INTNUM .

    POR             reduce using rule 15 (varcte -> INTNUM .)
    SOBRE           reduce using rule 15 (varcte -> INTNUM .)
    MAS             reduce using rule 15 (varcte -> INTNUM .)
    MENOS           reduce using rule 15 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 15 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 15 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 15 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 15 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 15 (varcte -> INTNUM .)
    AND             reduce using rule 15 (varcte -> INTNUM .)
    OR              reduce using rule 15 (varcte -> INTNUM .)
    COMA            reduce using rule 15 (varcte -> INTNUM .)
    PARDER          reduce using rule 15 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 15 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 15 (varcte -> INTNUM .)
    COLON           reduce using rule 15 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 15 (varcte -> INTNUM .)


state 199

    (16) varcte -> FLOATNUM .

    POR             reduce using rule 16 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 16 (varcte -> FLOATNUM .)
    MAS             reduce using rule 16 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 16 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 16 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 16 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 16 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 16 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 16 (varcte -> FLOATNUM .)
    AND             reduce using rule 16 (varcte -> FLOATNUM .)
    OR              reduce using rule 16 (varcte -> FLOATNUM .)
    COMA            reduce using rule 16 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 16 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 16 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 16 (varcte -> FLOATNUM .)
    COLON           reduce using rule 16 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 16 (varcte -> FLOATNUM .)


state 200

    (17) varcte -> TRUE .

    POR             reduce using rule 17 (varcte -> TRUE .)
    SOBRE           reduce using rule 17 (varcte -> TRUE .)
    MAS             reduce using rule 17 (varcte -> TRUE .)
    MENOS           reduce using rule 17 (varcte -> TRUE .)
    MAYORQUE        reduce using rule 17 (varcte -> TRUE .)
    MENORQUE        reduce using rule 17 (varcte -> TRUE .)
    DIFERENTE       reduce using rule 17 (varcte -> TRUE .)
    MAYOROIGUAL     reduce using rule 17 (varcte -> TRUE .)
    MENOROIGUAL     reduce using rule 17 (varcte -> TRUE .)
    IGUALIGUAL      reduce using rule 17 (varcte -> TRUE .)
    AND             reduce using rule 17 (varcte -> TRUE .)
    OR              reduce using rule 17 (varcte -> TRUE .)
    COMA            reduce using rule 17 (varcte -> TRUE .)
    PARDER          reduce using rule 17 (varcte -> TRUE .)
    CORCHDER        reduce using rule 17 (varcte -> TRUE .)
    FLECHITA        reduce using rule 17 (varcte -> TRUE .)
    COLON           reduce using rule 17 (varcte -> TRUE .)
    CORCHIZQ        reduce using rule 17 (varcte -> TRUE .)


state 201

    (18) varcte -> FALSE .

    POR             reduce using rule 18 (varcte -> FALSE .)
    SOBRE           reduce using rule 18 (varcte -> FALSE .)
    MAS             reduce using rule 18 (varcte -> FALSE .)
    MENOS           reduce using rule 18 (varcte -> FALSE .)
    MAYORQUE        reduce using rule 18 (varcte -> FALSE .)
    MENORQUE        reduce using rule 18 (varcte -> FALSE .)
    DIFERENTE       reduce using rule 18 (varcte -> FALSE .)
    MAYOROIGUAL     reduce using rule 18 (varcte -> FALSE .)
    MENOROIGUAL     reduce using rule 18 (varcte -> FALSE .)
    IGUALIGUAL      reduce using rule 18 (varcte -> FALSE .)
    AND             reduce using rule 18 (varcte -> FALSE .)
    OR              reduce using rule 18 (varcte -> FALSE .)
    COMA            reduce using rule 18 (varcte -> FALSE .)
    PARDER          reduce using rule 18 (varcte -> FALSE .)
    CORCHDER        reduce using rule 18 (varcte -> FALSE .)
    FLECHITA        reduce using rule 18 (varcte -> FALSE .)
    COLON           reduce using rule 18 (varcte -> FALSE .)
    CORCHIZQ        reduce using rule 18 (varcte -> FALSE .)


state 202

    (19) varcte -> STRINGVAL .

    POR             reduce using rule 19 (varcte -> STRINGVAL .)
    SOBRE           reduce using rule 19 (varcte -> STRINGVAL .)
    MAS             reduce using rule 19 (varcte -> STRINGVAL .)
    MENOS           reduce using rule 19 (varcte -> STRINGVAL .)
    MAYORQUE        reduce using rule 19 (varcte -> STRINGVAL .)
    MENORQUE        reduce using rule 19 (varcte -> STRINGVAL .)
    DIFERENTE       reduce using rule 19 (varcte -> STRINGVAL .)
    MAYOROIGUAL     reduce using rule 19 (varcte -> STRINGVAL .)
    MENOROIGUAL     reduce using rule 19 (varcte -> STRINGVAL .)
    IGUALIGUAL      reduce using rule 19 (varcte -> STRINGVAL .)
    AND             reduce using rule 19 (varcte -> STRINGVAL .)
    OR              reduce using rule 19 (varcte -> STRINGVAL .)
    COMA            reduce using rule 19 (varcte -> STRINGVAL .)
    PARDER          reduce using rule 19 (varcte -> STRINGVAL .)
    CORCHDER        reduce using rule 19 (varcte -> STRINGVAL .)
    FLECHITA        reduce using rule 19 (varcte -> STRINGVAL .)
    COLON           reduce using rule 19 (varcte -> STRINGVAL .)
    CORCHIZQ        reduce using rule 19 (varcte -> STRINGVAL .)


state 203

    (145) obj_call -> ID PUNTO ID PARIZQ . llamada_param PARDER COLON
    (147) llamada_param -> . expresion expresionr
    (148) llamada_param -> . empty
    (25) expresion -> . megaexp
    (149) empty -> .
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty

    PARDER          reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145

    llamada_param                  shift and go to state 243
    expresion                      shift and go to state 136
    empty                          shift and go to state 137
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143

state 204

    (69) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 69 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 205

    (81) estatutor -> ELSE bloque .

    ID              reduce using rule 81 (estatutor -> ELSE bloque .)
    IF              reduce using rule 81 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 81 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 81 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 81 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 81 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 81 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 81 (estatutor -> ELSE bloque .)


state 206

    (76) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (49) estatuto -> . asignacion estatuto
    (50) estatuto -> . condicion estatuto
    (51) estatuto -> . escritura estatuto
    (52) estatuto -> . for estatuto
    (53) estatuto -> . while estatuto
    (54) estatuto -> . when estatuto
    (55) estatuto -> . llamada estatuto
    (56) estatuto -> . obj_call estatuto
    (57) estatuto -> . empty
    (58) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (72) condicion -> . IF condicion2 estatutor
    (83) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (108) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (115) while -> . WHILE PARIZQ expresion PARDER bloque
    (116) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (143) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (144) llamada -> . empty
    (145) obj_call -> . ID PUNTO ID PARIZQ llamada_param PARDER COLON
    (146) obj_call -> . empty
    (149) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 97
    IF              shift and go to state 98
    WRITE           shift and go to state 99
    FOR             shift and go to state 100
    WHILE           shift and go to state 101
    WHEN            shift and go to state 102
    RETURN          reduce using rule 149 (empty -> .)
    LLAVEDER        reduce using rule 149 (empty -> .)

  ! ID              [ reduce using rule 149 (empty -> .) ]
  ! IF              [ reduce using rule 149 (empty -> .) ]
  ! WRITE           [ reduce using rule 149 (empty -> .) ]
  ! FOR             [ reduce using rule 149 (empty -> .) ]
  ! WHILE           [ reduce using rule 149 (empty -> .) ]
  ! WHEN            [ reduce using rule 149 (empty -> .) ]

    estatuto                       shift and go to state 244
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    obj_call                       shift and go to state 95
    empty                          shift and go to state 96

state 207

    (73) condicion2 -> PARIZQ expresion PARDER . bloque
    (76) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 206

    bloque                         shift and go to state 245

state 208

    (83) escritura -> WRITE PARIZQ esc1 esc2 . PARDER COLON

    PARDER          shift and go to state 246


state 209

    (86) esc2 -> COMA . esc1 esc2
    (84) esc1 -> . expresion
    (85) esc1 -> . STRING
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    STRING          shift and go to state 155
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    esc1                           shift and go to state 247
    expresion                      shift and go to state 154
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 210

    (87) esc2 -> empty .

    PARDER          reduce using rule 87 (esc2 -> empty .)


state 211

    (108) for -> FOR PARIZQ ID IN . for2 PARDER bloque
    (109) for2 -> . ID
    (110) for2 -> . range
    (111) range -> . INTNUM PUNTOSRANGO INTNUM
    (112) range -> . ID PUNTOSRANGO ID
    (113) range -> . ID PUNTOSRANGO INTNUM
    (114) range -> . INTNUM PUNTOSRANGO ID

    ID              shift and go to state 248
    INTNUM          shift and go to state 251

    for2                           shift and go to state 249
    range                          shift and go to state 250

state 212

    (115) while -> WHILE PARIZQ expresion PARDER . bloque
    (76) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 206

    bloque                         shift and go to state 252

state 213

    (116) when -> WHEN LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 116 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 116 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 116 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 116 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 116 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 116 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 116 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 116 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)


state 214

    (117) when2 -> expresion FLECHITA . bloque when2
    (76) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 206

    bloque                         shift and go to state 253

state 215

    (118) when2 -> ELSE FLECHITA . bloque
    (76) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 206

    bloque                         shift and go to state 254

state 216

    (127) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (77) bloque2 -> . RETURN bloque3
    (78) bloque2 -> . empty
    (149) empty -> .

    RETURN          shift and go to state 256
    LLAVEDER        reduce using rule 149 (empty -> .)

    bloque2                        shift and go to state 255
    empty                          shift and go to state 257

state 217

    (130) opc2 -> estatuto .

    RETURN          reduce using rule 130 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 130 (opc2 -> estatuto .)


state 218

    (131) opc2 -> empty .
    (57) estatuto -> empty .
    (144) llamada -> empty .
    (146) obj_call -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 57 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 57 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 57 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 57 (estatuto -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for WHEN resolved using rule 144 (llamada -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 57 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 57 (estatuto -> empty .)
    RETURN          reduce using rule 57 (estatuto -> empty .)
    LLAVEDER        reduce using rule 57 (estatuto -> empty .)
    ID              reduce using rule 144 (llamada -> empty .)
    IF              reduce using rule 144 (llamada -> empty .)
    WRITE           reduce using rule 144 (llamada -> empty .)
    FOR             reduce using rule 144 (llamada -> empty .)
    WHILE           reduce using rule 144 (llamada -> empty .)
    WHEN            reduce using rule 144 (llamada -> empty .)

  ! RETURN          [ reduce using rule 131 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 131 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 144 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 144 (llamada -> empty .) ]
  ! ID              [ reduce using rule 146 (obj_call -> empty .) ]
  ! IF              [ reduce using rule 146 (obj_call -> empty .) ]
  ! WRITE           [ reduce using rule 146 (obj_call -> empty .) ]
  ! FOR             [ reduce using rule 146 (obj_call -> empty .) ]
  ! WHILE           [ reduce using rule 146 (obj_call -> empty .) ]
  ! WHEN            [ reduce using rule 146 (obj_call -> empty .) ]
  ! RETURN          [ reduce using rule 146 (obj_call -> empty .) ]
  ! LLAVEDER        [ reduce using rule 146 (obj_call -> empty .) ]


state 219

    (128) opc1 -> vars multvarsdecl .

    ID              reduce using rule 128 (opc1 -> vars multvarsdecl .)
    IF              reduce using rule 128 (opc1 -> vars multvarsdecl .)
    WRITE           reduce using rule 128 (opc1 -> vars multvarsdecl .)
    FOR             reduce using rule 128 (opc1 -> vars multvarsdecl .)
    WHILE           reduce using rule 128 (opc1 -> vars multvarsdecl .)
    WHEN            reduce using rule 128 (opc1 -> vars multvarsdecl .)
    RETURN          reduce using rule 128 (opc1 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 128 (opc1 -> vars multvarsdecl .)


state 220

    (123) funparamr -> COMA tipo ID funparamr .

    PARDER          reduce using rule 123 (funparamr -> COMA tipo ID funparamr .)


state 221

    (58) asignacion -> ID asignacion3 IGUAL asignacion2 COLON .

    ID              reduce using rule 58 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    IF              reduce using rule 58 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WRITE           reduce using rule 58 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    FOR             reduce using rule 58 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHILE           reduce using rule 58 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHEN            reduce using rule 58 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    LLAVEDER        reduce using rule 58 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    RETURN          reduce using rule 58 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)


state 222

    (60) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (67) asignacion2r -> . COMA expresion asignacion2r
    (68) asignacion2r -> . empty
    (149) empty -> .

    COMA            shift and go to state 259
    CORCHIZQ        reduce using rule 149 (empty -> .)

    asignacion2r                   shift and go to state 258
    empty                          shift and go to state 260

state 223

    (61) asignacion2 -> READ PARIZQ . assign_read PARDER
    (65) assign_read -> . STRINGVAL
    (66) assign_read -> . empty
    (149) empty -> .

    STRINGVAL       shift and go to state 262
    PARDER          reduce using rule 149 (empty -> .)

    assign_read                    shift and go to state 261
    empty                          shift and go to state 263

state 224

    (62) asignacion2 -> CID PARIZQ . class_call_args expresionr PARDER
    (63) class_call_args -> . expresion
    (64) class_call_args -> . empty
    (25) expresion -> . megaexp
    (149) empty -> .
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty

    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145

    class_call_args                shift and go to state 264
    expresion                      shift and go to state 265
    empty                          shift and go to state 266
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143

state 225

    (93) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    FLECHITA        reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    COLON           reduce using rule 93 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 93 (factor -> PARIZQ expresion PARDER .)


state 226

    (143) llamada -> ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 143 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 143 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 143 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 143 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 143 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 143 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 143 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 143 (llamada -> ID PARIZQ llamada_param PARDER COLON .)


state 227

    (26) expresionr -> COMA expresion . expresionr
    (26) expresionr -> . COMA expresion expresionr
    (27) expresionr -> . empty
    (149) empty -> .

    COMA            shift and go to state 174
    PARDER          reduce using rule 149 (empty -> .)

    expresionr                     shift and go to state 267
    empty                          shift and go to state 175

state 228

    (39) megaexpr -> AND superexp . megaexpr
    (39) megaexpr -> . AND superexp megaexpr
    (40) megaexpr -> . OR superexp megaexpr
    (41) megaexpr -> . empty
    (149) empty -> .

    AND             shift and go to state 177
    OR              shift and go to state 178
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    megaexpr                       shift and go to state 268
    empty                          shift and go to state 179

state 229

    (40) megaexpr -> OR superexp . megaexpr
    (39) megaexpr -> . AND superexp megaexpr
    (40) megaexpr -> . OR superexp megaexpr
    (41) megaexpr -> . empty
    (149) empty -> .

    AND             shift and go to state 177
    OR              shift and go to state 178
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    megaexpr                       shift and go to state 269
    empty                          shift and go to state 179

state 230

    (31) oplog -> MAYORQUE exp .

    AND             reduce using rule 31 (oplog -> MAYORQUE exp .)
    OR              reduce using rule 31 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 31 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 31 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 31 (oplog -> MAYORQUE exp .)
    FLECHITA        reduce using rule 31 (oplog -> MAYORQUE exp .)
    COLON           reduce using rule 31 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 31 (oplog -> MAYORQUE exp .)


state 231

    (32) oplog -> MENORQUE exp .

    AND             reduce using rule 32 (oplog -> MENORQUE exp .)
    OR              reduce using rule 32 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 32 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 32 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 32 (oplog -> MENORQUE exp .)
    FLECHITA        reduce using rule 32 (oplog -> MENORQUE exp .)
    COLON           reduce using rule 32 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 32 (oplog -> MENORQUE exp .)


state 232

    (33) oplog -> DIFERENTE exp .

    AND             reduce using rule 33 (oplog -> DIFERENTE exp .)
    OR              reduce using rule 33 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 33 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 33 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 33 (oplog -> DIFERENTE exp .)
    FLECHITA        reduce using rule 33 (oplog -> DIFERENTE exp .)
    COLON           reduce using rule 33 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 33 (oplog -> DIFERENTE exp .)


state 233

    (34) oplog -> MAYOROIGUAL exp .

    AND             reduce using rule 34 (oplog -> MAYOROIGUAL exp .)
    OR              reduce using rule 34 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 34 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 34 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 34 (oplog -> MAYOROIGUAL exp .)
    FLECHITA        reduce using rule 34 (oplog -> MAYOROIGUAL exp .)
    COLON           reduce using rule 34 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 34 (oplog -> MAYOROIGUAL exp .)


state 234

    (35) oplog -> MENOROIGUAL exp .

    AND             reduce using rule 35 (oplog -> MENOROIGUAL exp .)
    OR              reduce using rule 35 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 35 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 35 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 35 (oplog -> MENOROIGUAL exp .)
    FLECHITA        reduce using rule 35 (oplog -> MENOROIGUAL exp .)
    COLON           reduce using rule 35 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 35 (oplog -> MENOROIGUAL exp .)


state 235

    (36) oplog -> IGUALIGUAL exp .

    AND             reduce using rule 36 (oplog -> IGUALIGUAL exp .)
    OR              reduce using rule 36 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 36 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 36 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 36 (oplog -> IGUALIGUAL exp .)
    FLECHITA        reduce using rule 36 (oplog -> IGUALIGUAL exp .)
    COLON           reduce using rule 36 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 36 (oplog -> IGUALIGUAL exp .)


state 236

    (100) expr -> MAS termino . expr
    (100) expr -> . MAS termino expr
    (101) expr -> . MENOS termino expr
    (102) expr -> . empty
    (149) empty -> .

    MAS             shift and go to state 189
    MENOS           shift and go to state 190
    MAYORQUE        reduce using rule 149 (empty -> .)
    MENORQUE        reduce using rule 149 (empty -> .)
    DIFERENTE       reduce using rule 149 (empty -> .)
    MAYOROIGUAL     reduce using rule 149 (empty -> .)
    MENOROIGUAL     reduce using rule 149 (empty -> .)
    IGUALIGUAL      reduce using rule 149 (empty -> .)
    AND             reduce using rule 149 (empty -> .)
    OR              reduce using rule 149 (empty -> .)
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    expr                           shift and go to state 270
    empty                          shift and go to state 191

state 237

    (101) expr -> MENOS termino . expr
    (100) expr -> . MAS termino expr
    (101) expr -> . MENOS termino expr
    (102) expr -> . empty
    (149) empty -> .

    MAS             shift and go to state 189
    MENOS           shift and go to state 190
    MAYORQUE        reduce using rule 149 (empty -> .)
    MENORQUE        reduce using rule 149 (empty -> .)
    DIFERENTE       reduce using rule 149 (empty -> .)
    MAYOROIGUAL     reduce using rule 149 (empty -> .)
    MENOROIGUAL     reduce using rule 149 (empty -> .)
    IGUALIGUAL      reduce using rule 149 (empty -> .)
    AND             reduce using rule 149 (empty -> .)
    OR              reduce using rule 149 (empty -> .)
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    expr                           shift and go to state 271
    empty                          shift and go to state 191

state 238

    (95) terminor -> POR factor . terminor
    (95) terminor -> . POR factor terminor
    (96) terminor -> . SOBRE factor terminor
    (97) terminor -> . empty
    (149) empty -> .

    POR             shift and go to state 193
    SOBRE           shift and go to state 194
    MAS             reduce using rule 149 (empty -> .)
    MENOS           reduce using rule 149 (empty -> .)
    MAYORQUE        reduce using rule 149 (empty -> .)
    MENORQUE        reduce using rule 149 (empty -> .)
    DIFERENTE       reduce using rule 149 (empty -> .)
    MAYOROIGUAL     reduce using rule 149 (empty -> .)
    MENOROIGUAL     reduce using rule 149 (empty -> .)
    IGUALIGUAL      reduce using rule 149 (empty -> .)
    AND             reduce using rule 149 (empty -> .)
    OR              reduce using rule 149 (empty -> .)
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    terminor                       shift and go to state 272
    empty                          shift and go to state 195

state 239

    (96) terminor -> SOBRE factor . terminor
    (95) terminor -> . POR factor terminor
    (96) terminor -> . SOBRE factor terminor
    (97) terminor -> . empty
    (149) empty -> .

    POR             shift and go to state 193
    SOBRE           shift and go to state 194
    MAS             reduce using rule 149 (empty -> .)
    MENOS           reduce using rule 149 (empty -> .)
    MAYORQUE        reduce using rule 149 (empty -> .)
    MENORQUE        reduce using rule 149 (empty -> .)
    DIFERENTE       reduce using rule 149 (empty -> .)
    MAYOROIGUAL     reduce using rule 149 (empty -> .)
    MENOROIGUAL     reduce using rule 149 (empty -> .)
    IGUALIGUAL      reduce using rule 149 (empty -> .)
    AND             reduce using rule 149 (empty -> .)
    OR              reduce using rule 149 (empty -> .)
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    terminor                       shift and go to state 273
    empty                          shift and go to state 195

state 240

    (20) varcte -> ID CORCHIZQ . varcte CORCHDER
    (14) varcte -> . ID
    (15) varcte -> . INTNUM
    (16) varcte -> . FLOATNUM
    (17) varcte -> . TRUE
    (18) varcte -> . FALSE
    (19) varcte -> . STRINGVAL
    (20) varcte -> . ID CORCHIZQ varcte CORCHDER
    (21) varcte -> . ID PUNTO ID varcte_param_fun
    (22) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 197
    INTNUM          shift and go to state 198
    FLOATNUM        shift and go to state 199
    TRUE            shift and go to state 200
    FALSE           shift and go to state 201
    STRINGVAL       shift and go to state 202

    varcte                         shift and go to state 274

state 241

    (21) varcte -> ID PUNTO . ID varcte_param_fun

    ID              shift and go to state 275


state 242

    (22) varcte -> ID PARIZQ . llamada_param PARDER
    (147) llamada_param -> . expresion expresionr
    (148) llamada_param -> . empty
    (25) expresion -> . megaexp
    (149) empty -> .
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty

    PARDER          reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145

    llamada_param                  shift and go to state 276
    expresion                      shift and go to state 136
    empty                          shift and go to state 137
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143

state 243

    (145) obj_call -> ID PUNTO ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 277


state 244

    (76) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (77) bloque2 -> . RETURN bloque3
    (78) bloque2 -> . empty
    (149) empty -> .

    RETURN          shift and go to state 256
    LLAVEDER        reduce using rule 149 (empty -> .)

    bloque2                        shift and go to state 278
    empty                          shift and go to state 257

state 245

    (73) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 73 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 73 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 73 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 73 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 73 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 73 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 73 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 73 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 73 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 246

    (83) escritura -> WRITE PARIZQ esc1 esc2 PARDER . COLON

    COLON           shift and go to state 279


state 247

    (86) esc2 -> COMA esc1 . esc2
    (86) esc2 -> . COMA esc1 esc2
    (87) esc2 -> . empty
    (149) empty -> .

    COMA            shift and go to state 209
    PARDER          reduce using rule 149 (empty -> .)

    esc2                           shift and go to state 280
    empty                          shift and go to state 210

state 248

    (109) for2 -> ID .
    (112) range -> ID . PUNTOSRANGO ID
    (113) range -> ID . PUNTOSRANGO INTNUM

    PARDER          reduce using rule 109 (for2 -> ID .)
    PUNTOSRANGO     shift and go to state 281


state 249

    (108) for -> FOR PARIZQ ID IN for2 . PARDER bloque

    PARDER          shift and go to state 282


state 250

    (110) for2 -> range .

    PARDER          reduce using rule 110 (for2 -> range .)


state 251

    (111) range -> INTNUM . PUNTOSRANGO INTNUM
    (114) range -> INTNUM . PUNTOSRANGO ID

    PUNTOSRANGO     shift and go to state 283


state 252

    (115) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 115 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 115 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 115 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 115 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 115 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 115 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 115 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 115 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 253

    (117) when2 -> expresion FLECHITA bloque . when2
    (117) when2 -> . expresion FLECHITA bloque when2
    (118) when2 -> . ELSE FLECHITA bloque
    (119) when2 -> . empty
    (25) expresion -> . megaexp
    (149) empty -> .
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty

    ELSE            shift and go to state 160
    LLAVEDER        reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145

    expresion                      shift and go to state 159
    when2                          shift and go to state 284
    empty                          shift and go to state 161
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143

state 254

    (118) when2 -> ELSE FLECHITA bloque .

    LLAVEDER        reduce using rule 118 (when2 -> ELSE FLECHITA bloque .)


state 255

    (127) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 285


state 256

    (77) bloque2 -> RETURN . bloque3
    (79) bloque3 -> . expresion COLON
    (80) bloque3 -> . empty
    (25) expresion -> . megaexp
    (149) empty -> .
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty

    LLAVEDER        reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145

    bloque3                        shift and go to state 286
    expresion                      shift and go to state 287
    empty                          shift and go to state 288
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143

state 257

    (78) bloque2 -> empty .

    LLAVEDER        reduce using rule 78 (bloque2 -> empty .)


state 258

    (60) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 289


state 259

    (67) asignacion2r -> COMA . expresion asignacion2r
    (25) expresion -> . megaexp
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)

    expresion                      shift and go to state 290
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143
    empty                          shift and go to state 148

state 260

    (68) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 68 (asignacion2r -> empty .)


state 261

    (61) asignacion2 -> READ PARIZQ assign_read . PARDER

    PARDER          shift and go to state 291


state 262

    (65) assign_read -> STRINGVAL .

    PARDER          reduce using rule 65 (assign_read -> STRINGVAL .)


state 263

    (66) assign_read -> empty .

    PARDER          reduce using rule 66 (assign_read -> empty .)


state 264

    (62) asignacion2 -> CID PARIZQ class_call_args . expresionr PARDER
    (26) expresionr -> . COMA expresion expresionr
    (27) expresionr -> . empty
    (149) empty -> .

    COMA            shift and go to state 174
    PARDER          reduce using rule 149 (empty -> .)

    expresionr                     shift and go to state 292
    empty                          shift and go to state 175

state 265

    (63) class_call_args -> expresion .

    COMA            reduce using rule 63 (class_call_args -> expresion .)
    PARDER          reduce using rule 63 (class_call_args -> expresion .)


state 266

    (64) class_call_args -> empty .
    (107) factor2 -> empty .

    COMA            reduce using rule 64 (class_call_args -> empty .)
    PARDER          reduce using rule 64 (class_call_args -> empty .)
    ID              reduce using rule 107 (factor2 -> empty .)
    INTNUM          reduce using rule 107 (factor2 -> empty .)
    FLOATNUM        reduce using rule 107 (factor2 -> empty .)
    TRUE            reduce using rule 107 (factor2 -> empty .)
    FALSE           reduce using rule 107 (factor2 -> empty .)
    STRINGVAL       reduce using rule 107 (factor2 -> empty .)


state 267

    (26) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 26 (expresionr -> COMA expresion expresionr .)


state 268

    (39) megaexpr -> AND superexp megaexpr .

    COMA            reduce using rule 39 (megaexpr -> AND superexp megaexpr .)
    PARDER          reduce using rule 39 (megaexpr -> AND superexp megaexpr .)
    CORCHDER        reduce using rule 39 (megaexpr -> AND superexp megaexpr .)
    FLECHITA        reduce using rule 39 (megaexpr -> AND superexp megaexpr .)
    COLON           reduce using rule 39 (megaexpr -> AND superexp megaexpr .)
    CORCHIZQ        reduce using rule 39 (megaexpr -> AND superexp megaexpr .)


state 269

    (40) megaexpr -> OR superexp megaexpr .

    COMA            reduce using rule 40 (megaexpr -> OR superexp megaexpr .)
    PARDER          reduce using rule 40 (megaexpr -> OR superexp megaexpr .)
    CORCHDER        reduce using rule 40 (megaexpr -> OR superexp megaexpr .)
    FLECHITA        reduce using rule 40 (megaexpr -> OR superexp megaexpr .)
    COLON           reduce using rule 40 (megaexpr -> OR superexp megaexpr .)
    CORCHIZQ        reduce using rule 40 (megaexpr -> OR superexp megaexpr .)


state 270

    (100) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 100 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 100 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 100 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 100 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 100 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 100 (expr -> MAS termino expr .)
    AND             reduce using rule 100 (expr -> MAS termino expr .)
    OR              reduce using rule 100 (expr -> MAS termino expr .)
    COMA            reduce using rule 100 (expr -> MAS termino expr .)
    PARDER          reduce using rule 100 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 100 (expr -> MAS termino expr .)
    FLECHITA        reduce using rule 100 (expr -> MAS termino expr .)
    COLON           reduce using rule 100 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 100 (expr -> MAS termino expr .)


state 271

    (101) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 101 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 101 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 101 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 101 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 101 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 101 (expr -> MENOS termino expr .)
    AND             reduce using rule 101 (expr -> MENOS termino expr .)
    OR              reduce using rule 101 (expr -> MENOS termino expr .)
    COMA            reduce using rule 101 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 101 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 101 (expr -> MENOS termino expr .)
    FLECHITA        reduce using rule 101 (expr -> MENOS termino expr .)
    COLON           reduce using rule 101 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 101 (expr -> MENOS termino expr .)


state 272

    (95) terminor -> POR factor terminor .

    MAS             reduce using rule 95 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 95 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 95 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 95 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 95 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 95 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 95 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 95 (terminor -> POR factor terminor .)
    AND             reduce using rule 95 (terminor -> POR factor terminor .)
    OR              reduce using rule 95 (terminor -> POR factor terminor .)
    COMA            reduce using rule 95 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 95 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 95 (terminor -> POR factor terminor .)
    FLECHITA        reduce using rule 95 (terminor -> POR factor terminor .)
    COLON           reduce using rule 95 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 95 (terminor -> POR factor terminor .)


state 273

    (96) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 96 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 96 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 96 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 96 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 96 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 96 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 96 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 96 (terminor -> SOBRE factor terminor .)
    AND             reduce using rule 96 (terminor -> SOBRE factor terminor .)
    OR              reduce using rule 96 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 96 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 96 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 96 (terminor -> SOBRE factor terminor .)
    FLECHITA        reduce using rule 96 (terminor -> SOBRE factor terminor .)
    COLON           reduce using rule 96 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 96 (terminor -> SOBRE factor terminor .)


state 274

    (20) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 293


state 275

    (21) varcte -> ID PUNTO ID . varcte_param_fun
    (23) varcte_param_fun -> . PARIZQ llamada_param PARDER
    (24) varcte_param_fun -> . empty
    (149) empty -> .

    PARIZQ          shift and go to state 295
    POR             reduce using rule 149 (empty -> .)
    SOBRE           reduce using rule 149 (empty -> .)
    MAS             reduce using rule 149 (empty -> .)
    MENOS           reduce using rule 149 (empty -> .)
    MAYORQUE        reduce using rule 149 (empty -> .)
    MENORQUE        reduce using rule 149 (empty -> .)
    DIFERENTE       reduce using rule 149 (empty -> .)
    MAYOROIGUAL     reduce using rule 149 (empty -> .)
    MENOROIGUAL     reduce using rule 149 (empty -> .)
    IGUALIGUAL      reduce using rule 149 (empty -> .)
    AND             reduce using rule 149 (empty -> .)
    OR              reduce using rule 149 (empty -> .)
    COMA            reduce using rule 149 (empty -> .)
    PARDER          reduce using rule 149 (empty -> .)
    CORCHDER        reduce using rule 149 (empty -> .)
    FLECHITA        reduce using rule 149 (empty -> .)
    COLON           reduce using rule 149 (empty -> .)
    CORCHIZQ        reduce using rule 149 (empty -> .)

    varcte_param_fun               shift and go to state 294
    empty                          shift and go to state 296

state 276

    (22) varcte -> ID PARIZQ llamada_param . PARDER

    PARDER          shift and go to state 297


state 277

    (145) obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 298


state 278

    (76) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 299


state 279

    (83) escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .

    ID              reduce using rule 83 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    IF              reduce using rule 83 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WRITE           reduce using rule 83 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    FOR             reduce using rule 83 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHILE           reduce using rule 83 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHEN            reduce using rule 83 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    LLAVEDER        reduce using rule 83 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    RETURN          reduce using rule 83 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)


state 280

    (86) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 86 (esc2 -> COMA esc1 esc2 .)


state 281

    (112) range -> ID PUNTOSRANGO . ID
    (113) range -> ID PUNTOSRANGO . INTNUM

    ID              shift and go to state 300
    INTNUM          shift and go to state 301


state 282

    (108) for -> FOR PARIZQ ID IN for2 PARDER . bloque
    (76) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 206

    bloque                         shift and go to state 302

state 283

    (111) range -> INTNUM PUNTOSRANGO . INTNUM
    (114) range -> INTNUM PUNTOSRANGO . ID

    INTNUM          shift and go to state 303
    ID              shift and go to state 304


state 284

    (117) when2 -> expresion FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 117 (when2 -> expresion FLECHITA bloque when2 .)


state 285

    (127) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    PRIVATE         reduce using rule 127 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    FUN             reduce using rule 127 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    MAIN            reduce using rule 127 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 127 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 286

    (77) bloque2 -> RETURN bloque3 .

    LLAVEDER        reduce using rule 77 (bloque2 -> RETURN bloque3 .)


state 287

    (79) bloque3 -> expresion . COLON

    COLON           shift and go to state 305


state 288

    (80) bloque3 -> empty .
    (107) factor2 -> empty .

    LLAVEDER        reduce using rule 80 (bloque3 -> empty .)
    ID              reduce using rule 107 (factor2 -> empty .)
    INTNUM          reduce using rule 107 (factor2 -> empty .)
    FLOATNUM        reduce using rule 107 (factor2 -> empty .)
    TRUE            reduce using rule 107 (factor2 -> empty .)
    FALSE           reduce using rule 107 (factor2 -> empty .)
    STRINGVAL       reduce using rule 107 (factor2 -> empty .)


state 289

    (60) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    COLON           reduce using rule 60 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 290

    (67) asignacion2r -> COMA expresion . asignacion2r
    (67) asignacion2r -> . COMA expresion asignacion2r
    (68) asignacion2r -> . empty
    (149) empty -> .

    COMA            shift and go to state 259
    CORCHIZQ        reduce using rule 149 (empty -> .)

    asignacion2r                   shift and go to state 306
    empty                          shift and go to state 260

state 291

    (61) asignacion2 -> READ PARIZQ assign_read PARDER .

    COLON           reduce using rule 61 (asignacion2 -> READ PARIZQ assign_read PARDER .)


state 292

    (62) asignacion2 -> CID PARIZQ class_call_args expresionr . PARDER

    PARDER          shift and go to state 307


state 293

    (20) varcte -> ID CORCHIZQ varcte CORCHDER .

    POR             reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    AND             reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    OR              reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COMA            reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COLON           reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 294

    (21) varcte -> ID PUNTO ID varcte_param_fun .

    POR             reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    SOBRE           reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    MAS             reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    MENOS           reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    MAYORQUE        reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    MENORQUE        reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    DIFERENTE       reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    MAYOROIGUAL     reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    MENOROIGUAL     reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    IGUALIGUAL      reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    AND             reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    OR              reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    COMA            reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    PARDER          reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    CORCHDER        reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    FLECHITA        reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    COLON           reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)
    CORCHIZQ        reduce using rule 21 (varcte -> ID PUNTO ID varcte_param_fun .)


state 295

    (23) varcte_param_fun -> PARIZQ . llamada_param PARDER
    (147) llamada_param -> . expresion expresionr
    (148) llamada_param -> . empty
    (25) expresion -> . megaexp
    (149) empty -> .
    (38) megaexp -> . superexp megaexpr
    (30) superexp -> . exp oplog
    (99) exp -> . termino expr
    (98) termino -> . factor terminor
    (93) factor -> . PARIZQ expresion PARDER
    (94) factor -> . factor2 varcte
    (105) factor2 -> . MAS
    (106) factor2 -> . MENOS
    (107) factor2 -> . empty

    PARDER          reduce using rule 149 (empty -> .)
    ID              reduce using rule 149 (empty -> .)
    INTNUM          reduce using rule 149 (empty -> .)
    FLOATNUM        reduce using rule 149 (empty -> .)
    TRUE            reduce using rule 149 (empty -> .)
    FALSE           reduce using rule 149 (empty -> .)
    STRINGVAL       reduce using rule 149 (empty -> .)
    PARIZQ          shift and go to state 134
    MAS             shift and go to state 144
    MENOS           shift and go to state 145

    llamada_param                  shift and go to state 308
    expresion                      shift and go to state 136
    empty                          shift and go to state 137
    megaexp                        shift and go to state 138
    superexp                       shift and go to state 139
    exp                            shift and go to state 140
    termino                        shift and go to state 141
    factor                         shift and go to state 142
    factor2                        shift and go to state 143

state 296

    (24) varcte_param_fun -> empty .

    POR             reduce using rule 24 (varcte_param_fun -> empty .)
    SOBRE           reduce using rule 24 (varcte_param_fun -> empty .)
    MAS             reduce using rule 24 (varcte_param_fun -> empty .)
    MENOS           reduce using rule 24 (varcte_param_fun -> empty .)
    MAYORQUE        reduce using rule 24 (varcte_param_fun -> empty .)
    MENORQUE        reduce using rule 24 (varcte_param_fun -> empty .)
    DIFERENTE       reduce using rule 24 (varcte_param_fun -> empty .)
    MAYOROIGUAL     reduce using rule 24 (varcte_param_fun -> empty .)
    MENOROIGUAL     reduce using rule 24 (varcte_param_fun -> empty .)
    IGUALIGUAL      reduce using rule 24 (varcte_param_fun -> empty .)
    AND             reduce using rule 24 (varcte_param_fun -> empty .)
    OR              reduce using rule 24 (varcte_param_fun -> empty .)
    COMA            reduce using rule 24 (varcte_param_fun -> empty .)
    PARDER          reduce using rule 24 (varcte_param_fun -> empty .)
    CORCHDER        reduce using rule 24 (varcte_param_fun -> empty .)
    FLECHITA        reduce using rule 24 (varcte_param_fun -> empty .)
    COLON           reduce using rule 24 (varcte_param_fun -> empty .)
    CORCHIZQ        reduce using rule 24 (varcte_param_fun -> empty .)


state 297

    (22) varcte -> ID PARIZQ llamada_param PARDER .

    POR             reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    SOBRE           reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAS             reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOS           reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYORQUE        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENORQUE        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    DIFERENTE       reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYOROIGUAL     reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOROIGUAL     reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    IGUALIGUAL      reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    AND             reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    OR              reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    COMA            reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    PARDER          reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHDER        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    FLECHITA        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    COLON           reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHIZQ        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)


state 298

    (145) obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 145 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 145 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 145 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 145 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 145 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 145 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 145 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 145 (obj_call -> ID PUNTO ID PARIZQ llamada_param PARDER COLON .)


state 299

    (76) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    ID              reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    PARIZQ          reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MAS             reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MENOS           reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    TRUE            reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FALSE           reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRINGVAL       reduce using rule 76 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 300

    (112) range -> ID PUNTOSRANGO ID .

    PARDER          reduce using rule 112 (range -> ID PUNTOSRANGO ID .)


state 301

    (113) range -> ID PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 113 (range -> ID PUNTOSRANGO INTNUM .)


state 302

    (108) for -> FOR PARIZQ ID IN for2 PARDER bloque .

    ID              reduce using rule 108 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    IF              reduce using rule 108 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WRITE           reduce using rule 108 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    FOR             reduce using rule 108 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHILE           reduce using rule 108 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHEN            reduce using rule 108 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    LLAVEDER        reduce using rule 108 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    RETURN          reduce using rule 108 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)


state 303

    (111) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 111 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 304

    (114) range -> INTNUM PUNTOSRANGO ID .

    PARDER          reduce using rule 114 (range -> INTNUM PUNTOSRANGO ID .)


state 305

    (79) bloque3 -> expresion COLON .

    LLAVEDER        reduce using rule 79 (bloque3 -> expresion COLON .)


state 306

    (67) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 67 (asignacion2r -> COMA expresion asignacion2r .)


state 307

    (62) asignacion2 -> CID PARIZQ class_call_args expresionr PARDER .

    COLON           reduce using rule 62 (asignacion2 -> CID PARIZQ class_call_args expresionr PARDER .)


state 308

    (23) varcte_param_fun -> PARIZQ llamada_param . PARDER

    PARDER          shift and go to state 309


state 309

    (23) varcte_param_fun -> PARIZQ llamada_param PARDER .

    POR             reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    SOBRE           reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MAS             reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MENOS           reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MAYORQUE        reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MENORQUE        reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    DIFERENTE       reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MAYOROIGUAL     reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    MENOROIGUAL     reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    IGUALIGUAL      reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    AND             reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    OR              reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    COMA            reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    PARDER          reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    CORCHDER        reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    FLECHITA        reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    COLON           reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)
    CORCHIZQ        reduce using rule 23 (varcte_param_fun -> PARIZQ llamada_param PARDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 24 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 35 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for IF in state 91 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 91 resolved as shift
WARNING: shift/reduce conflict for FOR in state 91 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 91 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 92 resolved as shift
WARNING: shift/reduce conflict for FOR in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 92 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for IF in state 94 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 94 resolved as shift
WARNING: shift/reduce conflict for FOR in state 94 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 94 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 95 resolved as shift
WARNING: shift/reduce conflict for FOR in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 162 resolved as shift
WARNING: shift/reduce conflict for IF in state 162 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 162 resolved as shift
WARNING: shift/reduce conflict for FOR in state 162 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 162 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 162 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 206 resolved as shift
WARNING: shift/reduce conflict for IF in state 206 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 206 resolved as shift
WARNING: shift/reduce conflict for FOR in state 206 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 206 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 206 resolved as shift
WARNING: reduce/reduce conflict in state 96 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 96
WARNING: reduce/reduce conflict in state 96 resolved using rule (llamada -> empty)
WARNING: rejected rule (obj_call -> empty) in state 96
WARNING: reduce/reduce conflict in state 96 resolved using rule (estatuto -> empty)
WARNING: rejected rule (obj_call -> empty) in state 96
WARNING: reduce/reduce conflict in state 218 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 218
WARNING: reduce/reduce conflict in state 218 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 218
WARNING: reduce/reduce conflict in state 218 resolved using rule (llamada -> empty)
WARNING: rejected rule (obj_call -> empty) in state 218
WARNING: reduce/reduce conflict in state 218 resolved using rule (estatuto -> empty)
WARNING: rejected rule (obj_call -> empty) in state 218
WARNING: Rule (obj_call -> empty) is never reduced
WARNING: Rule (opc2 -> empty) is never reduced
