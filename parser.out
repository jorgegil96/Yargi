Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    RANGE

Grammar

Rule 0     S' -> class
Rule 1     resultado -> class
Rule 2     class -> CLASS CID classparams class2 body
Rule 3     class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER
Rule 4     class2 -> empty
Rule 5     classparams -> PARIZQ classparams2 PARDER
Rule 6     classparams2 -> vars
Rule 7     classparams2 -> empty
Rule 8     varcte -> ID
Rule 9     varcte -> INTNUM
Rule 10    varcte -> FLOATNUM
Rule 11    varcte -> TRUE
Rule 12    varcte -> FALSE
Rule 13    varcte -> STRINGVAL
Rule 14    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 15    varcte -> ID PUNTO ID
Rule 16    varcte -> ID PARIZQ llamada_param PARDER
Rule 17    expresion -> megaexp
Rule 18    expresionr -> COMA expresion expresionr
Rule 19    expresionr -> empty
Rule 20    expresion2 -> expresion expresionr
Rule 21    expresion2 -> empty
Rule 22    superexp -> exp oplog
Rule 23    oplog -> MAYORQUE exp
Rule 24    oplog -> MENORQUE exp
Rule 25    oplog -> DIFERENTE exp
Rule 26    oplog -> MAYOROIGUAL exp
Rule 27    oplog -> MENOROIGUAL exp
Rule 28    oplog -> IGUALIGUAL exp
Rule 29    oplog -> empty
Rule 30    megaexp -> superexp megaexpr
Rule 31    megaexpr -> AND superexp megaexpr
Rule 32    megaexpr -> OR superexp megaexpr
Rule 33    megaexpr -> empty
Rule 34    vars -> vars3 tipo vars2 COLON
Rule 35    vars -> vars3 tipo LIST vars2 COLON
Rule 36    varsr -> COMA ID varsr
Rule 37    varsr -> empty
Rule 38    vars2 -> ID varsr
Rule 39    vars3 -> PRIVATE
Rule 40    vars3 -> empty
Rule 41    estatuto -> asignacion estatuto
Rule 42    estatuto -> condicion estatuto
Rule 43    estatuto -> escritura estatuto
Rule 44    estatuto -> for estatuto
Rule 45    estatuto -> while estatuto
Rule 46    estatuto -> when estatuto
Rule 47    estatuto -> llamada estatuto
Rule 48    estatuto -> empty
Rule 49    asignacion -> ID asignacion3 IGUAL asignacion2 COLON
Rule 50    asignacion2 -> expresion
Rule 51    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 52    asignacion2 -> READ PARIZQ assign_read PARDER
Rule 53    assign_read -> STRINGVAL
Rule 54    assign_read -> empty
Rule 55    asignacion2r -> COMA expresion asignacion2r
Rule 56    asignacion2r -> empty
Rule 57    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 58    asignacion3 -> PUNTO ID
Rule 59    asignacion3 -> empty
Rule 60    condicion -> IF condicion2 estatutor
Rule 61    condicion2 -> PARIZQ expresion PARDER bloque
Rule 62    condicionr -> ELSE IF condicion2
Rule 63    condicionr -> empty
Rule 64    bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 65    bloque2 -> RETURN bloque3
Rule 66    bloque2 -> empty
Rule 67    bloque3 -> expresion COLON
Rule 68    bloque3 -> empty
Rule 69    estatutor -> ELSE bloque
Rule 70    estatutor -> empty
Rule 71    escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON
Rule 72    esc1 -> expresion
Rule 73    esc1 -> STRING
Rule 74    esc2 -> COMA esc1 esc2
Rule 75    esc2 -> empty
Rule 76    tipo -> INT
Rule 77    tipo -> FLOAT
Rule 78    tipo -> BOOL
Rule 79    tipo -> STRING
Rule 80    tipo -> CID
Rule 81    factor -> PARIZQ expresion PARDER
Rule 82    factor -> factor2 varcte
Rule 83    terminor -> POR factor terminor
Rule 84    terminor -> SOBRE factor terminor
Rule 85    terminor -> empty
Rule 86    termino -> factor terminor
Rule 87    exp -> termino expr
Rule 88    expr -> MAS termino expr
Rule 89    expr -> MENOS termino expr
Rule 90    expr -> empty
Rule 91    varcter -> COMA varcte varcter
Rule 92    varcter -> empty
Rule 93    factor2 -> MAS
Rule 94    factor2 -> MENOS
Rule 95    factor2 -> empty
Rule 96    for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 97    for2 -> ID
Rule 98    for2 -> range
Rule 99    range -> INTNUM PUNTOSRANGO INTNUM
Rule 100   range -> ID PUNTOSRANGO ID
Rule 101   range -> ID PUNTOSRANGO INTNUM
Rule 102   range -> INTNUM PUNTOSRANGO ID
Rule 103   while -> WHILE PARIZQ expresion PARDER bloque
Rule 104   when -> WHEN LLAVEIZQ when2 LLAVEDER
Rule 105   when2 -> expresion FLECHITA bloque when2
Rule 106   when2 -> ELSE FLECHITA bloque
Rule 107   when2 -> empty
Rule 108   fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 109   fun2 -> tipo ID funparamr
Rule 110   fun2 -> empty
Rule 111   funparamr -> COMA tipo ID funparamr
Rule 112   funparamr -> empty
Rule 113   fun3 -> DOSPUNTOS tipo
Rule 114   fun3 -> empty
Rule 115   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 116   opc1 -> vars multvarsdecl
Rule 117   opc1 -> empty
Rule 118   opc2 -> estatuto
Rule 119   opc2 -> empty
Rule 120   body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER mainbloque LLAVEDER
Rule 121   body2 -> vars multvarsdecl
Rule 122   body2 -> empty
Rule 123   mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER
Rule 124   multvarsdecl -> vars
Rule 125   multvarsdecl -> empty
Rule 126   funr -> fun funr
Rule 127   funr -> empty
Rule 128   llamada -> ID PARIZQ llamada_param PARDER COLON
Rule 129   llamada -> empty
Rule 130   llamada_param -> expresion expresionr
Rule 131   llamada_param -> empty
Rule 132   empty -> <empty>

Terminals, with rules where they appear

AND                  : 31
BOOL                 : 78
CID                  : 2 80
CLASS                : 2
COLON                : 34 35 49 67 71 128
COMA                 : 18 36 55 74 91 111
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 14 51 57
CORCHIZQ             : 14 51 57
DIFERENTE            : 25
DOSPUNTOS            : 3 113
ELSE                 : 62 69 106
EOL                  : 
FALSE                : 12
FLECHITA             : 105 106
FLOAT                : 77
FLOATNUM             : 10
FOR                  : 96
FUN                  : 108
GLOBAL               : 
ID                   : 3 8 14 15 15 16 36 38 49 58 96 97 100 100 101 102 108 109 111 128
IF                   : 60 62
IGUAL                : 49
IGUALIGUAL           : 28
IN                   : 96
INT                  : 76
INTNUM               : 9 99 99 101 102
LIST                 : 35
LLAVEDER             : 64 104 115 120 123
LLAVEIZQ             : 64 104 115 120 123
MAIN                 : 120
MAS                  : 88 93
MAYOROIGUAL          : 26
MAYORQUE             : 23
MENOROIGUAL          : 27
MENORQUE             : 24
MENOS                : 89 94
OR                   : 32
PARDER               : 3 5 16 52 61 71 81 96 103 108 120 128
PARIZQ               : 3 5 16 52 61 71 81 96 103 108 120 128
POR                  : 83
PRIVATE              : 39
PUNTO                : 15 58
PUNTOSRANGO          : 99 100 101 102
RANGE                : 
READ                 : 52
RETURN               : 65
SOBRE                : 84
STRING               : 73 79
STRINGVAL            : 13 53
TRUE                 : 11
WHEN                 : 104
WHILE                : 103
WRITE                : 71
error                : 

Nonterminals, with rules where they appear

asignacion           : 41
asignacion2          : 49
asignacion2r         : 51 55
asignacion3          : 49
assign_read          : 52
bloque               : 61 69 96 103 105 106
bloque2              : 64 115
bloque3              : 65
body                 : 2
body2                : 120 123
class                : 1 0
class2               : 2
classparams          : 2
classparams2         : 5
condicion            : 42
condicion2           : 60 62
condicionr           : 
empty                : 4 7 19 21 29 33 37 40 48 54 56 59 63 66 68 70 75 85 90 92 95 107 110 112 114 117 119 122 125 127 129 131
esc1                 : 71 74
esc2                 : 71 74
escritura            : 43
estatuto             : 41 42 43 44 45 46 47 64 118 123
estatutor            : 60
exp                  : 22 23 24 25 26 27 28
expr                 : 87 88 89
expresion            : 18 20 50 51 55 57 61 67 72 81 103 105 130
expresion2           : 
expresionr           : 18 20 130
factor               : 83 84 86
factor2              : 82
for                  : 44
for2                 : 96
fun                  : 126
fun2                 : 108
fun3                 : 108
funbody              : 108
funparamr            : 109 111
funr                 : 120 126
llamada              : 47
llamada_param        : 16 128
mainbloque           : 120
megaexp              : 17
megaexpr             : 30 31 32
multvarsdecl         : 116 121
opc1                 : 115
opc2                 : 115
oplog                : 22
range                : 98
resultado            : 
superexp             : 30 31 32
termino              : 87 88 89
terminor             : 83 84 86
tipo                 : 34 35 109 111 113
varcte               : 14 82 91
varcter              : 91
vars                 : 6 116 121 124
vars2                : 3 34 35
vars3                : 34 35 108
varsr                : 36 38
when                 : 46
when2                : 104 105
while                : 45

Parsing method: LALR

state 0

    (0) S' -> . class
    (2) class -> . CLASS CID classparams class2 body

    CLASS           shift and go to state 2

    class                          shift and go to state 1

state 1

    (0) S' -> class .



state 2

    (2) class -> CLASS . CID classparams class2 body

    CID             shift and go to state 3


state 3

    (2) class -> CLASS CID . classparams class2 body
    (5) classparams -> . PARIZQ classparams2 PARDER

    PARIZQ          shift and go to state 5

    classparams                    shift and go to state 4

state 4

    (2) class -> CLASS CID classparams . class2 body
    (3) class2 -> . DOSPUNTOS ID PARIZQ vars2 PARDER
    (4) class2 -> . empty
    (132) empty -> .

    DOSPUNTOS       shift and go to state 7
    LLAVEIZQ        reduce using rule 132 (empty -> .)

    class2                         shift and go to state 6
    empty                          shift and go to state 8

state 5

    (5) classparams -> PARIZQ . classparams2 PARDER
    (6) classparams2 -> . vars
    (7) classparams2 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (132) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    PARDER          reduce using rule 132 (empty -> .)
    INT             reduce using rule 132 (empty -> .)
    FLOAT           reduce using rule 132 (empty -> .)
    BOOL            reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)
    CID             reduce using rule 132 (empty -> .)
    PRIVATE         shift and go to state 13

    classparams2                   shift and go to state 9
    vars                           shift and go to state 10
    empty                          shift and go to state 11
    vars3                          shift and go to state 12

state 6

    (2) class -> CLASS CID classparams class2 . body
    (120) body -> . LLAVEIZQ body2 funr MAIN PARIZQ PARDER mainbloque LLAVEDER

    LLAVEIZQ        shift and go to state 15

    body                           shift and go to state 14

state 7

    (3) class2 -> DOSPUNTOS . ID PARIZQ vars2 PARDER

    ID              shift and go to state 16


state 8

    (4) class2 -> empty .

    LLAVEIZQ        reduce using rule 4 (class2 -> empty .)


state 9

    (5) classparams -> PARIZQ classparams2 . PARDER

    PARDER          shift and go to state 17


state 10

    (6) classparams2 -> vars .

    PARDER          reduce using rule 6 (classparams2 -> vars .)


state 11

    (7) classparams2 -> empty .
    (40) vars3 -> empty .

    PARDER          reduce using rule 7 (classparams2 -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 12

    (34) vars -> vars3 . tipo vars2 COLON
    (35) vars -> vars3 . tipo LIST vars2 COLON
    (76) tipo -> . INT
    (77) tipo -> . FLOAT
    (78) tipo -> . BOOL
    (79) tipo -> . STRING
    (80) tipo -> . CID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23

    tipo                           shift and go to state 18

state 13

    (39) vars3 -> PRIVATE .

    INT             reduce using rule 39 (vars3 -> PRIVATE .)
    FLOAT           reduce using rule 39 (vars3 -> PRIVATE .)
    BOOL            reduce using rule 39 (vars3 -> PRIVATE .)
    STRING          reduce using rule 39 (vars3 -> PRIVATE .)
    CID             reduce using rule 39 (vars3 -> PRIVATE .)
    FUN             reduce using rule 39 (vars3 -> PRIVATE .)


state 14

    (2) class -> CLASS CID classparams class2 body .

    $end            reduce using rule 2 (class -> CLASS CID classparams class2 body .)


state 15

    (120) body -> LLAVEIZQ . body2 funr MAIN PARIZQ PARDER mainbloque LLAVEDER
    (121) body2 -> . vars multvarsdecl
    (122) body2 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (132) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 132 (empty -> .)
    FUN             reduce using rule 132 (empty -> .)
    INT             reduce using rule 132 (empty -> .)
    FLOAT           reduce using rule 132 (empty -> .)
    BOOL            reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)
    CID             reduce using rule 132 (empty -> .)
    PRIVATE         shift and go to state 13

  ! PRIVATE         [ reduce using rule 132 (empty -> .) ]

    body2                          shift and go to state 24
    vars                           shift and go to state 25
    empty                          shift and go to state 26
    vars3                          shift and go to state 12

state 16

    (3) class2 -> DOSPUNTOS ID . PARIZQ vars2 PARDER

    PARIZQ          shift and go to state 27


state 17

    (5) classparams -> PARIZQ classparams2 PARDER .

    DOSPUNTOS       reduce using rule 5 (classparams -> PARIZQ classparams2 PARDER .)
    LLAVEIZQ        reduce using rule 5 (classparams -> PARIZQ classparams2 PARDER .)


state 18

    (34) vars -> vars3 tipo . vars2 COLON
    (35) vars -> vars3 tipo . LIST vars2 COLON
    (38) vars2 -> . ID varsr

    LIST            shift and go to state 29
    ID              shift and go to state 30

    vars2                          shift and go to state 28

state 19

    (76) tipo -> INT .

    LIST            reduce using rule 76 (tipo -> INT .)
    ID              reduce using rule 76 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 76 (tipo -> INT .)


state 20

    (77) tipo -> FLOAT .

    LIST            reduce using rule 77 (tipo -> FLOAT .)
    ID              reduce using rule 77 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 77 (tipo -> FLOAT .)


state 21

    (78) tipo -> BOOL .

    LIST            reduce using rule 78 (tipo -> BOOL .)
    ID              reduce using rule 78 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 78 (tipo -> BOOL .)


state 22

    (79) tipo -> STRING .

    LIST            reduce using rule 79 (tipo -> STRING .)
    ID              reduce using rule 79 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 79 (tipo -> STRING .)


state 23

    (80) tipo -> CID .

    LIST            reduce using rule 80 (tipo -> CID .)
    ID              reduce using rule 80 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 80 (tipo -> CID .)


state 24

    (120) body -> LLAVEIZQ body2 . funr MAIN PARIZQ PARDER mainbloque LLAVEDER
    (126) funr -> . fun funr
    (127) funr -> . empty
    (108) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (132) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    MAIN            reduce using rule 132 (empty -> .)
    FUN             reduce using rule 132 (empty -> .)
    PRIVATE         shift and go to state 13

    funr                           shift and go to state 31
    fun                            shift and go to state 32
    empty                          shift and go to state 33
    vars3                          shift and go to state 34

state 25

    (121) body2 -> vars . multvarsdecl
    (124) multvarsdecl -> . vars
    (125) multvarsdecl -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (132) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 132 (empty -> .)
    FUN             reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    WRITE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    WHEN            reduce using rule 132 (empty -> .)
    LLAVEDER        reduce using rule 132 (empty -> .)
    INT             reduce using rule 132 (empty -> .)
    FLOAT           reduce using rule 132 (empty -> .)
    BOOL            reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)
    CID             reduce using rule 132 (empty -> .)
    PRIVATE         shift and go to state 13

  ! PRIVATE         [ reduce using rule 132 (empty -> .) ]

    vars                           shift and go to state 35
    multvarsdecl                   shift and go to state 36
    empty                          shift and go to state 37
    vars3                          shift and go to state 12

state 26

    (122) body2 -> empty .
    (40) vars3 -> empty .

    PRIVATE         reduce using rule 122 (body2 -> empty .)
    MAIN            reduce using rule 122 (body2 -> empty .)
    FUN             reduce using rule 122 (body2 -> empty .)
    ID              reduce using rule 122 (body2 -> empty .)
    IF              reduce using rule 122 (body2 -> empty .)
    WRITE           reduce using rule 122 (body2 -> empty .)
    FOR             reduce using rule 122 (body2 -> empty .)
    WHILE           reduce using rule 122 (body2 -> empty .)
    WHEN            reduce using rule 122 (body2 -> empty .)
    LLAVEDER        reduce using rule 122 (body2 -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 27

    (3) class2 -> DOSPUNTOS ID PARIZQ . vars2 PARDER
    (38) vars2 -> . ID varsr

    ID              shift and go to state 30

    vars2                          shift and go to state 38

state 28

    (34) vars -> vars3 tipo vars2 . COLON

    COLON           shift and go to state 39


state 29

    (35) vars -> vars3 tipo LIST . vars2 COLON
    (38) vars2 -> . ID varsr

    ID              shift and go to state 30

    vars2                          shift and go to state 40

state 30

    (38) vars2 -> ID . varsr
    (36) varsr -> . COMA ID varsr
    (37) varsr -> . empty
    (132) empty -> .

    COMA            shift and go to state 42
    COLON           reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)

    varsr                          shift and go to state 41
    empty                          shift and go to state 43

state 31

    (120) body -> LLAVEIZQ body2 funr . MAIN PARIZQ PARDER mainbloque LLAVEDER

    MAIN            shift and go to state 44


state 32

    (126) funr -> fun . funr
    (126) funr -> . fun funr
    (127) funr -> . empty
    (108) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (132) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    MAIN            reduce using rule 132 (empty -> .)
    FUN             reduce using rule 132 (empty -> .)
    PRIVATE         shift and go to state 13

    fun                            shift and go to state 32
    funr                           shift and go to state 45
    empty                          shift and go to state 33
    vars3                          shift and go to state 34

state 33

    (127) funr -> empty .
    (40) vars3 -> empty .

    MAIN            reduce using rule 127 (funr -> empty .)
    FUN             reduce using rule 40 (vars3 -> empty .)


state 34

    (108) fun -> vars3 . FUN ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 46


state 35

    (124) multvarsdecl -> vars .

    PRIVATE         reduce using rule 124 (multvarsdecl -> vars .)
    MAIN            reduce using rule 124 (multvarsdecl -> vars .)
    FUN             reduce using rule 124 (multvarsdecl -> vars .)
    ID              reduce using rule 124 (multvarsdecl -> vars .)
    IF              reduce using rule 124 (multvarsdecl -> vars .)
    WRITE           reduce using rule 124 (multvarsdecl -> vars .)
    FOR             reduce using rule 124 (multvarsdecl -> vars .)
    WHILE           reduce using rule 124 (multvarsdecl -> vars .)
    WHEN            reduce using rule 124 (multvarsdecl -> vars .)
    LLAVEDER        reduce using rule 124 (multvarsdecl -> vars .)
    RETURN          reduce using rule 124 (multvarsdecl -> vars .)


state 36

    (121) body2 -> vars multvarsdecl .

    PRIVATE         reduce using rule 121 (body2 -> vars multvarsdecl .)
    MAIN            reduce using rule 121 (body2 -> vars multvarsdecl .)
    FUN             reduce using rule 121 (body2 -> vars multvarsdecl .)
    ID              reduce using rule 121 (body2 -> vars multvarsdecl .)
    IF              reduce using rule 121 (body2 -> vars multvarsdecl .)
    WRITE           reduce using rule 121 (body2 -> vars multvarsdecl .)
    FOR             reduce using rule 121 (body2 -> vars multvarsdecl .)
    WHILE           reduce using rule 121 (body2 -> vars multvarsdecl .)
    WHEN            reduce using rule 121 (body2 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 121 (body2 -> vars multvarsdecl .)


state 37

    (125) multvarsdecl -> empty .
    (40) vars3 -> empty .

    PRIVATE         reduce using rule 125 (multvarsdecl -> empty .)
    MAIN            reduce using rule 125 (multvarsdecl -> empty .)
    FUN             reduce using rule 125 (multvarsdecl -> empty .)
    ID              reduce using rule 125 (multvarsdecl -> empty .)
    IF              reduce using rule 125 (multvarsdecl -> empty .)
    WRITE           reduce using rule 125 (multvarsdecl -> empty .)
    FOR             reduce using rule 125 (multvarsdecl -> empty .)
    WHILE           reduce using rule 125 (multvarsdecl -> empty .)
    WHEN            reduce using rule 125 (multvarsdecl -> empty .)
    LLAVEDER        reduce using rule 125 (multvarsdecl -> empty .)
    RETURN          reduce using rule 125 (multvarsdecl -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 38

    (3) class2 -> DOSPUNTOS ID PARIZQ vars2 . PARDER

    PARDER          shift and go to state 47


state 39

    (34) vars -> vars3 tipo vars2 COLON .

    PARDER          reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    PRIVATE         reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    INT             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    FLOAT           reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    BOOL            reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    STRING          reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    CID             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    MAIN            reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    FUN             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    ID              reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    IF              reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    WRITE           reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    FOR             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    WHILE           reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    WHEN            reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    LLAVEDER        reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    RETURN          reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)


state 40

    (35) vars -> vars3 tipo LIST vars2 . COLON

    COLON           shift and go to state 48


state 41

    (38) vars2 -> ID varsr .

    COLON           reduce using rule 38 (vars2 -> ID varsr .)
    PARDER          reduce using rule 38 (vars2 -> ID varsr .)


state 42

    (36) varsr -> COMA . ID varsr

    ID              shift and go to state 49


state 43

    (37) varsr -> empty .

    COLON           reduce using rule 37 (varsr -> empty .)
    PARDER          reduce using rule 37 (varsr -> empty .)


state 44

    (120) body -> LLAVEIZQ body2 funr MAIN . PARIZQ PARDER mainbloque LLAVEDER

    PARIZQ          shift and go to state 50


state 45

    (126) funr -> fun funr .

    MAIN            reduce using rule 126 (funr -> fun funr .)


state 46

    (108) fun -> vars3 FUN . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 51


state 47

    (3) class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .

    LLAVEIZQ        reduce using rule 3 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)


state 48

    (35) vars -> vars3 tipo LIST vars2 COLON .

    PARDER          reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    PRIVATE         reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    INT             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    FLOAT           reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    BOOL            reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    STRING          reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    CID             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    MAIN            reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    FUN             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    ID              reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    IF              reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    WRITE           reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    FOR             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    WHILE           reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    WHEN            reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    LLAVEDER        reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    RETURN          reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)


state 49

    (36) varsr -> COMA ID . varsr
    (36) varsr -> . COMA ID varsr
    (37) varsr -> . empty
    (132) empty -> .

    COMA            shift and go to state 42
    COLON           reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)

    varsr                          shift and go to state 52
    empty                          shift and go to state 43

state 50

    (120) body -> LLAVEIZQ body2 funr MAIN PARIZQ . PARDER mainbloque LLAVEDER

    PARDER          shift and go to state 53


state 51

    (108) fun -> vars3 FUN ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 54


state 52

    (36) varsr -> COMA ID varsr .

    COLON           reduce using rule 36 (varsr -> COMA ID varsr .)
    PARDER          reduce using rule 36 (varsr -> COMA ID varsr .)


state 53

    (120) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER . mainbloque LLAVEDER
    (123) mainbloque -> . LLAVEIZQ body2 estatuto LLAVEDER

    LLAVEIZQ        shift and go to state 55

    mainbloque                     shift and go to state 56

state 54

    (108) fun -> vars3 FUN ID PARIZQ . fun2 PARDER fun3 funbody
    (109) fun2 -> . tipo ID funparamr
    (110) fun2 -> . empty
    (76) tipo -> . INT
    (77) tipo -> . FLOAT
    (78) tipo -> . BOOL
    (79) tipo -> . STRING
    (80) tipo -> . CID
    (132) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23
    PARDER          reduce using rule 132 (empty -> .)

    fun2                           shift and go to state 57
    tipo                           shift and go to state 58
    empty                          shift and go to state 59

state 55

    (123) mainbloque -> LLAVEIZQ . body2 estatuto LLAVEDER
    (121) body2 -> . vars multvarsdecl
    (122) body2 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (132) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    ID              reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    WRITE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    WHEN            reduce using rule 132 (empty -> .)
    LLAVEDER        reduce using rule 132 (empty -> .)
    INT             reduce using rule 132 (empty -> .)
    FLOAT           reduce using rule 132 (empty -> .)
    BOOL            reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)
    CID             reduce using rule 132 (empty -> .)
    PRIVATE         shift and go to state 13

    body2                          shift and go to state 60
    vars                           shift and go to state 25
    empty                          shift and go to state 26
    vars3                          shift and go to state 12

state 56

    (120) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER mainbloque . LLAVEDER

    LLAVEDER        shift and go to state 61


state 57

    (108) fun -> vars3 FUN ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 62


state 58

    (109) fun2 -> tipo . ID funparamr

    ID              shift and go to state 63


state 59

    (110) fun2 -> empty .

    PARDER          reduce using rule 110 (fun2 -> empty .)


state 60

    (123) mainbloque -> LLAVEIZQ body2 . estatuto LLAVEDER
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty
    (132) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78
    LLAVEDER        reduce using rule 132 (empty -> .)

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    estatuto                       shift and go to state 64
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    for                            shift and go to state 68
    while                          shift and go to state 69
    when                           shift and go to state 70
    llamada                        shift and go to state 71
    empty                          shift and go to state 72

state 61

    (120) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER mainbloque LLAVEDER .

    $end            reduce using rule 120 (body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER mainbloque LLAVEDER .)


state 62

    (108) fun -> vars3 FUN ID PARIZQ fun2 PARDER . fun3 funbody
    (113) fun3 -> . DOSPUNTOS tipo
    (114) fun3 -> . empty
    (132) empty -> .

    DOSPUNTOS       shift and go to state 80
    LLAVEIZQ        reduce using rule 132 (empty -> .)

    fun3                           shift and go to state 79
    empty                          shift and go to state 81

state 63

    (109) fun2 -> tipo ID . funparamr
    (111) funparamr -> . COMA tipo ID funparamr
    (112) funparamr -> . empty
    (132) empty -> .

    COMA            shift and go to state 83
    PARDER          reduce using rule 132 (empty -> .)

    funparamr                      shift and go to state 82
    empty                          shift and go to state 84

state 64

    (123) mainbloque -> LLAVEIZQ body2 estatuto . LLAVEDER

    LLAVEDER        shift and go to state 85


state 65

    (41) estatuto -> asignacion . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty
    (132) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78
    LLAVEDER        reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    asignacion                     shift and go to state 65
    estatuto                       shift and go to state 86
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    for                            shift and go to state 68
    while                          shift and go to state 69
    when                           shift and go to state 70
    llamada                        shift and go to state 71
    empty                          shift and go to state 72

state 66

    (42) estatuto -> condicion . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty
    (132) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78
    LLAVEDER        reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    condicion                      shift and go to state 66
    estatuto                       shift and go to state 87
    asignacion                     shift and go to state 65
    escritura                      shift and go to state 67
    for                            shift and go to state 68
    while                          shift and go to state 69
    when                           shift and go to state 70
    llamada                        shift and go to state 71
    empty                          shift and go to state 72

state 67

    (43) estatuto -> escritura . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty
    (132) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78
    LLAVEDER        reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    escritura                      shift and go to state 67
    estatuto                       shift and go to state 88
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    for                            shift and go to state 68
    while                          shift and go to state 69
    when                           shift and go to state 70
    llamada                        shift and go to state 71
    empty                          shift and go to state 72

state 68

    (44) estatuto -> for . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty
    (132) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78
    LLAVEDER        reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    for                            shift and go to state 68
    estatuto                       shift and go to state 89
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    while                          shift and go to state 69
    when                           shift and go to state 70
    llamada                        shift and go to state 71
    empty                          shift and go to state 72

state 69

    (45) estatuto -> while . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty
    (132) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78
    LLAVEDER        reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    while                          shift and go to state 69
    estatuto                       shift and go to state 90
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    for                            shift and go to state 68
    when                           shift and go to state 70
    llamada                        shift and go to state 71
    empty                          shift and go to state 72

state 70

    (46) estatuto -> when . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty
    (132) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78
    LLAVEDER        reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    when                           shift and go to state 70
    estatuto                       shift and go to state 91
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    for                            shift and go to state 68
    while                          shift and go to state 69
    llamada                        shift and go to state 71
    empty                          shift and go to state 72

state 71

    (47) estatuto -> llamada . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty
    (132) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78
    LLAVEDER        reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    llamada                        shift and go to state 71
    estatuto                       shift and go to state 92
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    for                            shift and go to state 68
    while                          shift and go to state 69
    when                           shift and go to state 70
    empty                          shift and go to state 72

state 72

    (48) estatuto -> empty .
    (129) llamada -> empty .

  ! reduce/reduce conflict for LLAVEDER resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 48 (estatuto -> empty .)
    LLAVEDER        reduce using rule 48 (estatuto -> empty .)
    RETURN          reduce using rule 48 (estatuto -> empty .)
    ID              reduce using rule 129 (llamada -> empty .)
    IF              reduce using rule 129 (llamada -> empty .)
    WRITE           reduce using rule 129 (llamada -> empty .)
    FOR             reduce using rule 129 (llamada -> empty .)
    WHILE           reduce using rule 129 (llamada -> empty .)
    WHEN            reduce using rule 129 (llamada -> empty .)

  ! LLAVEDER        [ reduce using rule 129 (llamada -> empty .) ]
  ! RETURN          [ reduce using rule 129 (llamada -> empty .) ]


state 73

    (49) asignacion -> ID . asignacion3 IGUAL asignacion2 COLON
    (128) llamada -> ID . PARIZQ llamada_param PARDER COLON
    (57) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (58) asignacion3 -> . PUNTO ID
    (59) asignacion3 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 94
    CORCHIZQ        shift and go to state 95
    PUNTO           shift and go to state 96
    IGUAL           reduce using rule 132 (empty -> .)

    asignacion3                    shift and go to state 93
    empty                          shift and go to state 97

state 74

    (60) condicion -> IF . condicion2 estatutor
    (61) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 99

    condicion2                     shift and go to state 98

state 75

    (71) escritura -> WRITE . PARIZQ esc1 esc2 PARDER COLON

    PARIZQ          shift and go to state 100


state 76

    (96) for -> FOR . PARIZQ ID IN for2 PARDER bloque

    PARIZQ          shift and go to state 101


state 77

    (103) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 102


state 78

    (104) when -> WHEN . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 103


state 79

    (108) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 . funbody
    (115) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 105

    funbody                        shift and go to state 104

state 80

    (113) fun3 -> DOSPUNTOS . tipo
    (76) tipo -> . INT
    (77) tipo -> . FLOAT
    (78) tipo -> . BOOL
    (79) tipo -> . STRING
    (80) tipo -> . CID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23

    tipo                           shift and go to state 106

state 81

    (114) fun3 -> empty .

    LLAVEIZQ        reduce using rule 114 (fun3 -> empty .)


state 82

    (109) fun2 -> tipo ID funparamr .

    PARDER          reduce using rule 109 (fun2 -> tipo ID funparamr .)


state 83

    (111) funparamr -> COMA . tipo ID funparamr
    (76) tipo -> . INT
    (77) tipo -> . FLOAT
    (78) tipo -> . BOOL
    (79) tipo -> . STRING
    (80) tipo -> . CID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23

    tipo                           shift and go to state 107

state 84

    (112) funparamr -> empty .

    PARDER          reduce using rule 112 (funparamr -> empty .)


state 85

    (123) mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .

    LLAVEDER        reduce using rule 123 (mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .)


state 86

    (41) estatuto -> asignacion estatuto .

    LLAVEDER        reduce using rule 41 (estatuto -> asignacion estatuto .)
    RETURN          reduce using rule 41 (estatuto -> asignacion estatuto .)


state 87

    (42) estatuto -> condicion estatuto .

    LLAVEDER        reduce using rule 42 (estatuto -> condicion estatuto .)
    RETURN          reduce using rule 42 (estatuto -> condicion estatuto .)


state 88

    (43) estatuto -> escritura estatuto .

    LLAVEDER        reduce using rule 43 (estatuto -> escritura estatuto .)
    RETURN          reduce using rule 43 (estatuto -> escritura estatuto .)


state 89

    (44) estatuto -> for estatuto .

    LLAVEDER        reduce using rule 44 (estatuto -> for estatuto .)
    RETURN          reduce using rule 44 (estatuto -> for estatuto .)


state 90

    (45) estatuto -> while estatuto .

    LLAVEDER        reduce using rule 45 (estatuto -> while estatuto .)
    RETURN          reduce using rule 45 (estatuto -> while estatuto .)


state 91

    (46) estatuto -> when estatuto .

    LLAVEDER        reduce using rule 46 (estatuto -> when estatuto .)
    RETURN          reduce using rule 46 (estatuto -> when estatuto .)


state 92

    (47) estatuto -> llamada estatuto .

    LLAVEDER        reduce using rule 47 (estatuto -> llamada estatuto .)
    RETURN          reduce using rule 47 (estatuto -> llamada estatuto .)


state 93

    (49) asignacion -> ID asignacion3 . IGUAL asignacion2 COLON

    IGUAL           shift and go to state 108


state 94

    (128) llamada -> ID PARIZQ . llamada_param PARDER COLON
    (130) llamada_param -> . expresion expresionr
    (131) llamada_param -> . empty
    (17) expresion -> . megaexp
    (132) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty

    PARDER          reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120

    llamada_param                  shift and go to state 110
    expresion                      shift and go to state 111
    empty                          shift and go to state 112
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118

state 95

    (57) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    expresion                      shift and go to state 121
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 96

    (58) asignacion3 -> PUNTO . ID

    ID              shift and go to state 123


state 97

    (59) asignacion3 -> empty .

    IGUAL           reduce using rule 59 (asignacion3 -> empty .)


state 98

    (60) condicion -> IF condicion2 . estatutor
    (69) estatutor -> . ELSE bloque
    (70) estatutor -> . empty
    (132) empty -> .

    ELSE            shift and go to state 125
    ID              reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    WRITE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    WHEN            reduce using rule 132 (empty -> .)
    LLAVEDER        reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)

    estatutor                      shift and go to state 124
    empty                          shift and go to state 126

state 99

    (61) condicion2 -> PARIZQ . expresion PARDER bloque
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    expresion                      shift and go to state 127
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 100

    (71) escritura -> WRITE PARIZQ . esc1 esc2 PARDER COLON
    (72) esc1 -> . expresion
    (73) esc1 -> . STRING
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    STRING          shift and go to state 130
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    esc1                           shift and go to state 128
    expresion                      shift and go to state 129
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 101

    (96) for -> FOR PARIZQ . ID IN for2 PARDER bloque

    ID              shift and go to state 131


state 102

    (103) while -> WHILE PARIZQ . expresion PARDER bloque
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    expresion                      shift and go to state 132
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 103

    (104) when -> WHEN LLAVEIZQ . when2 LLAVEDER
    (105) when2 -> . expresion FLECHITA bloque when2
    (106) when2 -> . ELSE FLECHITA bloque
    (107) when2 -> . empty
    (17) expresion -> . megaexp
    (132) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty

    ELSE            shift and go to state 135
    LLAVEDER        reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120

    when2                          shift and go to state 133
    expresion                      shift and go to state 134
    empty                          shift and go to state 136
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118

state 104

    (108) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .

    PRIVATE         reduce using rule 108 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    FUN             reduce using rule 108 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    MAIN            reduce using rule 108 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)


state 105

    (115) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (116) opc1 -> . vars multvarsdecl
    (117) opc1 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (132) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    ID              reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    WRITE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    WHEN            reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)
    LLAVEDER        reduce using rule 132 (empty -> .)
    INT             reduce using rule 132 (empty -> .)
    FLOAT           reduce using rule 132 (empty -> .)
    BOOL            reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)
    CID             reduce using rule 132 (empty -> .)
    PRIVATE         shift and go to state 13

    opc1                           shift and go to state 137
    vars                           shift and go to state 138
    empty                          shift and go to state 139
    vars3                          shift and go to state 12

state 106

    (113) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 113 (fun3 -> DOSPUNTOS tipo .)


state 107

    (111) funparamr -> COMA tipo . ID funparamr

    ID              shift and go to state 140


state 108

    (49) asignacion -> ID asignacion3 IGUAL . asignacion2 COLON
    (50) asignacion2 -> . expresion
    (51) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (52) asignacion2 -> . READ PARIZQ assign_read PARDER
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    CORCHDER        shift and go to state 143
    READ            shift and go to state 144
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    asignacion2                    shift and go to state 141
    expresion                      shift and go to state 142
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 109

    (81) factor -> PARIZQ . expresion PARDER
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    expresion                      shift and go to state 145
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 110

    (128) llamada -> ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 146


state 111

    (130) llamada_param -> expresion . expresionr
    (18) expresionr -> . COMA expresion expresionr
    (19) expresionr -> . empty
    (132) empty -> .

    COMA            shift and go to state 148
    PARDER          reduce using rule 132 (empty -> .)

    expresionr                     shift and go to state 147
    empty                          shift and go to state 149

state 112

    (131) llamada_param -> empty .
    (95) factor2 -> empty .

    PARDER          reduce using rule 131 (llamada_param -> empty .)
    ID              reduce using rule 95 (factor2 -> empty .)
    INTNUM          reduce using rule 95 (factor2 -> empty .)
    FLOATNUM        reduce using rule 95 (factor2 -> empty .)
    TRUE            reduce using rule 95 (factor2 -> empty .)
    FALSE           reduce using rule 95 (factor2 -> empty .)
    STRINGVAL       reduce using rule 95 (factor2 -> empty .)


state 113

    (17) expresion -> megaexp .

    COMA            reduce using rule 17 (expresion -> megaexp .)
    PARDER          reduce using rule 17 (expresion -> megaexp .)
    CORCHDER        reduce using rule 17 (expresion -> megaexp .)
    FLECHITA        reduce using rule 17 (expresion -> megaexp .)
    COLON           reduce using rule 17 (expresion -> megaexp .)
    CORCHIZQ        reduce using rule 17 (expresion -> megaexp .)


state 114

    (30) megaexp -> superexp . megaexpr
    (31) megaexpr -> . AND superexp megaexpr
    (32) megaexpr -> . OR superexp megaexpr
    (33) megaexpr -> . empty
    (132) empty -> .

    AND             shift and go to state 151
    OR              shift and go to state 152
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    megaexpr                       shift and go to state 150
    empty                          shift and go to state 153

state 115

    (22) superexp -> exp . oplog
    (23) oplog -> . MAYORQUE exp
    (24) oplog -> . MENORQUE exp
    (25) oplog -> . DIFERENTE exp
    (26) oplog -> . MAYOROIGUAL exp
    (27) oplog -> . MENOROIGUAL exp
    (28) oplog -> . IGUALIGUAL exp
    (29) oplog -> . empty
    (132) empty -> .

    MAYORQUE        shift and go to state 155
    MENORQUE        shift and go to state 156
    DIFERENTE       shift and go to state 157
    MAYOROIGUAL     shift and go to state 158
    MENOROIGUAL     shift and go to state 159
    IGUALIGUAL      shift and go to state 160
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    oplog                          shift and go to state 154
    empty                          shift and go to state 161

state 116

    (87) exp -> termino . expr
    (88) expr -> . MAS termino expr
    (89) expr -> . MENOS termino expr
    (90) expr -> . empty
    (132) empty -> .

    MAS             shift and go to state 163
    MENOS           shift and go to state 164
    MAYORQUE        reduce using rule 132 (empty -> .)
    MENORQUE        reduce using rule 132 (empty -> .)
    DIFERENTE       reduce using rule 132 (empty -> .)
    MAYOROIGUAL     reduce using rule 132 (empty -> .)
    MENOROIGUAL     reduce using rule 132 (empty -> .)
    IGUALIGUAL      reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    expr                           shift and go to state 162
    empty                          shift and go to state 165

state 117

    (86) termino -> factor . terminor
    (83) terminor -> . POR factor terminor
    (84) terminor -> . SOBRE factor terminor
    (85) terminor -> . empty
    (132) empty -> .

    POR             shift and go to state 167
    SOBRE           shift and go to state 168
    MAS             reduce using rule 132 (empty -> .)
    MENOS           reduce using rule 132 (empty -> .)
    MAYORQUE        reduce using rule 132 (empty -> .)
    MENORQUE        reduce using rule 132 (empty -> .)
    DIFERENTE       reduce using rule 132 (empty -> .)
    MAYOROIGUAL     reduce using rule 132 (empty -> .)
    MENOROIGUAL     reduce using rule 132 (empty -> .)
    IGUALIGUAL      reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    terminor                       shift and go to state 166
    empty                          shift and go to state 169

state 118

    (82) factor -> factor2 . varcte
    (8) varcte -> . ID
    (9) varcte -> . INTNUM
    (10) varcte -> . FLOATNUM
    (11) varcte -> . TRUE
    (12) varcte -> . FALSE
    (13) varcte -> . STRINGVAL
    (14) varcte -> . ID CORCHIZQ varcte CORCHDER
    (15) varcte -> . ID PUNTO ID
    (16) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 171
    INTNUM          shift and go to state 172
    FLOATNUM        shift and go to state 173
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175
    STRINGVAL       shift and go to state 176

    varcte                         shift and go to state 170

state 119

    (93) factor2 -> MAS .

    ID              reduce using rule 93 (factor2 -> MAS .)
    INTNUM          reduce using rule 93 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 93 (factor2 -> MAS .)
    TRUE            reduce using rule 93 (factor2 -> MAS .)
    FALSE           reduce using rule 93 (factor2 -> MAS .)
    STRINGVAL       reduce using rule 93 (factor2 -> MAS .)


state 120

    (94) factor2 -> MENOS .

    ID              reduce using rule 94 (factor2 -> MENOS .)
    INTNUM          reduce using rule 94 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 94 (factor2 -> MENOS .)
    TRUE            reduce using rule 94 (factor2 -> MENOS .)
    FALSE           reduce using rule 94 (factor2 -> MENOS .)
    STRINGVAL       reduce using rule 94 (factor2 -> MENOS .)


state 121

    (57) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 177


state 122

    (95) factor2 -> empty .

    ID              reduce using rule 95 (factor2 -> empty .)
    INTNUM          reduce using rule 95 (factor2 -> empty .)
    FLOATNUM        reduce using rule 95 (factor2 -> empty .)
    TRUE            reduce using rule 95 (factor2 -> empty .)
    FALSE           reduce using rule 95 (factor2 -> empty .)
    STRINGVAL       reduce using rule 95 (factor2 -> empty .)


state 123

    (58) asignacion3 -> PUNTO ID .

    IGUAL           reduce using rule 58 (asignacion3 -> PUNTO ID .)


state 124

    (60) condicion -> IF condicion2 estatutor .

    ID              reduce using rule 60 (condicion -> IF condicion2 estatutor .)
    IF              reduce using rule 60 (condicion -> IF condicion2 estatutor .)
    WRITE           reduce using rule 60 (condicion -> IF condicion2 estatutor .)
    FOR             reduce using rule 60 (condicion -> IF condicion2 estatutor .)
    WHILE           reduce using rule 60 (condicion -> IF condicion2 estatutor .)
    WHEN            reduce using rule 60 (condicion -> IF condicion2 estatutor .)
    LLAVEDER        reduce using rule 60 (condicion -> IF condicion2 estatutor .)
    RETURN          reduce using rule 60 (condicion -> IF condicion2 estatutor .)


state 125

    (69) estatutor -> ELSE . bloque
    (64) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 179

    bloque                         shift and go to state 178

state 126

    (70) estatutor -> empty .

    ID              reduce using rule 70 (estatutor -> empty .)
    IF              reduce using rule 70 (estatutor -> empty .)
    WRITE           reduce using rule 70 (estatutor -> empty .)
    FOR             reduce using rule 70 (estatutor -> empty .)
    WHILE           reduce using rule 70 (estatutor -> empty .)
    WHEN            reduce using rule 70 (estatutor -> empty .)
    LLAVEDER        reduce using rule 70 (estatutor -> empty .)
    RETURN          reduce using rule 70 (estatutor -> empty .)


state 127

    (61) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 180


state 128

    (71) escritura -> WRITE PARIZQ esc1 . esc2 PARDER COLON
    (74) esc2 -> . COMA esc1 esc2
    (75) esc2 -> . empty
    (132) empty -> .

    COMA            shift and go to state 182
    PARDER          reduce using rule 132 (empty -> .)

    esc2                           shift and go to state 181
    empty                          shift and go to state 183

state 129

    (72) esc1 -> expresion .

    COMA            reduce using rule 72 (esc1 -> expresion .)
    PARDER          reduce using rule 72 (esc1 -> expresion .)


state 130

    (73) esc1 -> STRING .

    COMA            reduce using rule 73 (esc1 -> STRING .)
    PARDER          reduce using rule 73 (esc1 -> STRING .)


state 131

    (96) for -> FOR PARIZQ ID . IN for2 PARDER bloque

    IN              shift and go to state 184


state 132

    (103) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 185


state 133

    (104) when -> WHEN LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 186


state 134

    (105) when2 -> expresion . FLECHITA bloque when2

    FLECHITA        shift and go to state 187


state 135

    (106) when2 -> ELSE . FLECHITA bloque

    FLECHITA        shift and go to state 188


state 136

    (107) when2 -> empty .
    (95) factor2 -> empty .

    LLAVEDER        reduce using rule 107 (when2 -> empty .)
    ID              reduce using rule 95 (factor2 -> empty .)
    INTNUM          reduce using rule 95 (factor2 -> empty .)
    FLOATNUM        reduce using rule 95 (factor2 -> empty .)
    TRUE            reduce using rule 95 (factor2 -> empty .)
    FALSE           reduce using rule 95 (factor2 -> empty .)
    STRINGVAL       reduce using rule 95 (factor2 -> empty .)


state 137

    (115) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (118) opc2 -> . estatuto
    (119) opc2 -> . empty
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (132) empty -> .
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 132 (empty -> .)
    LLAVEDER        reduce using rule 132 (empty -> .)
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    opc2                           shift and go to state 189
    estatuto                       shift and go to state 190
    empty                          shift and go to state 191
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    for                            shift and go to state 68
    while                          shift and go to state 69
    when                           shift and go to state 70
    llamada                        shift and go to state 71

state 138

    (116) opc1 -> vars . multvarsdecl
    (124) multvarsdecl -> . vars
    (125) multvarsdecl -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (132) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    ID              reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    WRITE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    WHEN            reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)
    LLAVEDER        reduce using rule 132 (empty -> .)
    INT             reduce using rule 132 (empty -> .)
    FLOAT           reduce using rule 132 (empty -> .)
    BOOL            reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)
    CID             reduce using rule 132 (empty -> .)
    PRIVATE         shift and go to state 13

    vars                           shift and go to state 35
    multvarsdecl                   shift and go to state 192
    empty                          shift and go to state 37
    vars3                          shift and go to state 12

state 139

    (117) opc1 -> empty .
    (40) vars3 -> empty .

    ID              reduce using rule 117 (opc1 -> empty .)
    IF              reduce using rule 117 (opc1 -> empty .)
    WRITE           reduce using rule 117 (opc1 -> empty .)
    FOR             reduce using rule 117 (opc1 -> empty .)
    WHILE           reduce using rule 117 (opc1 -> empty .)
    WHEN            reduce using rule 117 (opc1 -> empty .)
    RETURN          reduce using rule 117 (opc1 -> empty .)
    LLAVEDER        reduce using rule 117 (opc1 -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 140

    (111) funparamr -> COMA tipo ID . funparamr
    (111) funparamr -> . COMA tipo ID funparamr
    (112) funparamr -> . empty
    (132) empty -> .

    COMA            shift and go to state 83
    PARDER          reduce using rule 132 (empty -> .)

    funparamr                      shift and go to state 193
    empty                          shift and go to state 84

state 141

    (49) asignacion -> ID asignacion3 IGUAL asignacion2 . COLON

    COLON           shift and go to state 194


state 142

    (50) asignacion2 -> expresion .

    COLON           reduce using rule 50 (asignacion2 -> expresion .)


state 143

    (51) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    expresion                      shift and go to state 195
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 144

    (52) asignacion2 -> READ . PARIZQ assign_read PARDER

    PARIZQ          shift and go to state 196


state 145

    (81) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 197


state 146

    (128) llamada -> ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 198


state 147

    (130) llamada_param -> expresion expresionr .

    PARDER          reduce using rule 130 (llamada_param -> expresion expresionr .)


state 148

    (18) expresionr -> COMA . expresion expresionr
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    expresion                      shift and go to state 199
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 149

    (19) expresionr -> empty .

    PARDER          reduce using rule 19 (expresionr -> empty .)


state 150

    (30) megaexp -> superexp megaexpr .

    COMA            reduce using rule 30 (megaexp -> superexp megaexpr .)
    PARDER          reduce using rule 30 (megaexp -> superexp megaexpr .)
    CORCHDER        reduce using rule 30 (megaexp -> superexp megaexpr .)
    FLECHITA        reduce using rule 30 (megaexp -> superexp megaexpr .)
    COLON           reduce using rule 30 (megaexp -> superexp megaexpr .)
    CORCHIZQ        reduce using rule 30 (megaexp -> superexp megaexpr .)


state 151

    (31) megaexpr -> AND . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    superexp                       shift and go to state 200
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 152

    (32) megaexpr -> OR . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    superexp                       shift and go to state 201
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 153

    (33) megaexpr -> empty .

    COMA            reduce using rule 33 (megaexpr -> empty .)
    PARDER          reduce using rule 33 (megaexpr -> empty .)
    CORCHDER        reduce using rule 33 (megaexpr -> empty .)
    FLECHITA        reduce using rule 33 (megaexpr -> empty .)
    COLON           reduce using rule 33 (megaexpr -> empty .)
    CORCHIZQ        reduce using rule 33 (megaexpr -> empty .)


state 154

    (22) superexp -> exp oplog .

    AND             reduce using rule 22 (superexp -> exp oplog .)
    OR              reduce using rule 22 (superexp -> exp oplog .)
    COMA            reduce using rule 22 (superexp -> exp oplog .)
    PARDER          reduce using rule 22 (superexp -> exp oplog .)
    CORCHDER        reduce using rule 22 (superexp -> exp oplog .)
    FLECHITA        reduce using rule 22 (superexp -> exp oplog .)
    COLON           reduce using rule 22 (superexp -> exp oplog .)
    CORCHIZQ        reduce using rule 22 (superexp -> exp oplog .)


state 155

    (23) oplog -> MAYORQUE . exp
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    exp                            shift and go to state 202
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 156

    (24) oplog -> MENORQUE . exp
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    exp                            shift and go to state 203
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 157

    (25) oplog -> DIFERENTE . exp
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    exp                            shift and go to state 204
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 158

    (26) oplog -> MAYOROIGUAL . exp
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    exp                            shift and go to state 205
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 159

    (27) oplog -> MENOROIGUAL . exp
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    exp                            shift and go to state 206
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 160

    (28) oplog -> IGUALIGUAL . exp
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    exp                            shift and go to state 207
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 161

    (29) oplog -> empty .

    AND             reduce using rule 29 (oplog -> empty .)
    OR              reduce using rule 29 (oplog -> empty .)
    COMA            reduce using rule 29 (oplog -> empty .)
    PARDER          reduce using rule 29 (oplog -> empty .)
    CORCHDER        reduce using rule 29 (oplog -> empty .)
    FLECHITA        reduce using rule 29 (oplog -> empty .)
    COLON           reduce using rule 29 (oplog -> empty .)
    CORCHIZQ        reduce using rule 29 (oplog -> empty .)


state 162

    (87) exp -> termino expr .

    MAYORQUE        reduce using rule 87 (exp -> termino expr .)
    MENORQUE        reduce using rule 87 (exp -> termino expr .)
    DIFERENTE       reduce using rule 87 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 87 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 87 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 87 (exp -> termino expr .)
    AND             reduce using rule 87 (exp -> termino expr .)
    OR              reduce using rule 87 (exp -> termino expr .)
    COMA            reduce using rule 87 (exp -> termino expr .)
    PARDER          reduce using rule 87 (exp -> termino expr .)
    CORCHDER        reduce using rule 87 (exp -> termino expr .)
    FLECHITA        reduce using rule 87 (exp -> termino expr .)
    COLON           reduce using rule 87 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 87 (exp -> termino expr .)


state 163

    (88) expr -> MAS . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    termino                        shift and go to state 208
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 164

    (89) expr -> MENOS . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    termino                        shift and go to state 209
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 165

    (90) expr -> empty .

    MAYORQUE        reduce using rule 90 (expr -> empty .)
    MENORQUE        reduce using rule 90 (expr -> empty .)
    DIFERENTE       reduce using rule 90 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 90 (expr -> empty .)
    MENOROIGUAL     reduce using rule 90 (expr -> empty .)
    IGUALIGUAL      reduce using rule 90 (expr -> empty .)
    AND             reduce using rule 90 (expr -> empty .)
    OR              reduce using rule 90 (expr -> empty .)
    COMA            reduce using rule 90 (expr -> empty .)
    PARDER          reduce using rule 90 (expr -> empty .)
    CORCHDER        reduce using rule 90 (expr -> empty .)
    FLECHITA        reduce using rule 90 (expr -> empty .)
    COLON           reduce using rule 90 (expr -> empty .)
    CORCHIZQ        reduce using rule 90 (expr -> empty .)


state 166

    (86) termino -> factor terminor .

    MAS             reduce using rule 86 (termino -> factor terminor .)
    MENOS           reduce using rule 86 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 86 (termino -> factor terminor .)
    MENORQUE        reduce using rule 86 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 86 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 86 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 86 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 86 (termino -> factor terminor .)
    AND             reduce using rule 86 (termino -> factor terminor .)
    OR              reduce using rule 86 (termino -> factor terminor .)
    COMA            reduce using rule 86 (termino -> factor terminor .)
    PARDER          reduce using rule 86 (termino -> factor terminor .)
    CORCHDER        reduce using rule 86 (termino -> factor terminor .)
    FLECHITA        reduce using rule 86 (termino -> factor terminor .)
    COLON           reduce using rule 86 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 86 (termino -> factor terminor .)


state 167

    (83) terminor -> POR . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    factor                         shift and go to state 210
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 168

    (84) terminor -> SOBRE . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    factor                         shift and go to state 211
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 169

    (85) terminor -> empty .

    MAS             reduce using rule 85 (terminor -> empty .)
    MENOS           reduce using rule 85 (terminor -> empty .)
    MAYORQUE        reduce using rule 85 (terminor -> empty .)
    MENORQUE        reduce using rule 85 (terminor -> empty .)
    DIFERENTE       reduce using rule 85 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 85 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 85 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 85 (terminor -> empty .)
    AND             reduce using rule 85 (terminor -> empty .)
    OR              reduce using rule 85 (terminor -> empty .)
    COMA            reduce using rule 85 (terminor -> empty .)
    PARDER          reduce using rule 85 (terminor -> empty .)
    CORCHDER        reduce using rule 85 (terminor -> empty .)
    FLECHITA        reduce using rule 85 (terminor -> empty .)
    COLON           reduce using rule 85 (terminor -> empty .)
    CORCHIZQ        reduce using rule 85 (terminor -> empty .)


state 170

    (82) factor -> factor2 varcte .

    POR             reduce using rule 82 (factor -> factor2 varcte .)
    SOBRE           reduce using rule 82 (factor -> factor2 varcte .)
    MAS             reduce using rule 82 (factor -> factor2 varcte .)
    MENOS           reduce using rule 82 (factor -> factor2 varcte .)
    MAYORQUE        reduce using rule 82 (factor -> factor2 varcte .)
    MENORQUE        reduce using rule 82 (factor -> factor2 varcte .)
    DIFERENTE       reduce using rule 82 (factor -> factor2 varcte .)
    MAYOROIGUAL     reduce using rule 82 (factor -> factor2 varcte .)
    MENOROIGUAL     reduce using rule 82 (factor -> factor2 varcte .)
    IGUALIGUAL      reduce using rule 82 (factor -> factor2 varcte .)
    AND             reduce using rule 82 (factor -> factor2 varcte .)
    OR              reduce using rule 82 (factor -> factor2 varcte .)
    COMA            reduce using rule 82 (factor -> factor2 varcte .)
    PARDER          reduce using rule 82 (factor -> factor2 varcte .)
    CORCHDER        reduce using rule 82 (factor -> factor2 varcte .)
    FLECHITA        reduce using rule 82 (factor -> factor2 varcte .)
    COLON           reduce using rule 82 (factor -> factor2 varcte .)
    CORCHIZQ        reduce using rule 82 (factor -> factor2 varcte .)


state 171

    (8) varcte -> ID .
    (14) varcte -> ID . CORCHIZQ varcte CORCHDER
    (15) varcte -> ID . PUNTO ID
    (16) varcte -> ID . PARIZQ llamada_param PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    POR             reduce using rule 8 (varcte -> ID .)
    SOBRE           reduce using rule 8 (varcte -> ID .)
    MAS             reduce using rule 8 (varcte -> ID .)
    MENOS           reduce using rule 8 (varcte -> ID .)
    MAYORQUE        reduce using rule 8 (varcte -> ID .)
    MENORQUE        reduce using rule 8 (varcte -> ID .)
    DIFERENTE       reduce using rule 8 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 8 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 8 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 8 (varcte -> ID .)
    AND             reduce using rule 8 (varcte -> ID .)
    OR              reduce using rule 8 (varcte -> ID .)
    COMA            reduce using rule 8 (varcte -> ID .)
    PARDER          reduce using rule 8 (varcte -> ID .)
    CORCHDER        reduce using rule 8 (varcte -> ID .)
    FLECHITA        reduce using rule 8 (varcte -> ID .)
    COLON           reduce using rule 8 (varcte -> ID .)
    CORCHIZQ        shift and go to state 212
    PUNTO           shift and go to state 213
    PARIZQ          shift and go to state 214

  ! CORCHIZQ        [ reduce using rule 8 (varcte -> ID .) ]


state 172

    (9) varcte -> INTNUM .

    POR             reduce using rule 9 (varcte -> INTNUM .)
    SOBRE           reduce using rule 9 (varcte -> INTNUM .)
    MAS             reduce using rule 9 (varcte -> INTNUM .)
    MENOS           reduce using rule 9 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 9 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 9 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 9 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 9 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 9 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 9 (varcte -> INTNUM .)
    AND             reduce using rule 9 (varcte -> INTNUM .)
    OR              reduce using rule 9 (varcte -> INTNUM .)
    COMA            reduce using rule 9 (varcte -> INTNUM .)
    PARDER          reduce using rule 9 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 9 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 9 (varcte -> INTNUM .)
    COLON           reduce using rule 9 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 9 (varcte -> INTNUM .)


state 173

    (10) varcte -> FLOATNUM .

    POR             reduce using rule 10 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 10 (varcte -> FLOATNUM .)
    MAS             reduce using rule 10 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 10 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 10 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 10 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 10 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 10 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 10 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 10 (varcte -> FLOATNUM .)
    AND             reduce using rule 10 (varcte -> FLOATNUM .)
    OR              reduce using rule 10 (varcte -> FLOATNUM .)
    COMA            reduce using rule 10 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 10 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 10 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 10 (varcte -> FLOATNUM .)
    COLON           reduce using rule 10 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 10 (varcte -> FLOATNUM .)


state 174

    (11) varcte -> TRUE .

    POR             reduce using rule 11 (varcte -> TRUE .)
    SOBRE           reduce using rule 11 (varcte -> TRUE .)
    MAS             reduce using rule 11 (varcte -> TRUE .)
    MENOS           reduce using rule 11 (varcte -> TRUE .)
    MAYORQUE        reduce using rule 11 (varcte -> TRUE .)
    MENORQUE        reduce using rule 11 (varcte -> TRUE .)
    DIFERENTE       reduce using rule 11 (varcte -> TRUE .)
    MAYOROIGUAL     reduce using rule 11 (varcte -> TRUE .)
    MENOROIGUAL     reduce using rule 11 (varcte -> TRUE .)
    IGUALIGUAL      reduce using rule 11 (varcte -> TRUE .)
    AND             reduce using rule 11 (varcte -> TRUE .)
    OR              reduce using rule 11 (varcte -> TRUE .)
    COMA            reduce using rule 11 (varcte -> TRUE .)
    PARDER          reduce using rule 11 (varcte -> TRUE .)
    CORCHDER        reduce using rule 11 (varcte -> TRUE .)
    FLECHITA        reduce using rule 11 (varcte -> TRUE .)
    COLON           reduce using rule 11 (varcte -> TRUE .)
    CORCHIZQ        reduce using rule 11 (varcte -> TRUE .)


state 175

    (12) varcte -> FALSE .

    POR             reduce using rule 12 (varcte -> FALSE .)
    SOBRE           reduce using rule 12 (varcte -> FALSE .)
    MAS             reduce using rule 12 (varcte -> FALSE .)
    MENOS           reduce using rule 12 (varcte -> FALSE .)
    MAYORQUE        reduce using rule 12 (varcte -> FALSE .)
    MENORQUE        reduce using rule 12 (varcte -> FALSE .)
    DIFERENTE       reduce using rule 12 (varcte -> FALSE .)
    MAYOROIGUAL     reduce using rule 12 (varcte -> FALSE .)
    MENOROIGUAL     reduce using rule 12 (varcte -> FALSE .)
    IGUALIGUAL      reduce using rule 12 (varcte -> FALSE .)
    AND             reduce using rule 12 (varcte -> FALSE .)
    OR              reduce using rule 12 (varcte -> FALSE .)
    COMA            reduce using rule 12 (varcte -> FALSE .)
    PARDER          reduce using rule 12 (varcte -> FALSE .)
    CORCHDER        reduce using rule 12 (varcte -> FALSE .)
    FLECHITA        reduce using rule 12 (varcte -> FALSE .)
    COLON           reduce using rule 12 (varcte -> FALSE .)
    CORCHIZQ        reduce using rule 12 (varcte -> FALSE .)


state 176

    (13) varcte -> STRINGVAL .

    POR             reduce using rule 13 (varcte -> STRINGVAL .)
    SOBRE           reduce using rule 13 (varcte -> STRINGVAL .)
    MAS             reduce using rule 13 (varcte -> STRINGVAL .)
    MENOS           reduce using rule 13 (varcte -> STRINGVAL .)
    MAYORQUE        reduce using rule 13 (varcte -> STRINGVAL .)
    MENORQUE        reduce using rule 13 (varcte -> STRINGVAL .)
    DIFERENTE       reduce using rule 13 (varcte -> STRINGVAL .)
    MAYOROIGUAL     reduce using rule 13 (varcte -> STRINGVAL .)
    MENOROIGUAL     reduce using rule 13 (varcte -> STRINGVAL .)
    IGUALIGUAL      reduce using rule 13 (varcte -> STRINGVAL .)
    AND             reduce using rule 13 (varcte -> STRINGVAL .)
    OR              reduce using rule 13 (varcte -> STRINGVAL .)
    COMA            reduce using rule 13 (varcte -> STRINGVAL .)
    PARDER          reduce using rule 13 (varcte -> STRINGVAL .)
    CORCHDER        reduce using rule 13 (varcte -> STRINGVAL .)
    FLECHITA        reduce using rule 13 (varcte -> STRINGVAL .)
    COLON           reduce using rule 13 (varcte -> STRINGVAL .)
    CORCHIZQ        reduce using rule 13 (varcte -> STRINGVAL .)


state 177

    (57) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 57 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 178

    (69) estatutor -> ELSE bloque .

    ID              reduce using rule 69 (estatutor -> ELSE bloque .)
    IF              reduce using rule 69 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 69 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 69 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 69 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 69 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 69 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 69 (estatutor -> ELSE bloque .)


state 179

    (64) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (60) condicion -> . IF condicion2 estatutor
    (71) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (96) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (103) while -> . WHILE PARIZQ expresion PARDER bloque
    (104) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (128) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (129) llamada -> . empty
    (132) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 73
    IF              shift and go to state 74
    WRITE           shift and go to state 75
    FOR             shift and go to state 76
    WHILE           shift and go to state 77
    WHEN            shift and go to state 78
    RETURN          reduce using rule 132 (empty -> .)
    LLAVEDER        reduce using rule 132 (empty -> .)

  ! ID              [ reduce using rule 132 (empty -> .) ]
  ! IF              [ reduce using rule 132 (empty -> .) ]
  ! WRITE           [ reduce using rule 132 (empty -> .) ]
  ! FOR             [ reduce using rule 132 (empty -> .) ]
  ! WHILE           [ reduce using rule 132 (empty -> .) ]
  ! WHEN            [ reduce using rule 132 (empty -> .) ]

    estatuto                       shift and go to state 215
    asignacion                     shift and go to state 65
    condicion                      shift and go to state 66
    escritura                      shift and go to state 67
    for                            shift and go to state 68
    while                          shift and go to state 69
    when                           shift and go to state 70
    llamada                        shift and go to state 71
    empty                          shift and go to state 72

state 180

    (61) condicion2 -> PARIZQ expresion PARDER . bloque
    (64) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 179

    bloque                         shift and go to state 216

state 181

    (71) escritura -> WRITE PARIZQ esc1 esc2 . PARDER COLON

    PARDER          shift and go to state 217


state 182

    (74) esc2 -> COMA . esc1 esc2
    (72) esc1 -> . expresion
    (73) esc1 -> . STRING
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    STRING          shift and go to state 130
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    esc1                           shift and go to state 218
    expresion                      shift and go to state 129
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 183

    (75) esc2 -> empty .

    PARDER          reduce using rule 75 (esc2 -> empty .)


state 184

    (96) for -> FOR PARIZQ ID IN . for2 PARDER bloque
    (97) for2 -> . ID
    (98) for2 -> . range
    (99) range -> . INTNUM PUNTOSRANGO INTNUM
    (100) range -> . ID PUNTOSRANGO ID
    (101) range -> . ID PUNTOSRANGO INTNUM
    (102) range -> . INTNUM PUNTOSRANGO ID

    ID              shift and go to state 219
    INTNUM          shift and go to state 222

    for2                           shift and go to state 220
    range                          shift and go to state 221

state 185

    (103) while -> WHILE PARIZQ expresion PARDER . bloque
    (64) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 179

    bloque                         shift and go to state 223

state 186

    (104) when -> WHEN LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 104 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 104 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 104 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 104 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 104 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 104 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 104 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 104 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)


state 187

    (105) when2 -> expresion FLECHITA . bloque when2
    (64) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 179

    bloque                         shift and go to state 224

state 188

    (106) when2 -> ELSE FLECHITA . bloque
    (64) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 179

    bloque                         shift and go to state 225

state 189

    (115) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (65) bloque2 -> . RETURN bloque3
    (66) bloque2 -> . empty
    (132) empty -> .

    RETURN          shift and go to state 227
    LLAVEDER        reduce using rule 132 (empty -> .)

    bloque2                        shift and go to state 226
    empty                          shift and go to state 228

state 190

    (118) opc2 -> estatuto .

    RETURN          reduce using rule 118 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 118 (opc2 -> estatuto .)


state 191

    (119) opc2 -> empty .
    (48) estatuto -> empty .
    (129) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 48 (estatuto -> empty .)
    RETURN          reduce using rule 48 (estatuto -> empty .)
    LLAVEDER        reduce using rule 48 (estatuto -> empty .)
    ID              reduce using rule 129 (llamada -> empty .)
    IF              reduce using rule 129 (llamada -> empty .)
    WRITE           reduce using rule 129 (llamada -> empty .)
    FOR             reduce using rule 129 (llamada -> empty .)
    WHILE           reduce using rule 129 (llamada -> empty .)
    WHEN            reduce using rule 129 (llamada -> empty .)

  ! RETURN          [ reduce using rule 119 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 119 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 129 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 129 (llamada -> empty .) ]


state 192

    (116) opc1 -> vars multvarsdecl .

    ID              reduce using rule 116 (opc1 -> vars multvarsdecl .)
    IF              reduce using rule 116 (opc1 -> vars multvarsdecl .)
    WRITE           reduce using rule 116 (opc1 -> vars multvarsdecl .)
    FOR             reduce using rule 116 (opc1 -> vars multvarsdecl .)
    WHILE           reduce using rule 116 (opc1 -> vars multvarsdecl .)
    WHEN            reduce using rule 116 (opc1 -> vars multvarsdecl .)
    RETURN          reduce using rule 116 (opc1 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 116 (opc1 -> vars multvarsdecl .)


state 193

    (111) funparamr -> COMA tipo ID funparamr .

    PARDER          reduce using rule 111 (funparamr -> COMA tipo ID funparamr .)


state 194

    (49) asignacion -> ID asignacion3 IGUAL asignacion2 COLON .

    ID              reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    IF              reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WRITE           reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    FOR             reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHILE           reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHEN            reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    LLAVEDER        reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    RETURN          reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)


state 195

    (51) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (55) asignacion2r -> . COMA expresion asignacion2r
    (56) asignacion2r -> . empty
    (132) empty -> .

    COMA            shift and go to state 230
    CORCHIZQ        reduce using rule 132 (empty -> .)

    asignacion2r                   shift and go to state 229
    empty                          shift and go to state 231

state 196

    (52) asignacion2 -> READ PARIZQ . assign_read PARDER
    (53) assign_read -> . STRINGVAL
    (54) assign_read -> . empty
    (132) empty -> .

    STRINGVAL       shift and go to state 233
    PARDER          reduce using rule 132 (empty -> .)

    assign_read                    shift and go to state 232
    empty                          shift and go to state 234

state 197

    (81) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    FLECHITA        reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    COLON           reduce using rule 81 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 81 (factor -> PARIZQ expresion PARDER .)


state 198

    (128) llamada -> ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 128 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 128 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 128 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 128 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 128 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 128 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 128 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 128 (llamada -> ID PARIZQ llamada_param PARDER COLON .)


state 199

    (18) expresionr -> COMA expresion . expresionr
    (18) expresionr -> . COMA expresion expresionr
    (19) expresionr -> . empty
    (132) empty -> .

    COMA            shift and go to state 148
    PARDER          reduce using rule 132 (empty -> .)

    expresionr                     shift and go to state 235
    empty                          shift and go to state 149

state 200

    (31) megaexpr -> AND superexp . megaexpr
    (31) megaexpr -> . AND superexp megaexpr
    (32) megaexpr -> . OR superexp megaexpr
    (33) megaexpr -> . empty
    (132) empty -> .

    AND             shift and go to state 151
    OR              shift and go to state 152
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    megaexpr                       shift and go to state 236
    empty                          shift and go to state 153

state 201

    (32) megaexpr -> OR superexp . megaexpr
    (31) megaexpr -> . AND superexp megaexpr
    (32) megaexpr -> . OR superexp megaexpr
    (33) megaexpr -> . empty
    (132) empty -> .

    AND             shift and go to state 151
    OR              shift and go to state 152
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    megaexpr                       shift and go to state 237
    empty                          shift and go to state 153

state 202

    (23) oplog -> MAYORQUE exp .

    AND             reduce using rule 23 (oplog -> MAYORQUE exp .)
    OR              reduce using rule 23 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 23 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 23 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 23 (oplog -> MAYORQUE exp .)
    FLECHITA        reduce using rule 23 (oplog -> MAYORQUE exp .)
    COLON           reduce using rule 23 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 23 (oplog -> MAYORQUE exp .)


state 203

    (24) oplog -> MENORQUE exp .

    AND             reduce using rule 24 (oplog -> MENORQUE exp .)
    OR              reduce using rule 24 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 24 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 24 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 24 (oplog -> MENORQUE exp .)
    FLECHITA        reduce using rule 24 (oplog -> MENORQUE exp .)
    COLON           reduce using rule 24 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 24 (oplog -> MENORQUE exp .)


state 204

    (25) oplog -> DIFERENTE exp .

    AND             reduce using rule 25 (oplog -> DIFERENTE exp .)
    OR              reduce using rule 25 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 25 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 25 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 25 (oplog -> DIFERENTE exp .)
    FLECHITA        reduce using rule 25 (oplog -> DIFERENTE exp .)
    COLON           reduce using rule 25 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 25 (oplog -> DIFERENTE exp .)


state 205

    (26) oplog -> MAYOROIGUAL exp .

    AND             reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    OR              reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    FLECHITA        reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    COLON           reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 26 (oplog -> MAYOROIGUAL exp .)


state 206

    (27) oplog -> MENOROIGUAL exp .

    AND             reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    OR              reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    FLECHITA        reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    COLON           reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 27 (oplog -> MENOROIGUAL exp .)


state 207

    (28) oplog -> IGUALIGUAL exp .

    AND             reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    OR              reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    FLECHITA        reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    COLON           reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 28 (oplog -> IGUALIGUAL exp .)


state 208

    (88) expr -> MAS termino . expr
    (88) expr -> . MAS termino expr
    (89) expr -> . MENOS termino expr
    (90) expr -> . empty
    (132) empty -> .

    MAS             shift and go to state 163
    MENOS           shift and go to state 164
    MAYORQUE        reduce using rule 132 (empty -> .)
    MENORQUE        reduce using rule 132 (empty -> .)
    DIFERENTE       reduce using rule 132 (empty -> .)
    MAYOROIGUAL     reduce using rule 132 (empty -> .)
    MENOROIGUAL     reduce using rule 132 (empty -> .)
    IGUALIGUAL      reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    expr                           shift and go to state 238
    empty                          shift and go to state 165

state 209

    (89) expr -> MENOS termino . expr
    (88) expr -> . MAS termino expr
    (89) expr -> . MENOS termino expr
    (90) expr -> . empty
    (132) empty -> .

    MAS             shift and go to state 163
    MENOS           shift and go to state 164
    MAYORQUE        reduce using rule 132 (empty -> .)
    MENORQUE        reduce using rule 132 (empty -> .)
    DIFERENTE       reduce using rule 132 (empty -> .)
    MAYOROIGUAL     reduce using rule 132 (empty -> .)
    MENOROIGUAL     reduce using rule 132 (empty -> .)
    IGUALIGUAL      reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    expr                           shift and go to state 239
    empty                          shift and go to state 165

state 210

    (83) terminor -> POR factor . terminor
    (83) terminor -> . POR factor terminor
    (84) terminor -> . SOBRE factor terminor
    (85) terminor -> . empty
    (132) empty -> .

    POR             shift and go to state 167
    SOBRE           shift and go to state 168
    MAS             reduce using rule 132 (empty -> .)
    MENOS           reduce using rule 132 (empty -> .)
    MAYORQUE        reduce using rule 132 (empty -> .)
    MENORQUE        reduce using rule 132 (empty -> .)
    DIFERENTE       reduce using rule 132 (empty -> .)
    MAYOROIGUAL     reduce using rule 132 (empty -> .)
    MENOROIGUAL     reduce using rule 132 (empty -> .)
    IGUALIGUAL      reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    terminor                       shift and go to state 240
    empty                          shift and go to state 169

state 211

    (84) terminor -> SOBRE factor . terminor
    (83) terminor -> . POR factor terminor
    (84) terminor -> . SOBRE factor terminor
    (85) terminor -> . empty
    (132) empty -> .

    POR             shift and go to state 167
    SOBRE           shift and go to state 168
    MAS             reduce using rule 132 (empty -> .)
    MENOS           reduce using rule 132 (empty -> .)
    MAYORQUE        reduce using rule 132 (empty -> .)
    MENORQUE        reduce using rule 132 (empty -> .)
    DIFERENTE       reduce using rule 132 (empty -> .)
    MAYOROIGUAL     reduce using rule 132 (empty -> .)
    MENOROIGUAL     reduce using rule 132 (empty -> .)
    IGUALIGUAL      reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMA            reduce using rule 132 (empty -> .)
    PARDER          reduce using rule 132 (empty -> .)
    CORCHDER        reduce using rule 132 (empty -> .)
    FLECHITA        reduce using rule 132 (empty -> .)
    COLON           reduce using rule 132 (empty -> .)
    CORCHIZQ        reduce using rule 132 (empty -> .)

    terminor                       shift and go to state 241
    empty                          shift and go to state 169

state 212

    (14) varcte -> ID CORCHIZQ . varcte CORCHDER
    (8) varcte -> . ID
    (9) varcte -> . INTNUM
    (10) varcte -> . FLOATNUM
    (11) varcte -> . TRUE
    (12) varcte -> . FALSE
    (13) varcte -> . STRINGVAL
    (14) varcte -> . ID CORCHIZQ varcte CORCHDER
    (15) varcte -> . ID PUNTO ID
    (16) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 171
    INTNUM          shift and go to state 172
    FLOATNUM        shift and go to state 173
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175
    STRINGVAL       shift and go to state 176

    varcte                         shift and go to state 242

state 213

    (15) varcte -> ID PUNTO . ID

    ID              shift and go to state 243


state 214

    (16) varcte -> ID PARIZQ . llamada_param PARDER
    (130) llamada_param -> . expresion expresionr
    (131) llamada_param -> . empty
    (17) expresion -> . megaexp
    (132) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty

    PARDER          reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120

    llamada_param                  shift and go to state 244
    expresion                      shift and go to state 111
    empty                          shift and go to state 112
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118

state 215

    (64) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (65) bloque2 -> . RETURN bloque3
    (66) bloque2 -> . empty
    (132) empty -> .

    RETURN          shift and go to state 227
    LLAVEDER        reduce using rule 132 (empty -> .)

    bloque2                        shift and go to state 245
    empty                          shift and go to state 228

state 216

    (61) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 61 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 61 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 61 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 61 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 61 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 61 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 61 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 61 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 61 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 217

    (71) escritura -> WRITE PARIZQ esc1 esc2 PARDER . COLON

    COLON           shift and go to state 246


state 218

    (74) esc2 -> COMA esc1 . esc2
    (74) esc2 -> . COMA esc1 esc2
    (75) esc2 -> . empty
    (132) empty -> .

    COMA            shift and go to state 182
    PARDER          reduce using rule 132 (empty -> .)

    esc2                           shift and go to state 247
    empty                          shift and go to state 183

state 219

    (97) for2 -> ID .
    (100) range -> ID . PUNTOSRANGO ID
    (101) range -> ID . PUNTOSRANGO INTNUM

    PARDER          reduce using rule 97 (for2 -> ID .)
    PUNTOSRANGO     shift and go to state 248


state 220

    (96) for -> FOR PARIZQ ID IN for2 . PARDER bloque

    PARDER          shift and go to state 249


state 221

    (98) for2 -> range .

    PARDER          reduce using rule 98 (for2 -> range .)


state 222

    (99) range -> INTNUM . PUNTOSRANGO INTNUM
    (102) range -> INTNUM . PUNTOSRANGO ID

    PUNTOSRANGO     shift and go to state 250


state 223

    (103) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 103 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 103 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 103 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 103 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 103 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 103 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 103 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 103 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 224

    (105) when2 -> expresion FLECHITA bloque . when2
    (105) when2 -> . expresion FLECHITA bloque when2
    (106) when2 -> . ELSE FLECHITA bloque
    (107) when2 -> . empty
    (17) expresion -> . megaexp
    (132) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty

    ELSE            shift and go to state 135
    LLAVEDER        reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120

    expresion                      shift and go to state 134
    when2                          shift and go to state 251
    empty                          shift and go to state 136
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118

state 225

    (106) when2 -> ELSE FLECHITA bloque .

    LLAVEDER        reduce using rule 106 (when2 -> ELSE FLECHITA bloque .)


state 226

    (115) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 252


state 227

    (65) bloque2 -> RETURN . bloque3
    (67) bloque3 -> . expresion COLON
    (68) bloque3 -> . empty
    (17) expresion -> . megaexp
    (132) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty

    LLAVEDER        reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120

    bloque3                        shift and go to state 253
    expresion                      shift and go to state 254
    empty                          shift and go to state 255
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118

state 228

    (66) bloque2 -> empty .

    LLAVEDER        reduce using rule 66 (bloque2 -> empty .)


state 229

    (51) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 256


state 230

    (55) asignacion2r -> COMA . expresion asignacion2r
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (87) exp -> . termino expr
    (86) termino -> . factor terminor
    (81) factor -> . PARIZQ expresion PARDER
    (82) factor -> . factor2 varcte
    (93) factor2 -> . MAS
    (94) factor2 -> . MENOS
    (95) factor2 -> . empty
    (132) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 119
    MENOS           shift and go to state 120
    ID              reduce using rule 132 (empty -> .)
    INTNUM          reduce using rule 132 (empty -> .)
    FLOATNUM        reduce using rule 132 (empty -> .)
    TRUE            reduce using rule 132 (empty -> .)
    FALSE           reduce using rule 132 (empty -> .)
    STRINGVAL       reduce using rule 132 (empty -> .)

    expresion                      shift and go to state 257
    megaexp                        shift and go to state 113
    superexp                       shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 116
    factor                         shift and go to state 117
    factor2                        shift and go to state 118
    empty                          shift and go to state 122

state 231

    (56) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 56 (asignacion2r -> empty .)


state 232

    (52) asignacion2 -> READ PARIZQ assign_read . PARDER

    PARDER          shift and go to state 258


state 233

    (53) assign_read -> STRINGVAL .

    PARDER          reduce using rule 53 (assign_read -> STRINGVAL .)


state 234

    (54) assign_read -> empty .

    PARDER          reduce using rule 54 (assign_read -> empty .)


state 235

    (18) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 18 (expresionr -> COMA expresion expresionr .)


state 236

    (31) megaexpr -> AND superexp megaexpr .

    COMA            reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    PARDER          reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    CORCHDER        reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    FLECHITA        reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    COLON           reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    CORCHIZQ        reduce using rule 31 (megaexpr -> AND superexp megaexpr .)


state 237

    (32) megaexpr -> OR superexp megaexpr .

    COMA            reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    PARDER          reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    CORCHDER        reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    FLECHITA        reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    COLON           reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    CORCHIZQ        reduce using rule 32 (megaexpr -> OR superexp megaexpr .)


state 238

    (88) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 88 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 88 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 88 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 88 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 88 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 88 (expr -> MAS termino expr .)
    AND             reduce using rule 88 (expr -> MAS termino expr .)
    OR              reduce using rule 88 (expr -> MAS termino expr .)
    COMA            reduce using rule 88 (expr -> MAS termino expr .)
    PARDER          reduce using rule 88 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 88 (expr -> MAS termino expr .)
    FLECHITA        reduce using rule 88 (expr -> MAS termino expr .)
    COLON           reduce using rule 88 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 88 (expr -> MAS termino expr .)


state 239

    (89) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 89 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 89 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 89 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 89 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 89 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 89 (expr -> MENOS termino expr .)
    AND             reduce using rule 89 (expr -> MENOS termino expr .)
    OR              reduce using rule 89 (expr -> MENOS termino expr .)
    COMA            reduce using rule 89 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 89 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 89 (expr -> MENOS termino expr .)
    FLECHITA        reduce using rule 89 (expr -> MENOS termino expr .)
    COLON           reduce using rule 89 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 89 (expr -> MENOS termino expr .)


state 240

    (83) terminor -> POR factor terminor .

    MAS             reduce using rule 83 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 83 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 83 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 83 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 83 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 83 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 83 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 83 (terminor -> POR factor terminor .)
    AND             reduce using rule 83 (terminor -> POR factor terminor .)
    OR              reduce using rule 83 (terminor -> POR factor terminor .)
    COMA            reduce using rule 83 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 83 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 83 (terminor -> POR factor terminor .)
    FLECHITA        reduce using rule 83 (terminor -> POR factor terminor .)
    COLON           reduce using rule 83 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 83 (terminor -> POR factor terminor .)


state 241

    (84) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 84 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 84 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 84 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 84 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 84 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 84 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 84 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 84 (terminor -> SOBRE factor terminor .)
    AND             reduce using rule 84 (terminor -> SOBRE factor terminor .)
    OR              reduce using rule 84 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 84 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 84 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 84 (terminor -> SOBRE factor terminor .)
    FLECHITA        reduce using rule 84 (terminor -> SOBRE factor terminor .)
    COLON           reduce using rule 84 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 84 (terminor -> SOBRE factor terminor .)


state 242

    (14) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 259


state 243

    (15) varcte -> ID PUNTO ID .

    POR             reduce using rule 15 (varcte -> ID PUNTO ID .)
    SOBRE           reduce using rule 15 (varcte -> ID PUNTO ID .)
    MAS             reduce using rule 15 (varcte -> ID PUNTO ID .)
    MENOS           reduce using rule 15 (varcte -> ID PUNTO ID .)
    MAYORQUE        reduce using rule 15 (varcte -> ID PUNTO ID .)
    MENORQUE        reduce using rule 15 (varcte -> ID PUNTO ID .)
    DIFERENTE       reduce using rule 15 (varcte -> ID PUNTO ID .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> ID PUNTO ID .)
    MENOROIGUAL     reduce using rule 15 (varcte -> ID PUNTO ID .)
    IGUALIGUAL      reduce using rule 15 (varcte -> ID PUNTO ID .)
    AND             reduce using rule 15 (varcte -> ID PUNTO ID .)
    OR              reduce using rule 15 (varcte -> ID PUNTO ID .)
    COMA            reduce using rule 15 (varcte -> ID PUNTO ID .)
    PARDER          reduce using rule 15 (varcte -> ID PUNTO ID .)
    CORCHDER        reduce using rule 15 (varcte -> ID PUNTO ID .)
    FLECHITA        reduce using rule 15 (varcte -> ID PUNTO ID .)
    COLON           reduce using rule 15 (varcte -> ID PUNTO ID .)
    CORCHIZQ        reduce using rule 15 (varcte -> ID PUNTO ID .)


state 244

    (16) varcte -> ID PARIZQ llamada_param . PARDER

    PARDER          shift and go to state 260


state 245

    (64) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 261


state 246

    (71) escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .

    ID              reduce using rule 71 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    IF              reduce using rule 71 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WRITE           reduce using rule 71 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    FOR             reduce using rule 71 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHILE           reduce using rule 71 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHEN            reduce using rule 71 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    LLAVEDER        reduce using rule 71 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    RETURN          reduce using rule 71 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)


state 247

    (74) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 74 (esc2 -> COMA esc1 esc2 .)


state 248

    (100) range -> ID PUNTOSRANGO . ID
    (101) range -> ID PUNTOSRANGO . INTNUM

    ID              shift and go to state 262
    INTNUM          shift and go to state 263


state 249

    (96) for -> FOR PARIZQ ID IN for2 PARDER . bloque
    (64) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 179

    bloque                         shift and go to state 264

state 250

    (99) range -> INTNUM PUNTOSRANGO . INTNUM
    (102) range -> INTNUM PUNTOSRANGO . ID

    INTNUM          shift and go to state 265
    ID              shift and go to state 266


state 251

    (105) when2 -> expresion FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 105 (when2 -> expresion FLECHITA bloque when2 .)


state 252

    (115) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    PRIVATE         reduce using rule 115 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    FUN             reduce using rule 115 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    MAIN            reduce using rule 115 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 253

    (65) bloque2 -> RETURN bloque3 .

    LLAVEDER        reduce using rule 65 (bloque2 -> RETURN bloque3 .)


state 254

    (67) bloque3 -> expresion . COLON

    COLON           shift and go to state 267


state 255

    (68) bloque3 -> empty .
    (95) factor2 -> empty .

    LLAVEDER        reduce using rule 68 (bloque3 -> empty .)
    ID              reduce using rule 95 (factor2 -> empty .)
    INTNUM          reduce using rule 95 (factor2 -> empty .)
    FLOATNUM        reduce using rule 95 (factor2 -> empty .)
    TRUE            reduce using rule 95 (factor2 -> empty .)
    FALSE           reduce using rule 95 (factor2 -> empty .)
    STRINGVAL       reduce using rule 95 (factor2 -> empty .)


state 256

    (51) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    COLON           reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 257

    (55) asignacion2r -> COMA expresion . asignacion2r
    (55) asignacion2r -> . COMA expresion asignacion2r
    (56) asignacion2r -> . empty
    (132) empty -> .

    COMA            shift and go to state 230
    CORCHIZQ        reduce using rule 132 (empty -> .)

    asignacion2r                   shift and go to state 268
    empty                          shift and go to state 231

state 258

    (52) asignacion2 -> READ PARIZQ assign_read PARDER .

    COLON           reduce using rule 52 (asignacion2 -> READ PARIZQ assign_read PARDER .)


state 259

    (14) varcte -> ID CORCHIZQ varcte CORCHDER .

    POR             reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    AND             reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    OR              reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COMA            reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COLON           reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 260

    (16) varcte -> ID PARIZQ llamada_param PARDER .

    POR             reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    SOBRE           reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAS             reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOS           reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYORQUE        reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENORQUE        reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    DIFERENTE       reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOROIGUAL     reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    IGUALIGUAL      reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    AND             reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    OR              reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    COMA            reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    PARDER          reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHDER        reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    FLECHITA        reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    COLON           reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHIZQ        reduce using rule 16 (varcte -> ID PARIZQ llamada_param PARDER .)


state 261

    (64) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    ID              reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    PARIZQ          reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MAS             reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MENOS           reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    TRUE            reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FALSE           reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRINGVAL       reduce using rule 64 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 262

    (100) range -> ID PUNTOSRANGO ID .

    PARDER          reduce using rule 100 (range -> ID PUNTOSRANGO ID .)


state 263

    (101) range -> ID PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 101 (range -> ID PUNTOSRANGO INTNUM .)


state 264

    (96) for -> FOR PARIZQ ID IN for2 PARDER bloque .

    ID              reduce using rule 96 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    IF              reduce using rule 96 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WRITE           reduce using rule 96 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    FOR             reduce using rule 96 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHILE           reduce using rule 96 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHEN            reduce using rule 96 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    LLAVEDER        reduce using rule 96 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    RETURN          reduce using rule 96 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)


state 265

    (99) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 99 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 266

    (102) range -> INTNUM PUNTOSRANGO ID .

    PARDER          reduce using rule 102 (range -> INTNUM PUNTOSRANGO ID .)


state 267

    (67) bloque3 -> expresion COLON .

    LLAVEDER        reduce using rule 67 (bloque3 -> expresion COLON .)


state 268

    (55) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 55 (asignacion2r -> COMA expresion asignacion2r .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 15 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 60 resolved as shift
WARNING: shift/reduce conflict for FOR in state 60 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 65 resolved as shift
WARNING: shift/reduce conflict for FOR in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 67 resolved as shift
WARNING: shift/reduce conflict for IF in state 67 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 67 resolved as shift
WARNING: shift/reduce conflict for FOR in state 67 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 67 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 67 resolved as shift
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 68 resolved as shift
WARNING: shift/reduce conflict for FOR in state 68 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 68 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 71 resolved as shift
WARNING: shift/reduce conflict for FOR in state 71 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 71 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 71 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for IF in state 137 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 137 resolved as shift
WARNING: shift/reduce conflict for FOR in state 137 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 137 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 137 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 171 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for IF in state 179 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 179 resolved as shift
WARNING: shift/reduce conflict for FOR in state 179 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 179 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 179 resolved as shift
WARNING: reduce/reduce conflict in state 72 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 72
WARNING: reduce/reduce conflict in state 191 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 191
WARNING: reduce/reduce conflict in state 191 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 191
WARNING: Rule (opc2 -> empty) is never reduced
