Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    RANGE

Grammar

Rule 0     S' -> expresion
Rule 1     resultado -> class
Rule 2     class -> CLASS CID classparams class2 body
Rule 3     class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER
Rule 4     class2 -> empty
Rule 5     classparams -> PARIZQ classparams2 PARDER
Rule 6     classparams2 -> vars
Rule 7     classparams2 -> empty
Rule 8     bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 9     bloque2 -> RETURN bloque3
Rule 10    bloque2 -> empty
Rule 11    bloque3 -> expresion
Rule 12    bloque3 -> empty
Rule 13    varcte -> ID
Rule 14    varcte -> INTNUM
Rule 15    varcte -> FLOATNUM
Rule 16    varcte -> BOOLVAL
Rule 17    varcte -> STRING
Rule 18    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 19    varcte -> ID PUNTO ID
Rule 20    varcte -> ID PARIZQ expresion2 PARDER
Rule 21    expresion -> megaexp
Rule 22    expresion -> ID PARIZQ expresion2 PARDER
Rule 23    expresionr -> COMA expresion expresionr
Rule 24    expresionr -> empty
Rule 25    expresion2 -> expresion expresionr
Rule 26    expresion2 -> empty
Rule 27    oplog -> MAYORQUE exp
Rule 28    oplog -> MENORQUE exp
Rule 29    oplog -> DIFERENTE exp
Rule 30    oplog -> MAYOROIGUAL exp
Rule 31    oplog -> MENOROIGUAL exp
Rule 32    oplog -> IGUALIGUAL exp
Rule 33    oplog -> empty
Rule 34    superexp -> exp oplog
Rule 35    megaexp -> superexp megaexpr
Rule 36    megaexpr -> AND superexp megaexpr
Rule 37    megaexpr -> OR superexp megaexpr
Rule 38    megaexpr -> empty
Rule 39    vars -> vars3 tipo vars2 COLON
Rule 40    vars -> vars3 tipo LIST vars2 COLON
Rule 41    varsr -> COMA ID varsr
Rule 42    varsr -> empty
Rule 43    vars2 -> ID varsr
Rule 44    vars3 -> PRIVATE
Rule 45    vars3 -> empty
Rule 46    estatuto -> asignacion estatuto
Rule 47    estatuto -> condicion estatuto
Rule 48    estatuto -> escritura estatuto
Rule 49    estatuto -> for estatuto
Rule 50    estatuto -> while estatuto
Rule 51    estatuto -> when estatuto
Rule 52    estatuto -> llamada estatuto
Rule 53    estatuto -> empty
Rule 54    asignacion -> ID asignacion3 IGUAL asignacion2
Rule 55    asignacion2 -> expresion
Rule 56    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 57    asignacion2 -> READ PARIZQ STRING PARDER
Rule 58    asignacion2r -> COMA expresion asignacion2r
Rule 59    asignacion2r -> empty
Rule 60    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 61    asignacion3 -> PUNTO ID
Rule 62    asignacion3 -> empty
Rule 63    condicion -> IF condicion2 condicionr estatutor
Rule 64    condicion2 -> PARIZQ expresion PARDER bloque
Rule 65    condicionr -> ELSE IF condicion2
Rule 66    condicionr -> empty
Rule 67    estatutor -> ELSE bloque
Rule 68    estatutor -> empty
Rule 69    escritura -> WRITE PARIZQ esc1 esc2 PARDER
Rule 70    esc1 -> expresion
Rule 71    esc1 -> STRING
Rule 72    esc2 -> COMA esc1 esc2
Rule 73    esc2 -> empty
Rule 74    tipo -> INT
Rule 75    tipo -> FLOAT
Rule 76    tipo -> BOOL
Rule 77    tipo -> STRING
Rule 78    tipo -> CID
Rule 79    factor -> PARIZQ expresion PARDER
Rule 80    factor -> factor2 varcte varcter
Rule 81    terminor -> POR factor terminor
Rule 82    terminor -> SOBRE factor terminor
Rule 83    terminor -> empty
Rule 84    termino -> factor terminor
Rule 85    exp -> termino expr
Rule 86    expr -> MAS termino expr
Rule 87    expr -> MENOS termino expr
Rule 88    expr -> empty
Rule 89    varcter -> COMA varcte varcter
Rule 90    varcter -> empty
Rule 91    factor2 -> MAS
Rule 92    factor2 -> MENOS
Rule 93    factor2 -> empty
Rule 94    for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 95    for2 -> ID
Rule 96    for2 -> range
Rule 97    range -> INTNUM PUNTOSRANGO INTNUM
Rule 98    while -> WHILE PARIZQ expresion PARDER bloque
Rule 99    when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
Rule 100   when2 -> varcte varcter FLECHITA bloque when2
Rule 101   when2 -> IN range FLECHITA bloque when2
Rule 102   when2 -> ELSE FLECHITA bloque when2
Rule 103   when2 -> empty
Rule 104   fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 105   fun2 -> tipo ID funparamr
Rule 106   fun2 -> empty
Rule 107   funparamr -> COMA tipo ID funparamr
Rule 108   funparamr -> empty
Rule 109   fun3 -> DOSPUNTOS tipo
Rule 110   fun3 -> empty
Rule 111   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 112   opc1 -> vars
Rule 113   opc1 -> empty
Rule 114   opc2 -> estatuto
Rule 115   opc2 -> empty
Rule 116   body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER
Rule 117   body2 -> vars
Rule 118   body2 -> empty
Rule 119   funr -> fun funr
Rule 120   funr -> empty
Rule 121   llamada -> ID PARIZQ expresion expresionr PARDER
Rule 122   llamada -> empty
Rule 123   empty -> <empty>

Terminals, with rules where they appear

AND                  : 36
BOOL                 : 76
BOOLVAL              : 16
CID                  : 2 78
CLASS                : 2
COLON                : 39 40
COMA                 : 23 41 58 72 89 107
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 18 56 60
CORCHIZQ             : 18 56 60
DIFERENTE            : 29
DOSPUNTOS            : 3 109
ELSE                 : 65 67 102
EOL                  : 
FLECHITA             : 100 101 102
FLOAT                : 75
FLOATNUM             : 15
FOR                  : 94
FUN                  : 104
GLOBAL               : 
ID                   : 3 13 18 19 19 20 22 41 43 54 61 94 95 104 105 107 121
IF                   : 63 65
IGUAL                : 54
IGUALIGUAL           : 32
IN                   : 94 101
INT                  : 74
INTNUM               : 14 97 97
LIST                 : 40
LLAVEDER             : 8 99 111 116
LLAVEIZQ             : 8 99 111 116
MAIN                 : 116
MAS                  : 86 91
MAYOROIGUAL          : 30
MAYORQUE             : 27
MENOROIGUAL          : 31
MENORQUE             : 28
MENOS                : 87 92
OR                   : 37
PARDER               : 3 5 20 22 57 64 69 79 94 98 99 104 116 121
PARIZQ               : 3 5 20 22 57 64 69 79 94 98 99 104 116 121
POR                  : 81
PRIVATE              : 44
PUNTO                : 19 61
PUNTOSRANGO          : 97
RANGE                : 
READ                 : 57
RETURN               : 9
SOBRE                : 82
STRING               : 17 57 71 77
WHEN                 : 99
WHILE                : 98
WRITE                : 69
error                : 

Nonterminals, with rules where they appear

asignacion           : 46
asignacion2          : 54
asignacion2r         : 56 58
asignacion3          : 54
bloque               : 64 67 94 98 100 101 102 116
bloque2              : 8 111
bloque3              : 9
body                 : 2
body2                : 116
class                : 1
class2               : 2
classparams          : 2
classparams2         : 5
condicion            : 47
condicion2           : 63 65
condicionr           : 63
empty                : 4 7 10 12 24 26 33 38 42 45 53 59 62 66 68 73 83 88 90 93 103 106 108 110 113 115 118 120 122
esc1                 : 69 72
esc2                 : 69 72
escritura            : 48
estatuto             : 8 46 47 48 49 50 51 52 114
estatutor            : 63
exp                  : 27 28 29 30 31 32 34
expr                 : 85 86 87
expresion            : 11 23 25 55 56 58 60 64 70 79 98 99 121 0
expresion2           : 20 22
expresionr           : 23 25 121
factor               : 81 82 84
factor2              : 80
for                  : 49
for2                 : 94
fun                  : 119
fun2                 : 104
fun3                 : 104
funbody              : 104
funparamr            : 105 107
funr                 : 116 119
llamada              : 52
megaexp              : 21
megaexpr             : 35 36 37
opc1                 : 111
opc2                 : 111
oplog                : 34
range                : 96 101
resultado            : 
superexp             : 35 36 37
termino              : 85 86 87
terminor             : 81 82 84
tipo                 : 39 40 105 107 109
varcte               : 18 80 89 100
varcter              : 80 89 100
vars                 : 6 112 117
vars2                : 3 39 40
vars3                : 39 40 104
varsr                : 41 43
when                 : 51
when2                : 99 100 101 102
while                : 50

Parsing method: LALR

state 0

    (0) S' -> . expresion
    (21) expresion -> . megaexp
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (35) megaexp -> . superexp megaexpr
    (34) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 3
    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

  ! ID              [ reduce using rule 123 (empty -> .) ]

    expresion                      shift and go to state 1
    megaexp                        shift and go to state 2
    superexp                       shift and go to state 5
    exp                            shift and go to state 6
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 1

    (0) S' -> expresion .



state 2

    (21) expresion -> megaexp .

    $end            reduce using rule 21 (expresion -> megaexp .)
    PARDER          reduce using rule 21 (expresion -> megaexp .)
    COMA            reduce using rule 21 (expresion -> megaexp .)


state 3

    (22) expresion -> ID . PARIZQ expresion2 PARDER

    PARIZQ          shift and go to state 13


state 4

    (79) factor -> PARIZQ . expresion PARDER
    (21) expresion -> . megaexp
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (35) megaexp -> . superexp megaexpr
    (34) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 3
    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

  ! ID              [ reduce using rule 123 (empty -> .) ]

    expresion                      shift and go to state 14
    megaexp                        shift and go to state 2
    superexp                       shift and go to state 5
    exp                            shift and go to state 6
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 5

    (35) megaexp -> superexp . megaexpr
    (36) megaexpr -> . AND superexp megaexpr
    (37) megaexpr -> . OR superexp megaexpr
    (38) megaexpr -> . empty
    (123) empty -> .

    AND             shift and go to state 16
    OR              shift and go to state 17
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    megaexpr                       shift and go to state 15
    empty                          shift and go to state 18

state 6

    (34) superexp -> exp . oplog
    (27) oplog -> . MAYORQUE exp
    (28) oplog -> . MENORQUE exp
    (29) oplog -> . DIFERENTE exp
    (30) oplog -> . MAYOROIGUAL exp
    (31) oplog -> . MENOROIGUAL exp
    (32) oplog -> . IGUALIGUAL exp
    (33) oplog -> . empty
    (123) empty -> .

    MAYORQUE        shift and go to state 20
    MENORQUE        shift and go to state 21
    DIFERENTE       shift and go to state 22
    MAYOROIGUAL     shift and go to state 23
    MENOROIGUAL     shift and go to state 24
    IGUALIGUAL      shift and go to state 25
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    oplog                          shift and go to state 19
    empty                          shift and go to state 26

state 7

    (85) exp -> termino . expr
    (86) expr -> . MAS termino expr
    (87) expr -> . MENOS termino expr
    (88) expr -> . empty
    (123) empty -> .

    MAS             shift and go to state 28
    MENOS           shift and go to state 29
    MAYORQUE        reduce using rule 123 (empty -> .)
    MENORQUE        reduce using rule 123 (empty -> .)
    DIFERENTE       reduce using rule 123 (empty -> .)
    MAYOROIGUAL     reduce using rule 123 (empty -> .)
    MENOROIGUAL     reduce using rule 123 (empty -> .)
    IGUALIGUAL      reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    expr                           shift and go to state 27
    empty                          shift and go to state 30

state 8

    (84) termino -> factor . terminor
    (81) terminor -> . POR factor terminor
    (82) terminor -> . SOBRE factor terminor
    (83) terminor -> . empty
    (123) empty -> .

    POR             shift and go to state 32
    SOBRE           shift and go to state 33
    MAS             reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAYORQUE        reduce using rule 123 (empty -> .)
    MENORQUE        reduce using rule 123 (empty -> .)
    DIFERENTE       reduce using rule 123 (empty -> .)
    MAYOROIGUAL     reduce using rule 123 (empty -> .)
    MENOROIGUAL     reduce using rule 123 (empty -> .)
    IGUALIGUAL      reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    terminor                       shift and go to state 31
    empty                          shift and go to state 34

state 9

    (80) factor -> factor2 . varcte varcter
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 36
    INTNUM          shift and go to state 37
    FLOATNUM        shift and go to state 38
    BOOLVAL         shift and go to state 39
    STRING          shift and go to state 40

    varcte                         shift and go to state 35

state 10

    (91) factor2 -> MAS .

    ID              reduce using rule 91 (factor2 -> MAS .)
    INTNUM          reduce using rule 91 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 91 (factor2 -> MAS .)
    BOOLVAL         reduce using rule 91 (factor2 -> MAS .)
    STRING          reduce using rule 91 (factor2 -> MAS .)


state 11

    (92) factor2 -> MENOS .

    ID              reduce using rule 92 (factor2 -> MENOS .)
    INTNUM          reduce using rule 92 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 92 (factor2 -> MENOS .)
    BOOLVAL         reduce using rule 92 (factor2 -> MENOS .)
    STRING          reduce using rule 92 (factor2 -> MENOS .)


state 12

    (93) factor2 -> empty .

    ID              reduce using rule 93 (factor2 -> empty .)
    INTNUM          reduce using rule 93 (factor2 -> empty .)
    FLOATNUM        reduce using rule 93 (factor2 -> empty .)
    BOOLVAL         reduce using rule 93 (factor2 -> empty .)
    STRING          reduce using rule 93 (factor2 -> empty .)


state 13

    (22) expresion -> ID PARIZQ . expresion2 PARDER
    (25) expresion2 -> . expresion expresionr
    (26) expresion2 -> . empty
    (21) expresion -> . megaexp
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (123) empty -> .
    (35) megaexp -> . superexp megaexpr
    (34) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 3
    PARDER          reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)
    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11

  ! ID              [ reduce using rule 123 (empty -> .) ]

    expresion2                     shift and go to state 41
    expresion                      shift and go to state 42
    empty                          shift and go to state 43
    megaexp                        shift and go to state 2
    superexp                       shift and go to state 5
    exp                            shift and go to state 6
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9

state 14

    (79) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 44


state 15

    (35) megaexp -> superexp megaexpr .

    $end            reduce using rule 35 (megaexp -> superexp megaexpr .)
    PARDER          reduce using rule 35 (megaexp -> superexp megaexpr .)
    COMA            reduce using rule 35 (megaexp -> superexp megaexpr .)


state 16

    (36) megaexpr -> AND . superexp megaexpr
    (34) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    superexp                       shift and go to state 45
    exp                            shift and go to state 6
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 17

    (37) megaexpr -> OR . superexp megaexpr
    (34) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    superexp                       shift and go to state 46
    exp                            shift and go to state 6
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 18

    (38) megaexpr -> empty .

    $end            reduce using rule 38 (megaexpr -> empty .)
    PARDER          reduce using rule 38 (megaexpr -> empty .)
    COMA            reduce using rule 38 (megaexpr -> empty .)


state 19

    (34) superexp -> exp oplog .

    AND             reduce using rule 34 (superexp -> exp oplog .)
    OR              reduce using rule 34 (superexp -> exp oplog .)
    $end            reduce using rule 34 (superexp -> exp oplog .)
    PARDER          reduce using rule 34 (superexp -> exp oplog .)
    COMA            reduce using rule 34 (superexp -> exp oplog .)


state 20

    (27) oplog -> MAYORQUE . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    exp                            shift and go to state 47
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 21

    (28) oplog -> MENORQUE . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    exp                            shift and go to state 48
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 22

    (29) oplog -> DIFERENTE . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    exp                            shift and go to state 49
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 23

    (30) oplog -> MAYOROIGUAL . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    exp                            shift and go to state 50
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 24

    (31) oplog -> MENOROIGUAL . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    exp                            shift and go to state 51
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 25

    (32) oplog -> IGUALIGUAL . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    exp                            shift and go to state 52
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 26

    (33) oplog -> empty .

    AND             reduce using rule 33 (oplog -> empty .)
    OR              reduce using rule 33 (oplog -> empty .)
    $end            reduce using rule 33 (oplog -> empty .)
    PARDER          reduce using rule 33 (oplog -> empty .)
    COMA            reduce using rule 33 (oplog -> empty .)


state 27

    (85) exp -> termino expr .

    MAYORQUE        reduce using rule 85 (exp -> termino expr .)
    MENORQUE        reduce using rule 85 (exp -> termino expr .)
    DIFERENTE       reduce using rule 85 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 85 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 85 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 85 (exp -> termino expr .)
    AND             reduce using rule 85 (exp -> termino expr .)
    OR              reduce using rule 85 (exp -> termino expr .)
    $end            reduce using rule 85 (exp -> termino expr .)
    PARDER          reduce using rule 85 (exp -> termino expr .)
    COMA            reduce using rule 85 (exp -> termino expr .)


state 28

    (86) expr -> MAS . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    termino                        shift and go to state 53
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 29

    (87) expr -> MENOS . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    termino                        shift and go to state 54
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 30

    (88) expr -> empty .

    MAYORQUE        reduce using rule 88 (expr -> empty .)
    MENORQUE        reduce using rule 88 (expr -> empty .)
    DIFERENTE       reduce using rule 88 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 88 (expr -> empty .)
    MENOROIGUAL     reduce using rule 88 (expr -> empty .)
    IGUALIGUAL      reduce using rule 88 (expr -> empty .)
    AND             reduce using rule 88 (expr -> empty .)
    OR              reduce using rule 88 (expr -> empty .)
    $end            reduce using rule 88 (expr -> empty .)
    PARDER          reduce using rule 88 (expr -> empty .)
    COMA            reduce using rule 88 (expr -> empty .)


state 31

    (84) termino -> factor terminor .

    MAS             reduce using rule 84 (termino -> factor terminor .)
    MENOS           reduce using rule 84 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 84 (termino -> factor terminor .)
    MENORQUE        reduce using rule 84 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 84 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 84 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 84 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 84 (termino -> factor terminor .)
    AND             reduce using rule 84 (termino -> factor terminor .)
    OR              reduce using rule 84 (termino -> factor terminor .)
    $end            reduce using rule 84 (termino -> factor terminor .)
    PARDER          reduce using rule 84 (termino -> factor terminor .)
    COMA            reduce using rule 84 (termino -> factor terminor .)


state 32

    (81) terminor -> POR . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    factor                         shift and go to state 55
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 33

    (82) terminor -> SOBRE . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    ID              reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    factor                         shift and go to state 56
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 34

    (83) terminor -> empty .

    MAS             reduce using rule 83 (terminor -> empty .)
    MENOS           reduce using rule 83 (terminor -> empty .)
    MAYORQUE        reduce using rule 83 (terminor -> empty .)
    MENORQUE        reduce using rule 83 (terminor -> empty .)
    DIFERENTE       reduce using rule 83 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 83 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 83 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 83 (terminor -> empty .)
    AND             reduce using rule 83 (terminor -> empty .)
    OR              reduce using rule 83 (terminor -> empty .)
    $end            reduce using rule 83 (terminor -> empty .)
    PARDER          reduce using rule 83 (terminor -> empty .)
    COMA            reduce using rule 83 (terminor -> empty .)


state 35

    (80) factor -> factor2 varcte . varcter
    (89) varcter -> . COMA varcte varcter
    (90) varcter -> . empty
    (123) empty -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 58
    POR             reduce using rule 123 (empty -> .)
    SOBRE           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAYORQUE        reduce using rule 123 (empty -> .)
    MENORQUE        reduce using rule 123 (empty -> .)
    DIFERENTE       reduce using rule 123 (empty -> .)
    MAYOROIGUAL     reduce using rule 123 (empty -> .)
    MENOROIGUAL     reduce using rule 123 (empty -> .)
    IGUALIGUAL      reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)

  ! COMA            [ reduce using rule 123 (empty -> .) ]

    varcter                        shift and go to state 57
    empty                          shift and go to state 59

state 36

    (13) varcte -> ID .
    (18) varcte -> ID . CORCHIZQ varcte CORCHDER
    (19) varcte -> ID . PUNTO ID
    (20) varcte -> ID . PARIZQ expresion2 PARDER

    COMA            reduce using rule 13 (varcte -> ID .)
    POR             reduce using rule 13 (varcte -> ID .)
    SOBRE           reduce using rule 13 (varcte -> ID .)
    MAS             reduce using rule 13 (varcte -> ID .)
    MENOS           reduce using rule 13 (varcte -> ID .)
    MAYORQUE        reduce using rule 13 (varcte -> ID .)
    MENORQUE        reduce using rule 13 (varcte -> ID .)
    DIFERENTE       reduce using rule 13 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 13 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 13 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 13 (varcte -> ID .)
    AND             reduce using rule 13 (varcte -> ID .)
    OR              reduce using rule 13 (varcte -> ID .)
    $end            reduce using rule 13 (varcte -> ID .)
    PARDER          reduce using rule 13 (varcte -> ID .)
    CORCHDER        reduce using rule 13 (varcte -> ID .)
    CORCHIZQ        shift and go to state 60
    PUNTO           shift and go to state 61
    PARIZQ          shift and go to state 62


state 37

    (14) varcte -> INTNUM .

    COMA            reduce using rule 14 (varcte -> INTNUM .)
    POR             reduce using rule 14 (varcte -> INTNUM .)
    SOBRE           reduce using rule 14 (varcte -> INTNUM .)
    MAS             reduce using rule 14 (varcte -> INTNUM .)
    MENOS           reduce using rule 14 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 14 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 14 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 14 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 14 (varcte -> INTNUM .)
    AND             reduce using rule 14 (varcte -> INTNUM .)
    OR              reduce using rule 14 (varcte -> INTNUM .)
    $end            reduce using rule 14 (varcte -> INTNUM .)
    PARDER          reduce using rule 14 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 14 (varcte -> INTNUM .)


state 38

    (15) varcte -> FLOATNUM .

    COMA            reduce using rule 15 (varcte -> FLOATNUM .)
    POR             reduce using rule 15 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 15 (varcte -> FLOATNUM .)
    MAS             reduce using rule 15 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 15 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 15 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 15 (varcte -> FLOATNUM .)
    AND             reduce using rule 15 (varcte -> FLOATNUM .)
    OR              reduce using rule 15 (varcte -> FLOATNUM .)
    $end            reduce using rule 15 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 15 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 15 (varcte -> FLOATNUM .)


state 39

    (16) varcte -> BOOLVAL .

    COMA            reduce using rule 16 (varcte -> BOOLVAL .)
    POR             reduce using rule 16 (varcte -> BOOLVAL .)
    SOBRE           reduce using rule 16 (varcte -> BOOLVAL .)
    MAS             reduce using rule 16 (varcte -> BOOLVAL .)
    MENOS           reduce using rule 16 (varcte -> BOOLVAL .)
    MAYORQUE        reduce using rule 16 (varcte -> BOOLVAL .)
    MENORQUE        reduce using rule 16 (varcte -> BOOLVAL .)
    DIFERENTE       reduce using rule 16 (varcte -> BOOLVAL .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> BOOLVAL .)
    MENOROIGUAL     reduce using rule 16 (varcte -> BOOLVAL .)
    IGUALIGUAL      reduce using rule 16 (varcte -> BOOLVAL .)
    AND             reduce using rule 16 (varcte -> BOOLVAL .)
    OR              reduce using rule 16 (varcte -> BOOLVAL .)
    $end            reduce using rule 16 (varcte -> BOOLVAL .)
    PARDER          reduce using rule 16 (varcte -> BOOLVAL .)
    CORCHDER        reduce using rule 16 (varcte -> BOOLVAL .)


state 40

    (17) varcte -> STRING .

    COMA            reduce using rule 17 (varcte -> STRING .)
    POR             reduce using rule 17 (varcte -> STRING .)
    SOBRE           reduce using rule 17 (varcte -> STRING .)
    MAS             reduce using rule 17 (varcte -> STRING .)
    MENOS           reduce using rule 17 (varcte -> STRING .)
    MAYORQUE        reduce using rule 17 (varcte -> STRING .)
    MENORQUE        reduce using rule 17 (varcte -> STRING .)
    DIFERENTE       reduce using rule 17 (varcte -> STRING .)
    MAYOROIGUAL     reduce using rule 17 (varcte -> STRING .)
    MENOROIGUAL     reduce using rule 17 (varcte -> STRING .)
    IGUALIGUAL      reduce using rule 17 (varcte -> STRING .)
    AND             reduce using rule 17 (varcte -> STRING .)
    OR              reduce using rule 17 (varcte -> STRING .)
    $end            reduce using rule 17 (varcte -> STRING .)
    PARDER          reduce using rule 17 (varcte -> STRING .)
    CORCHDER        reduce using rule 17 (varcte -> STRING .)


state 41

    (22) expresion -> ID PARIZQ expresion2 . PARDER

    PARDER          shift and go to state 63


state 42

    (25) expresion2 -> expresion . expresionr
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (123) empty -> .

    COMA            shift and go to state 65
    PARDER          reduce using rule 123 (empty -> .)

    expresionr                     shift and go to state 64
    empty                          shift and go to state 66

state 43

    (26) expresion2 -> empty .
    (93) factor2 -> empty .

    PARDER          reduce using rule 26 (expresion2 -> empty .)
    ID              reduce using rule 93 (factor2 -> empty .)
    INTNUM          reduce using rule 93 (factor2 -> empty .)
    FLOATNUM        reduce using rule 93 (factor2 -> empty .)
    BOOLVAL         reduce using rule 93 (factor2 -> empty .)
    STRING          reduce using rule 93 (factor2 -> empty .)


state 44

    (79) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    $end            reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 79 (factor -> PARIZQ expresion PARDER .)


state 45

    (36) megaexpr -> AND superexp . megaexpr
    (36) megaexpr -> . AND superexp megaexpr
    (37) megaexpr -> . OR superexp megaexpr
    (38) megaexpr -> . empty
    (123) empty -> .

    AND             shift and go to state 16
    OR              shift and go to state 17
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    megaexpr                       shift and go to state 67
    empty                          shift and go to state 18

state 46

    (37) megaexpr -> OR superexp . megaexpr
    (36) megaexpr -> . AND superexp megaexpr
    (37) megaexpr -> . OR superexp megaexpr
    (38) megaexpr -> . empty
    (123) empty -> .

    AND             shift and go to state 16
    OR              shift and go to state 17
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    megaexpr                       shift and go to state 68
    empty                          shift and go to state 18

state 47

    (27) oplog -> MAYORQUE exp .

    AND             reduce using rule 27 (oplog -> MAYORQUE exp .)
    OR              reduce using rule 27 (oplog -> MAYORQUE exp .)
    $end            reduce using rule 27 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 27 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 27 (oplog -> MAYORQUE exp .)


state 48

    (28) oplog -> MENORQUE exp .

    AND             reduce using rule 28 (oplog -> MENORQUE exp .)
    OR              reduce using rule 28 (oplog -> MENORQUE exp .)
    $end            reduce using rule 28 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 28 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 28 (oplog -> MENORQUE exp .)


state 49

    (29) oplog -> DIFERENTE exp .

    AND             reduce using rule 29 (oplog -> DIFERENTE exp .)
    OR              reduce using rule 29 (oplog -> DIFERENTE exp .)
    $end            reduce using rule 29 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 29 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 29 (oplog -> DIFERENTE exp .)


state 50

    (30) oplog -> MAYOROIGUAL exp .

    AND             reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    OR              reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    $end            reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 30 (oplog -> MAYOROIGUAL exp .)


state 51

    (31) oplog -> MENOROIGUAL exp .

    AND             reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    OR              reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    $end            reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 31 (oplog -> MENOROIGUAL exp .)


state 52

    (32) oplog -> IGUALIGUAL exp .

    AND             reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    OR              reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    $end            reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 32 (oplog -> IGUALIGUAL exp .)


state 53

    (86) expr -> MAS termino . expr
    (86) expr -> . MAS termino expr
    (87) expr -> . MENOS termino expr
    (88) expr -> . empty
    (123) empty -> .

    MAS             shift and go to state 28
    MENOS           shift and go to state 29
    MAYORQUE        reduce using rule 123 (empty -> .)
    MENORQUE        reduce using rule 123 (empty -> .)
    DIFERENTE       reduce using rule 123 (empty -> .)
    MAYOROIGUAL     reduce using rule 123 (empty -> .)
    MENOROIGUAL     reduce using rule 123 (empty -> .)
    IGUALIGUAL      reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    expr                           shift and go to state 69
    empty                          shift and go to state 30

state 54

    (87) expr -> MENOS termino . expr
    (86) expr -> . MAS termino expr
    (87) expr -> . MENOS termino expr
    (88) expr -> . empty
    (123) empty -> .

    MAS             shift and go to state 28
    MENOS           shift and go to state 29
    MAYORQUE        reduce using rule 123 (empty -> .)
    MENORQUE        reduce using rule 123 (empty -> .)
    DIFERENTE       reduce using rule 123 (empty -> .)
    MAYOROIGUAL     reduce using rule 123 (empty -> .)
    MENOROIGUAL     reduce using rule 123 (empty -> .)
    IGUALIGUAL      reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    expr                           shift and go to state 70
    empty                          shift and go to state 30

state 55

    (81) terminor -> POR factor . terminor
    (81) terminor -> . POR factor terminor
    (82) terminor -> . SOBRE factor terminor
    (83) terminor -> . empty
    (123) empty -> .

    POR             shift and go to state 32
    SOBRE           shift and go to state 33
    MAS             reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAYORQUE        reduce using rule 123 (empty -> .)
    MENORQUE        reduce using rule 123 (empty -> .)
    DIFERENTE       reduce using rule 123 (empty -> .)
    MAYOROIGUAL     reduce using rule 123 (empty -> .)
    MENOROIGUAL     reduce using rule 123 (empty -> .)
    IGUALIGUAL      reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    terminor                       shift and go to state 71
    empty                          shift and go to state 34

state 56

    (82) terminor -> SOBRE factor . terminor
    (81) terminor -> . POR factor terminor
    (82) terminor -> . SOBRE factor terminor
    (83) terminor -> . empty
    (123) empty -> .

    POR             shift and go to state 32
    SOBRE           shift and go to state 33
    MAS             reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAYORQUE        reduce using rule 123 (empty -> .)
    MENORQUE        reduce using rule 123 (empty -> .)
    DIFERENTE       reduce using rule 123 (empty -> .)
    MAYOROIGUAL     reduce using rule 123 (empty -> .)
    MENOROIGUAL     reduce using rule 123 (empty -> .)
    IGUALIGUAL      reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    terminor                       shift and go to state 72
    empty                          shift and go to state 34

state 57

    (80) factor -> factor2 varcte varcter .

    POR             reduce using rule 80 (factor -> factor2 varcte varcter .)
    SOBRE           reduce using rule 80 (factor -> factor2 varcte varcter .)
    MAS             reduce using rule 80 (factor -> factor2 varcte varcter .)
    MENOS           reduce using rule 80 (factor -> factor2 varcte varcter .)
    MAYORQUE        reduce using rule 80 (factor -> factor2 varcte varcter .)
    MENORQUE        reduce using rule 80 (factor -> factor2 varcte varcter .)
    DIFERENTE       reduce using rule 80 (factor -> factor2 varcte varcter .)
    MAYOROIGUAL     reduce using rule 80 (factor -> factor2 varcte varcter .)
    MENOROIGUAL     reduce using rule 80 (factor -> factor2 varcte varcter .)
    IGUALIGUAL      reduce using rule 80 (factor -> factor2 varcte varcter .)
    AND             reduce using rule 80 (factor -> factor2 varcte varcter .)
    OR              reduce using rule 80 (factor -> factor2 varcte varcter .)
    $end            reduce using rule 80 (factor -> factor2 varcte varcter .)
    PARDER          reduce using rule 80 (factor -> factor2 varcte varcter .)
    COMA            reduce using rule 80 (factor -> factor2 varcte varcter .)


state 58

    (89) varcter -> COMA . varcte varcter
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 36
    INTNUM          shift and go to state 37
    FLOATNUM        shift and go to state 38
    BOOLVAL         shift and go to state 39
    STRING          shift and go to state 40

    varcte                         shift and go to state 73

state 59

    (90) varcter -> empty .

    POR             reduce using rule 90 (varcter -> empty .)
    SOBRE           reduce using rule 90 (varcter -> empty .)
    MAS             reduce using rule 90 (varcter -> empty .)
    MENOS           reduce using rule 90 (varcter -> empty .)
    MAYORQUE        reduce using rule 90 (varcter -> empty .)
    MENORQUE        reduce using rule 90 (varcter -> empty .)
    DIFERENTE       reduce using rule 90 (varcter -> empty .)
    MAYOROIGUAL     reduce using rule 90 (varcter -> empty .)
    MENOROIGUAL     reduce using rule 90 (varcter -> empty .)
    IGUALIGUAL      reduce using rule 90 (varcter -> empty .)
    AND             reduce using rule 90 (varcter -> empty .)
    OR              reduce using rule 90 (varcter -> empty .)
    $end            reduce using rule 90 (varcter -> empty .)
    PARDER          reduce using rule 90 (varcter -> empty .)
    COMA            reduce using rule 90 (varcter -> empty .)


state 60

    (18) varcte -> ID CORCHIZQ . varcte CORCHDER
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 36
    INTNUM          shift and go to state 37
    FLOATNUM        shift and go to state 38
    BOOLVAL         shift and go to state 39
    STRING          shift and go to state 40

    varcte                         shift and go to state 74

state 61

    (19) varcte -> ID PUNTO . ID

    ID              shift and go to state 75


state 62

    (20) varcte -> ID PARIZQ . expresion2 PARDER
    (25) expresion2 -> . expresion expresionr
    (26) expresion2 -> . empty
    (21) expresion -> . megaexp
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (123) empty -> .
    (35) megaexp -> . superexp megaexpr
    (34) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 3
    PARDER          reduce using rule 123 (empty -> .)
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)
    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11

  ! ID              [ reduce using rule 123 (empty -> .) ]

    expresion2                     shift and go to state 76
    expresion                      shift and go to state 42
    empty                          shift and go to state 43
    megaexp                        shift and go to state 2
    superexp                       shift and go to state 5
    exp                            shift and go to state 6
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9

state 63

    (22) expresion -> ID PARIZQ expresion2 PARDER .

    $end            reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    PARDER          reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    COMA            reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)


state 64

    (25) expresion2 -> expresion expresionr .

    PARDER          reduce using rule 25 (expresion2 -> expresion expresionr .)


state 65

    (23) expresionr -> COMA . expresion expresionr
    (21) expresion -> . megaexp
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (35) megaexp -> . superexp megaexpr
    (34) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte varcter
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 3
    PARIZQ          shift and go to state 4
    MAS             shift and go to state 10
    MENOS           shift and go to state 11
    INTNUM          reduce using rule 123 (empty -> .)
    FLOATNUM        reduce using rule 123 (empty -> .)
    BOOLVAL         reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

  ! ID              [ reduce using rule 123 (empty -> .) ]

    expresion                      shift and go to state 77
    megaexp                        shift and go to state 2
    superexp                       shift and go to state 5
    exp                            shift and go to state 6
    termino                        shift and go to state 7
    factor                         shift and go to state 8
    factor2                        shift and go to state 9
    empty                          shift and go to state 12

state 66

    (24) expresionr -> empty .

    PARDER          reduce using rule 24 (expresionr -> empty .)


state 67

    (36) megaexpr -> AND superexp megaexpr .

    $end            reduce using rule 36 (megaexpr -> AND superexp megaexpr .)
    PARDER          reduce using rule 36 (megaexpr -> AND superexp megaexpr .)
    COMA            reduce using rule 36 (megaexpr -> AND superexp megaexpr .)


state 68

    (37) megaexpr -> OR superexp megaexpr .

    $end            reduce using rule 37 (megaexpr -> OR superexp megaexpr .)
    PARDER          reduce using rule 37 (megaexpr -> OR superexp megaexpr .)
    COMA            reduce using rule 37 (megaexpr -> OR superexp megaexpr .)


state 69

    (86) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 86 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 86 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 86 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 86 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 86 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 86 (expr -> MAS termino expr .)
    AND             reduce using rule 86 (expr -> MAS termino expr .)
    OR              reduce using rule 86 (expr -> MAS termino expr .)
    $end            reduce using rule 86 (expr -> MAS termino expr .)
    PARDER          reduce using rule 86 (expr -> MAS termino expr .)
    COMA            reduce using rule 86 (expr -> MAS termino expr .)


state 70

    (87) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 87 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 87 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 87 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 87 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 87 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 87 (expr -> MENOS termino expr .)
    AND             reduce using rule 87 (expr -> MENOS termino expr .)
    OR              reduce using rule 87 (expr -> MENOS termino expr .)
    $end            reduce using rule 87 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 87 (expr -> MENOS termino expr .)
    COMA            reduce using rule 87 (expr -> MENOS termino expr .)


state 71

    (81) terminor -> POR factor terminor .

    MAS             reduce using rule 81 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 81 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 81 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 81 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 81 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 81 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 81 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 81 (terminor -> POR factor terminor .)
    AND             reduce using rule 81 (terminor -> POR factor terminor .)
    OR              reduce using rule 81 (terminor -> POR factor terminor .)
    $end            reduce using rule 81 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 81 (terminor -> POR factor terminor .)
    COMA            reduce using rule 81 (terminor -> POR factor terminor .)


state 72

    (82) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 82 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 82 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 82 (terminor -> SOBRE factor terminor .)
    AND             reduce using rule 82 (terminor -> SOBRE factor terminor .)
    OR              reduce using rule 82 (terminor -> SOBRE factor terminor .)
    $end            reduce using rule 82 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 82 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 82 (terminor -> SOBRE factor terminor .)


state 73

    (89) varcter -> COMA varcte . varcter
    (89) varcter -> . COMA varcte varcter
    (90) varcter -> . empty
    (123) empty -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 58
    POR             reduce using rule 123 (empty -> .)
    SOBRE           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAYORQUE        reduce using rule 123 (empty -> .)
    MENORQUE        reduce using rule 123 (empty -> .)
    DIFERENTE       reduce using rule 123 (empty -> .)
    MAYOROIGUAL     reduce using rule 123 (empty -> .)
    MENOROIGUAL     reduce using rule 123 (empty -> .)
    IGUALIGUAL      reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    PARDER          reduce using rule 123 (empty -> .)

  ! COMA            [ reduce using rule 123 (empty -> .) ]

    varcter                        shift and go to state 78
    empty                          shift and go to state 59

state 74

    (18) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 79


state 75

    (19) varcte -> ID PUNTO ID .

    COMA            reduce using rule 19 (varcte -> ID PUNTO ID .)
    POR             reduce using rule 19 (varcte -> ID PUNTO ID .)
    SOBRE           reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAS             reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENOS           reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAYORQUE        reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENORQUE        reduce using rule 19 (varcte -> ID PUNTO ID .)
    DIFERENTE       reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAYOROIGUAL     reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENOROIGUAL     reduce using rule 19 (varcte -> ID PUNTO ID .)
    IGUALIGUAL      reduce using rule 19 (varcte -> ID PUNTO ID .)
    AND             reduce using rule 19 (varcte -> ID PUNTO ID .)
    OR              reduce using rule 19 (varcte -> ID PUNTO ID .)
    $end            reduce using rule 19 (varcte -> ID PUNTO ID .)
    PARDER          reduce using rule 19 (varcte -> ID PUNTO ID .)
    CORCHDER        reduce using rule 19 (varcte -> ID PUNTO ID .)


state 76

    (20) varcte -> ID PARIZQ expresion2 . PARDER

    PARDER          shift and go to state 80


state 77

    (23) expresionr -> COMA expresion . expresionr
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (123) empty -> .

    COMA            shift and go to state 65
    PARDER          reduce using rule 123 (empty -> .)

    expresionr                     shift and go to state 81
    empty                          shift and go to state 66

state 78

    (89) varcter -> COMA varcte varcter .

    POR             reduce using rule 89 (varcter -> COMA varcte varcter .)
    SOBRE           reduce using rule 89 (varcter -> COMA varcte varcter .)
    MAS             reduce using rule 89 (varcter -> COMA varcte varcter .)
    MENOS           reduce using rule 89 (varcter -> COMA varcte varcter .)
    MAYORQUE        reduce using rule 89 (varcter -> COMA varcte varcter .)
    MENORQUE        reduce using rule 89 (varcter -> COMA varcte varcter .)
    DIFERENTE       reduce using rule 89 (varcter -> COMA varcte varcter .)
    MAYOROIGUAL     reduce using rule 89 (varcter -> COMA varcte varcter .)
    MENOROIGUAL     reduce using rule 89 (varcter -> COMA varcte varcter .)
    IGUALIGUAL      reduce using rule 89 (varcter -> COMA varcte varcter .)
    AND             reduce using rule 89 (varcter -> COMA varcte varcter .)
    OR              reduce using rule 89 (varcter -> COMA varcte varcter .)
    $end            reduce using rule 89 (varcter -> COMA varcte varcter .)
    PARDER          reduce using rule 89 (varcter -> COMA varcte varcter .)
    COMA            reduce using rule 89 (varcter -> COMA varcte varcter .)


state 79

    (18) varcte -> ID CORCHIZQ varcte CORCHDER .

    COMA            reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    POR             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    AND             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    OR              reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    $end            reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 80

    (20) varcte -> ID PARIZQ expresion2 PARDER .

    COMA            reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    POR             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    SOBRE           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAS             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOS           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYORQUE        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENORQUE        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    DIFERENTE       reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYOROIGUAL     reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOROIGUAL     reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    IGUALIGUAL      reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    AND             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    OR              reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    $end            reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    PARDER          reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    CORCHDER        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)


state 81

    (23) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 23 (expresionr -> COMA expresion expresionr .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 13 resolved as shift
WARNING: shift/reduce conflict for COMA in state 35 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for COMA in state 73 resolved as shift
