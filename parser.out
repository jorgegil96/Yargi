Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    RANGE
    STRINGVAL

Grammar

Rule 0     S' -> class
Rule 1     resultado -> class
Rule 2     class -> CLASS CID classparams class2 body
Rule 3     class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER
Rule 4     class2 -> empty
Rule 5     classparams -> PARIZQ classparams2 PARDER
Rule 6     classparams2 -> vars
Rule 7     classparams2 -> empty
Rule 8     bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 9     bloque2 -> RETURN bloque3
Rule 10    bloque2 -> empty
Rule 11    bloque3 -> expresion
Rule 12    bloque3 -> empty
Rule 13    varcte -> ID
Rule 14    varcte -> INTNUM
Rule 15    varcte -> FLOATNUM
Rule 16    varcte -> BOOLVAL
Rule 17    varcte -> STRING
Rule 18    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 19    varcte -> ID PUNTO ID
Rule 20    varcte -> ID PARIZQ expresion2 PARDER
Rule 21    expresion -> megaexp
Rule 22    expresionr -> COMA expresion expresionr
Rule 23    expresionr -> empty
Rule 24    expresion2 -> expresion expresionr
Rule 25    expresion2 -> empty
Rule 26    oplog -> MAYORQUE exp
Rule 27    oplog -> MENORQUE exp
Rule 28    oplog -> DIFERENTE exp
Rule 29    oplog -> MAYOROIGUAL exp
Rule 30    oplog -> MENOROIGUAL exp
Rule 31    oplog -> IGUALIGUAL exp
Rule 32    oplog -> empty
Rule 33    superexp -> exp oplog
Rule 34    megaexp -> superexp megaexpr
Rule 35    megaexpr -> AND superexp megaexpr
Rule 36    megaexpr -> OR superexp megaexpr
Rule 37    megaexpr -> empty
Rule 38    vars -> vars3 tipo vars2 COLON
Rule 39    vars -> vars3 tipo LIST vars2 COLON
Rule 40    varsr -> COMA ID varsr
Rule 41    varsr -> empty
Rule 42    vars2 -> ID varsr
Rule 43    vars3 -> PRIVATE
Rule 44    vars3 -> empty
Rule 45    estatuto -> asignacion estatuto
Rule 46    estatuto -> condicion estatuto
Rule 47    estatuto -> escritura estatuto
Rule 48    estatuto -> for estatuto
Rule 49    estatuto -> while estatuto
Rule 50    estatuto -> when estatuto
Rule 51    estatuto -> llamada estatuto
Rule 52    estatuto -> empty
Rule 53    asignacion -> ID asignacion3 IGUAL asignacion2 COLON
Rule 54    asignacion2 -> expresion
Rule 55    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 56    asignacion2 -> READ PARIZQ STRING PARDER
Rule 57    asignacion2r -> COMA expresion asignacion2r
Rule 58    asignacion2r -> empty
Rule 59    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 60    asignacion3 -> PUNTO ID
Rule 61    asignacion3 -> empty
Rule 62    condicion -> IF condicion2 condicionr estatutor
Rule 63    condicion2 -> PARIZQ expresion PARDER bloque
Rule 64    condicionr -> ELSE IF condicion2
Rule 65    condicionr -> empty
Rule 66    estatutor -> ELSE bloque
Rule 67    estatutor -> empty
Rule 68    escritura -> WRITE PARIZQ esc1 esc2 PARDER
Rule 69    esc1 -> expresion
Rule 70    esc1 -> STRING
Rule 71    esc2 -> COMA esc1 esc2
Rule 72    esc2 -> empty
Rule 73    tipo -> INT
Rule 74    tipo -> FLOAT
Rule 75    tipo -> BOOL
Rule 76    tipo -> STRING
Rule 77    tipo -> CID
Rule 78    factor -> PARIZQ expresion PARDER
Rule 79    factor -> factor2 varcte varcter
Rule 80    terminor -> POR factor terminor
Rule 81    terminor -> SOBRE factor terminor
Rule 82    terminor -> empty
Rule 83    termino -> factor terminor
Rule 84    exp -> termino expr
Rule 85    expr -> MAS termino expr
Rule 86    expr -> MENOS termino expr
Rule 87    expr -> empty
Rule 88    varcter -> COMA varcte varcter
Rule 89    varcter -> empty
Rule 90    factor2 -> MAS
Rule 91    factor2 -> MENOS
Rule 92    factor2 -> empty
Rule 93    for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 94    for2 -> ID
Rule 95    for2 -> range
Rule 96    range -> INTNUM PUNTOSRANGO INTNUM
Rule 97    while -> WHILE PARIZQ expresion PARDER bloque
Rule 98    when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
Rule 99    when2 -> varcte varcter FLECHITA bloque when2
Rule 100   when2 -> IN range FLECHITA bloque when2
Rule 101   when2 -> ELSE FLECHITA bloque when2
Rule 102   when2 -> empty
Rule 103   fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 104   fun2 -> tipo ID funparamr
Rule 105   fun2 -> empty
Rule 106   funparamr -> COMA tipo ID funparamr
Rule 107   funparamr -> empty
Rule 108   fun3 -> DOSPUNTOS tipo
Rule 109   fun3 -> empty
Rule 110   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 111   opc1 -> vars multvarsdecl
Rule 112   opc1 -> empty
Rule 113   opc2 -> estatuto
Rule 114   opc2 -> empty
Rule 115   body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER
Rule 116   body2 -> vars multvarsdecl
Rule 117   body2 -> empty
Rule 118   multvarsdecl -> vars
Rule 119   multvarsdecl -> empty
Rule 120   funr -> fun funr
Rule 121   funr -> empty
Rule 122   llamada -> ID PARIZQ expresion expresionr PARDER
Rule 123   llamada -> empty
Rule 124   empty -> <empty>

Terminals, with rules where they appear

AND                  : 35
BOOL                 : 75
BOOLVAL              : 16
CID                  : 2 77
CLASS                : 2
COLON                : 38 39 53
COMA                 : 22 40 57 71 88 106
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 18 55 59
CORCHIZQ             : 18 55 59
DIFERENTE            : 28
DOSPUNTOS            : 3 108
ELSE                 : 64 66 101
EOL                  : 
FLECHITA             : 99 100 101
FLOAT                : 74
FLOATNUM             : 15
FOR                  : 93
FUN                  : 103
GLOBAL               : 
ID                   : 3 13 18 19 19 20 40 42 53 60 93 94 103 104 106 122
IF                   : 62 64
IGUAL                : 53
IGUALIGUAL           : 31
IN                   : 93 100
INT                  : 73
INTNUM               : 14 96 96
LIST                 : 39
LLAVEDER             : 8 98 110 115
LLAVEIZQ             : 8 98 110 115
MAIN                 : 115
MAS                  : 85 90
MAYOROIGUAL          : 29
MAYORQUE             : 26
MENOROIGUAL          : 30
MENORQUE             : 27
MENOS                : 86 91
OR                   : 36
PARDER               : 3 5 20 56 63 68 78 93 97 98 103 115 122
PARIZQ               : 3 5 20 56 63 68 78 93 97 98 103 115 122
POR                  : 80
PRIVATE              : 43
PUNTO                : 19 60
PUNTOSRANGO          : 96
RANGE                : 
READ                 : 56
RETURN               : 9
SOBRE                : 81
STRING               : 17 56 70 76
STRINGVAL            : 
WHEN                 : 98
WHILE                : 97
WRITE                : 68
error                : 

Nonterminals, with rules where they appear

asignacion           : 45
asignacion2          : 53
asignacion2r         : 55 57
asignacion3          : 53
bloque               : 63 66 93 97 99 100 101 115
bloque2              : 8 110
bloque3              : 9
body                 : 2
body2                : 115
class                : 1 0
class2               : 2
classparams          : 2
classparams2         : 5
condicion            : 46
condicion2           : 62 64
condicionr           : 62
empty                : 4 7 10 12 23 25 32 37 41 44 52 58 61 65 67 72 82 87 89 92 102 105 107 109 112 114 117 119 121 123
esc1                 : 68 71
esc2                 : 68 71
escritura            : 47
estatuto             : 8 45 46 47 48 49 50 51 113
estatutor            : 62
exp                  : 26 27 28 29 30 31 33
expr                 : 84 85 86
expresion            : 11 22 24 54 55 57 59 63 69 78 97 98 122
expresion2           : 20
expresionr           : 22 24 122
factor               : 80 81 83
factor2              : 79
for                  : 48
for2                 : 93
fun                  : 120
fun2                 : 103
fun3                 : 103
funbody              : 103
funparamr            : 104 106
funr                 : 115 120
llamada              : 51
megaexp              : 21
megaexpr             : 34 35 36
multvarsdecl         : 111 116
opc1                 : 110
opc2                 : 110
oplog                : 33
range                : 95 100
resultado            : 
superexp             : 34 35 36
termino              : 84 85 86
terminor             : 80 81 83
tipo                 : 38 39 104 106 108
varcte               : 18 79 88 99
varcter              : 79 88 99
vars                 : 6 111 116 118
vars2                : 3 38 39
vars3                : 38 39 103
varsr                : 40 42
when                 : 50
when2                : 98 99 100 101
while                : 49

Parsing method: LALR

state 0

    (0) S' -> . class
    (2) class -> . CLASS CID classparams class2 body

    CLASS           shift and go to state 2

    class                          shift and go to state 1

state 1

    (0) S' -> class .



state 2

    (2) class -> CLASS . CID classparams class2 body

    CID             shift and go to state 3


state 3

    (2) class -> CLASS CID . classparams class2 body
    (5) classparams -> . PARIZQ classparams2 PARDER

    PARIZQ          shift and go to state 5

    classparams                    shift and go to state 4

state 4

    (2) class -> CLASS CID classparams . class2 body
    (3) class2 -> . DOSPUNTOS ID PARIZQ vars2 PARDER
    (4) class2 -> . empty
    (124) empty -> .

    DOSPUNTOS       shift and go to state 7
    LLAVEIZQ        reduce using rule 124 (empty -> .)

    class2                         shift and go to state 6
    empty                          shift and go to state 8

state 5

    (5) classparams -> PARIZQ . classparams2 PARDER
    (6) classparams2 -> . vars
    (7) classparams2 -> . empty
    (38) vars -> . vars3 tipo vars2 COLON
    (39) vars -> . vars3 tipo LIST vars2 COLON
    (124) empty -> .
    (43) vars3 -> . PRIVATE
    (44) vars3 -> . empty

    PARDER          reduce using rule 124 (empty -> .)
    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    BOOL            reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)
    CID             reduce using rule 124 (empty -> .)
    PRIVATE         shift and go to state 13

    classparams2                   shift and go to state 9
    vars                           shift and go to state 10
    empty                          shift and go to state 11
    vars3                          shift and go to state 12

state 6

    (2) class -> CLASS CID classparams class2 . body
    (115) body -> . LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER

    LLAVEIZQ        shift and go to state 15

    body                           shift and go to state 14

state 7

    (3) class2 -> DOSPUNTOS . ID PARIZQ vars2 PARDER

    ID              shift and go to state 16


state 8

    (4) class2 -> empty .

    LLAVEIZQ        reduce using rule 4 (class2 -> empty .)


state 9

    (5) classparams -> PARIZQ classparams2 . PARDER

    PARDER          shift and go to state 17


state 10

    (6) classparams2 -> vars .

    PARDER          reduce using rule 6 (classparams2 -> vars .)


state 11

    (7) classparams2 -> empty .
    (44) vars3 -> empty .

    PARDER          reduce using rule 7 (classparams2 -> empty .)
    INT             reduce using rule 44 (vars3 -> empty .)
    FLOAT           reduce using rule 44 (vars3 -> empty .)
    BOOL            reduce using rule 44 (vars3 -> empty .)
    STRING          reduce using rule 44 (vars3 -> empty .)
    CID             reduce using rule 44 (vars3 -> empty .)


state 12

    (38) vars -> vars3 . tipo vars2 COLON
    (39) vars -> vars3 . tipo LIST vars2 COLON
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . BOOL
    (76) tipo -> . STRING
    (77) tipo -> . CID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23

    tipo                           shift and go to state 18

state 13

    (43) vars3 -> PRIVATE .

    INT             reduce using rule 43 (vars3 -> PRIVATE .)
    FLOAT           reduce using rule 43 (vars3 -> PRIVATE .)
    BOOL            reduce using rule 43 (vars3 -> PRIVATE .)
    STRING          reduce using rule 43 (vars3 -> PRIVATE .)
    CID             reduce using rule 43 (vars3 -> PRIVATE .)
    FUN             reduce using rule 43 (vars3 -> PRIVATE .)


state 14

    (2) class -> CLASS CID classparams class2 body .

    $end            reduce using rule 2 (class -> CLASS CID classparams class2 body .)


state 15

    (115) body -> LLAVEIZQ . body2 funr MAIN PARIZQ PARDER bloque LLAVEDER
    (116) body2 -> . vars multvarsdecl
    (117) body2 -> . empty
    (38) vars -> . vars3 tipo vars2 COLON
    (39) vars -> . vars3 tipo LIST vars2 COLON
    (124) empty -> .
    (43) vars3 -> . PRIVATE
    (44) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 124 (empty -> .)
    FUN             reduce using rule 124 (empty -> .)
    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    BOOL            reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)
    CID             reduce using rule 124 (empty -> .)
    PRIVATE         shift and go to state 13

  ! PRIVATE         [ reduce using rule 124 (empty -> .) ]

    body2                          shift and go to state 24
    vars                           shift and go to state 25
    empty                          shift and go to state 26
    vars3                          shift and go to state 12

state 16

    (3) class2 -> DOSPUNTOS ID . PARIZQ vars2 PARDER

    PARIZQ          shift and go to state 27


state 17

    (5) classparams -> PARIZQ classparams2 PARDER .

    DOSPUNTOS       reduce using rule 5 (classparams -> PARIZQ classparams2 PARDER .)
    LLAVEIZQ        reduce using rule 5 (classparams -> PARIZQ classparams2 PARDER .)


state 18

    (38) vars -> vars3 tipo . vars2 COLON
    (39) vars -> vars3 tipo . LIST vars2 COLON
    (42) vars2 -> . ID varsr

    LIST            shift and go to state 29
    ID              shift and go to state 30

    vars2                          shift and go to state 28

state 19

    (73) tipo -> INT .

    LIST            reduce using rule 73 (tipo -> INT .)
    ID              reduce using rule 73 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 73 (tipo -> INT .)


state 20

    (74) tipo -> FLOAT .

    LIST            reduce using rule 74 (tipo -> FLOAT .)
    ID              reduce using rule 74 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 74 (tipo -> FLOAT .)


state 21

    (75) tipo -> BOOL .

    LIST            reduce using rule 75 (tipo -> BOOL .)
    ID              reduce using rule 75 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 75 (tipo -> BOOL .)


state 22

    (76) tipo -> STRING .

    LIST            reduce using rule 76 (tipo -> STRING .)
    ID              reduce using rule 76 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 76 (tipo -> STRING .)


state 23

    (77) tipo -> CID .

    LIST            reduce using rule 77 (tipo -> CID .)
    ID              reduce using rule 77 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 77 (tipo -> CID .)


state 24

    (115) body -> LLAVEIZQ body2 . funr MAIN PARIZQ PARDER bloque LLAVEDER
    (120) funr -> . fun funr
    (121) funr -> . empty
    (103) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (124) empty -> .
    (43) vars3 -> . PRIVATE
    (44) vars3 -> . empty

    MAIN            reduce using rule 124 (empty -> .)
    FUN             reduce using rule 124 (empty -> .)
    PRIVATE         shift and go to state 13

    funr                           shift and go to state 31
    fun                            shift and go to state 32
    empty                          shift and go to state 33
    vars3                          shift and go to state 34

state 25

    (116) body2 -> vars . multvarsdecl
    (118) multvarsdecl -> . vars
    (119) multvarsdecl -> . empty
    (38) vars -> . vars3 tipo vars2 COLON
    (39) vars -> . vars3 tipo LIST vars2 COLON
    (124) empty -> .
    (43) vars3 -> . PRIVATE
    (44) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 124 (empty -> .)
    FUN             reduce using rule 124 (empty -> .)
    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    BOOL            reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)
    CID             reduce using rule 124 (empty -> .)
    PRIVATE         shift and go to state 13

  ! PRIVATE         [ reduce using rule 124 (empty -> .) ]

    vars                           shift and go to state 35
    multvarsdecl                   shift and go to state 36
    empty                          shift and go to state 37
    vars3                          shift and go to state 12

state 26

    (117) body2 -> empty .
    (44) vars3 -> empty .

    PRIVATE         reduce using rule 117 (body2 -> empty .)
    MAIN            reduce using rule 117 (body2 -> empty .)
    FUN             reduce using rule 117 (body2 -> empty .)
    INT             reduce using rule 44 (vars3 -> empty .)
    FLOAT           reduce using rule 44 (vars3 -> empty .)
    BOOL            reduce using rule 44 (vars3 -> empty .)
    STRING          reduce using rule 44 (vars3 -> empty .)
    CID             reduce using rule 44 (vars3 -> empty .)


state 27

    (3) class2 -> DOSPUNTOS ID PARIZQ . vars2 PARDER
    (42) vars2 -> . ID varsr

    ID              shift and go to state 30

    vars2                          shift and go to state 38

state 28

    (38) vars -> vars3 tipo vars2 . COLON

    COLON           shift and go to state 39


state 29

    (39) vars -> vars3 tipo LIST . vars2 COLON
    (42) vars2 -> . ID varsr

    ID              shift and go to state 30

    vars2                          shift and go to state 40

state 30

    (42) vars2 -> ID . varsr
    (40) varsr -> . COMA ID varsr
    (41) varsr -> . empty
    (124) empty -> .

    COMA            shift and go to state 42
    COLON           reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)

    varsr                          shift and go to state 41
    empty                          shift and go to state 43

state 31

    (115) body -> LLAVEIZQ body2 funr . MAIN PARIZQ PARDER bloque LLAVEDER

    MAIN            shift and go to state 44


state 32

    (120) funr -> fun . funr
    (120) funr -> . fun funr
    (121) funr -> . empty
    (103) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (124) empty -> .
    (43) vars3 -> . PRIVATE
    (44) vars3 -> . empty

    MAIN            reduce using rule 124 (empty -> .)
    FUN             reduce using rule 124 (empty -> .)
    PRIVATE         shift and go to state 13

    fun                            shift and go to state 32
    funr                           shift and go to state 45
    empty                          shift and go to state 33
    vars3                          shift and go to state 34

state 33

    (121) funr -> empty .
    (44) vars3 -> empty .

    MAIN            reduce using rule 121 (funr -> empty .)
    FUN             reduce using rule 44 (vars3 -> empty .)


state 34

    (103) fun -> vars3 . FUN ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 46


state 35

    (118) multvarsdecl -> vars .

    PRIVATE         reduce using rule 118 (multvarsdecl -> vars .)
    MAIN            reduce using rule 118 (multvarsdecl -> vars .)
    FUN             reduce using rule 118 (multvarsdecl -> vars .)
    ID              reduce using rule 118 (multvarsdecl -> vars .)
    IF              reduce using rule 118 (multvarsdecl -> vars .)
    WRITE           reduce using rule 118 (multvarsdecl -> vars .)
    FOR             reduce using rule 118 (multvarsdecl -> vars .)
    WHILE           reduce using rule 118 (multvarsdecl -> vars .)
    WHEN            reduce using rule 118 (multvarsdecl -> vars .)
    RETURN          reduce using rule 118 (multvarsdecl -> vars .)
    LLAVEDER        reduce using rule 118 (multvarsdecl -> vars .)


state 36

    (116) body2 -> vars multvarsdecl .

    PRIVATE         reduce using rule 116 (body2 -> vars multvarsdecl .)
    MAIN            reduce using rule 116 (body2 -> vars multvarsdecl .)
    FUN             reduce using rule 116 (body2 -> vars multvarsdecl .)


state 37

    (119) multvarsdecl -> empty .
    (44) vars3 -> empty .

    PRIVATE         reduce using rule 119 (multvarsdecl -> empty .)
    MAIN            reduce using rule 119 (multvarsdecl -> empty .)
    FUN             reduce using rule 119 (multvarsdecl -> empty .)
    ID              reduce using rule 119 (multvarsdecl -> empty .)
    IF              reduce using rule 119 (multvarsdecl -> empty .)
    WRITE           reduce using rule 119 (multvarsdecl -> empty .)
    FOR             reduce using rule 119 (multvarsdecl -> empty .)
    WHILE           reduce using rule 119 (multvarsdecl -> empty .)
    WHEN            reduce using rule 119 (multvarsdecl -> empty .)
    RETURN          reduce using rule 119 (multvarsdecl -> empty .)
    LLAVEDER        reduce using rule 119 (multvarsdecl -> empty .)
    INT             reduce using rule 44 (vars3 -> empty .)
    FLOAT           reduce using rule 44 (vars3 -> empty .)
    BOOL            reduce using rule 44 (vars3 -> empty .)
    STRING          reduce using rule 44 (vars3 -> empty .)
    CID             reduce using rule 44 (vars3 -> empty .)


state 38

    (3) class2 -> DOSPUNTOS ID PARIZQ vars2 . PARDER

    PARDER          shift and go to state 47


state 39

    (38) vars -> vars3 tipo vars2 COLON .

    PARDER          reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    PRIVATE         reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    INT             reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    FLOAT           reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    BOOL            reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    STRING          reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    CID             reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    MAIN            reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    FUN             reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    ID              reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    IF              reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    WRITE           reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    FOR             reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    WHILE           reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    WHEN            reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    RETURN          reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)
    LLAVEDER        reduce using rule 38 (vars -> vars3 tipo vars2 COLON .)


state 40

    (39) vars -> vars3 tipo LIST vars2 . COLON

    COLON           shift and go to state 48


state 41

    (42) vars2 -> ID varsr .

    COLON           reduce using rule 42 (vars2 -> ID varsr .)
    PARDER          reduce using rule 42 (vars2 -> ID varsr .)


state 42

    (40) varsr -> COMA . ID varsr

    ID              shift and go to state 49


state 43

    (41) varsr -> empty .

    COLON           reduce using rule 41 (varsr -> empty .)
    PARDER          reduce using rule 41 (varsr -> empty .)


state 44

    (115) body -> LLAVEIZQ body2 funr MAIN . PARIZQ PARDER bloque LLAVEDER

    PARIZQ          shift and go to state 50


state 45

    (120) funr -> fun funr .

    MAIN            reduce using rule 120 (funr -> fun funr .)


state 46

    (103) fun -> vars3 FUN . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 51


state 47

    (3) class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .

    LLAVEIZQ        reduce using rule 3 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)


state 48

    (39) vars -> vars3 tipo LIST vars2 COLON .

    PARDER          reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    PRIVATE         reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    INT             reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    FLOAT           reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    BOOL            reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    STRING          reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    CID             reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    MAIN            reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    FUN             reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    ID              reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    IF              reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    WRITE           reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    FOR             reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    WHILE           reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    WHEN            reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    RETURN          reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)
    LLAVEDER        reduce using rule 39 (vars -> vars3 tipo LIST vars2 COLON .)


state 49

    (40) varsr -> COMA ID . varsr
    (40) varsr -> . COMA ID varsr
    (41) varsr -> . empty
    (124) empty -> .

    COMA            shift and go to state 42
    COLON           reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)

    varsr                          shift and go to state 52
    empty                          shift and go to state 43

state 50

    (115) body -> LLAVEIZQ body2 funr MAIN PARIZQ . PARDER bloque LLAVEDER

    PARDER          shift and go to state 53


state 51

    (103) fun -> vars3 FUN ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 54


state 52

    (40) varsr -> COMA ID varsr .

    COLON           reduce using rule 40 (varsr -> COMA ID varsr .)
    PARDER          reduce using rule 40 (varsr -> COMA ID varsr .)


state 53

    (115) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER . bloque LLAVEDER
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 56

state 54

    (103) fun -> vars3 FUN ID PARIZQ . fun2 PARDER fun3 funbody
    (104) fun2 -> . tipo ID funparamr
    (105) fun2 -> . empty
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . BOOL
    (76) tipo -> . STRING
    (77) tipo -> . CID
    (124) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23
    PARDER          reduce using rule 124 (empty -> .)

    fun2                           shift and go to state 57
    tipo                           shift and go to state 58
    empty                          shift and go to state 59

state 55

    (8) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (45) estatuto -> . asignacion estatuto
    (46) estatuto -> . condicion estatuto
    (47) estatuto -> . escritura estatuto
    (48) estatuto -> . for estatuto
    (49) estatuto -> . while estatuto
    (50) estatuto -> . when estatuto
    (51) estatuto -> . llamada estatuto
    (52) estatuto -> . empty
    (53) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (62) condicion -> . IF condicion2 condicionr estatutor
    (68) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (93) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (97) while -> . WHILE PARIZQ expresion PARDER bloque
    (98) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (122) llamada -> . ID PARIZQ expresion expresionr PARDER
    (123) llamada -> . empty
    (124) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

  ! ID              [ reduce using rule 124 (empty -> .) ]
  ! IF              [ reduce using rule 124 (empty -> .) ]
  ! WRITE           [ reduce using rule 124 (empty -> .) ]
  ! FOR             [ reduce using rule 124 (empty -> .) ]
  ! WHILE           [ reduce using rule 124 (empty -> .) ]
  ! WHEN            [ reduce using rule 124 (empty -> .) ]

    estatuto                       shift and go to state 60
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 56

    (115) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque . LLAVEDER

    LLAVEDER        shift and go to state 75


state 57

    (103) fun -> vars3 FUN ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 76


state 58

    (104) fun2 -> tipo . ID funparamr

    ID              shift and go to state 77


state 59

    (105) fun2 -> empty .

    PARDER          reduce using rule 105 (fun2 -> empty .)


state 60

    (8) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (9) bloque2 -> . RETURN bloque3
    (10) bloque2 -> . empty
    (124) empty -> .

    RETURN          shift and go to state 79
    LLAVEDER        reduce using rule 124 (empty -> .)

    bloque2                        shift and go to state 78
    empty                          shift and go to state 80

state 61

    (45) estatuto -> asignacion . estatuto
    (45) estatuto -> . asignacion estatuto
    (46) estatuto -> . condicion estatuto
    (47) estatuto -> . escritura estatuto
    (48) estatuto -> . for estatuto
    (49) estatuto -> . while estatuto
    (50) estatuto -> . when estatuto
    (51) estatuto -> . llamada estatuto
    (52) estatuto -> . empty
    (53) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (62) condicion -> . IF condicion2 condicionr estatutor
    (68) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (93) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (97) while -> . WHILE PARIZQ expresion PARDER bloque
    (98) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (122) llamada -> . ID PARIZQ expresion expresionr PARDER
    (123) llamada -> . empty
    (124) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

  ! ID              [ reduce using rule 124 (empty -> .) ]
  ! IF              [ reduce using rule 124 (empty -> .) ]
  ! WRITE           [ reduce using rule 124 (empty -> .) ]
  ! FOR             [ reduce using rule 124 (empty -> .) ]
  ! WHILE           [ reduce using rule 124 (empty -> .) ]
  ! WHEN            [ reduce using rule 124 (empty -> .) ]

    asignacion                     shift and go to state 61
    estatuto                       shift and go to state 81
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 62

    (46) estatuto -> condicion . estatuto
    (45) estatuto -> . asignacion estatuto
    (46) estatuto -> . condicion estatuto
    (47) estatuto -> . escritura estatuto
    (48) estatuto -> . for estatuto
    (49) estatuto -> . while estatuto
    (50) estatuto -> . when estatuto
    (51) estatuto -> . llamada estatuto
    (52) estatuto -> . empty
    (53) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (62) condicion -> . IF condicion2 condicionr estatutor
    (68) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (93) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (97) while -> . WHILE PARIZQ expresion PARDER bloque
    (98) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (122) llamada -> . ID PARIZQ expresion expresionr PARDER
    (123) llamada -> . empty
    (124) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

  ! ID              [ reduce using rule 124 (empty -> .) ]
  ! IF              [ reduce using rule 124 (empty -> .) ]
  ! WRITE           [ reduce using rule 124 (empty -> .) ]
  ! FOR             [ reduce using rule 124 (empty -> .) ]
  ! WHILE           [ reduce using rule 124 (empty -> .) ]
  ! WHEN            [ reduce using rule 124 (empty -> .) ]

    condicion                      shift and go to state 62
    estatuto                       shift and go to state 82
    asignacion                     shift and go to state 61
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 63

    (47) estatuto -> escritura . estatuto
    (45) estatuto -> . asignacion estatuto
    (46) estatuto -> . condicion estatuto
    (47) estatuto -> . escritura estatuto
    (48) estatuto -> . for estatuto
    (49) estatuto -> . while estatuto
    (50) estatuto -> . when estatuto
    (51) estatuto -> . llamada estatuto
    (52) estatuto -> . empty
    (53) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (62) condicion -> . IF condicion2 condicionr estatutor
    (68) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (93) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (97) while -> . WHILE PARIZQ expresion PARDER bloque
    (98) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (122) llamada -> . ID PARIZQ expresion expresionr PARDER
    (123) llamada -> . empty
    (124) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

  ! ID              [ reduce using rule 124 (empty -> .) ]
  ! IF              [ reduce using rule 124 (empty -> .) ]
  ! WRITE           [ reduce using rule 124 (empty -> .) ]
  ! FOR             [ reduce using rule 124 (empty -> .) ]
  ! WHILE           [ reduce using rule 124 (empty -> .) ]
  ! WHEN            [ reduce using rule 124 (empty -> .) ]

    escritura                      shift and go to state 63
    estatuto                       shift and go to state 83
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 64

    (48) estatuto -> for . estatuto
    (45) estatuto -> . asignacion estatuto
    (46) estatuto -> . condicion estatuto
    (47) estatuto -> . escritura estatuto
    (48) estatuto -> . for estatuto
    (49) estatuto -> . while estatuto
    (50) estatuto -> . when estatuto
    (51) estatuto -> . llamada estatuto
    (52) estatuto -> . empty
    (53) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (62) condicion -> . IF condicion2 condicionr estatutor
    (68) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (93) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (97) while -> . WHILE PARIZQ expresion PARDER bloque
    (98) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (122) llamada -> . ID PARIZQ expresion expresionr PARDER
    (123) llamada -> . empty
    (124) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

  ! ID              [ reduce using rule 124 (empty -> .) ]
  ! IF              [ reduce using rule 124 (empty -> .) ]
  ! WRITE           [ reduce using rule 124 (empty -> .) ]
  ! FOR             [ reduce using rule 124 (empty -> .) ]
  ! WHILE           [ reduce using rule 124 (empty -> .) ]
  ! WHEN            [ reduce using rule 124 (empty -> .) ]

    for                            shift and go to state 64
    estatuto                       shift and go to state 84
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 65

    (49) estatuto -> while . estatuto
    (45) estatuto -> . asignacion estatuto
    (46) estatuto -> . condicion estatuto
    (47) estatuto -> . escritura estatuto
    (48) estatuto -> . for estatuto
    (49) estatuto -> . while estatuto
    (50) estatuto -> . when estatuto
    (51) estatuto -> . llamada estatuto
    (52) estatuto -> . empty
    (53) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (62) condicion -> . IF condicion2 condicionr estatutor
    (68) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (93) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (97) while -> . WHILE PARIZQ expresion PARDER bloque
    (98) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (122) llamada -> . ID PARIZQ expresion expresionr PARDER
    (123) llamada -> . empty
    (124) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

  ! ID              [ reduce using rule 124 (empty -> .) ]
  ! IF              [ reduce using rule 124 (empty -> .) ]
  ! WRITE           [ reduce using rule 124 (empty -> .) ]
  ! FOR             [ reduce using rule 124 (empty -> .) ]
  ! WHILE           [ reduce using rule 124 (empty -> .) ]
  ! WHEN            [ reduce using rule 124 (empty -> .) ]

    while                          shift and go to state 65
    estatuto                       shift and go to state 85
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 66

    (50) estatuto -> when . estatuto
    (45) estatuto -> . asignacion estatuto
    (46) estatuto -> . condicion estatuto
    (47) estatuto -> . escritura estatuto
    (48) estatuto -> . for estatuto
    (49) estatuto -> . while estatuto
    (50) estatuto -> . when estatuto
    (51) estatuto -> . llamada estatuto
    (52) estatuto -> . empty
    (53) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (62) condicion -> . IF condicion2 condicionr estatutor
    (68) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (93) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (97) while -> . WHILE PARIZQ expresion PARDER bloque
    (98) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (122) llamada -> . ID PARIZQ expresion expresionr PARDER
    (123) llamada -> . empty
    (124) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

  ! ID              [ reduce using rule 124 (empty -> .) ]
  ! IF              [ reduce using rule 124 (empty -> .) ]
  ! WRITE           [ reduce using rule 124 (empty -> .) ]
  ! FOR             [ reduce using rule 124 (empty -> .) ]
  ! WHILE           [ reduce using rule 124 (empty -> .) ]
  ! WHEN            [ reduce using rule 124 (empty -> .) ]

    when                           shift and go to state 66
    estatuto                       shift and go to state 86
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 67

    (51) estatuto -> llamada . estatuto
    (45) estatuto -> . asignacion estatuto
    (46) estatuto -> . condicion estatuto
    (47) estatuto -> . escritura estatuto
    (48) estatuto -> . for estatuto
    (49) estatuto -> . while estatuto
    (50) estatuto -> . when estatuto
    (51) estatuto -> . llamada estatuto
    (52) estatuto -> . empty
    (53) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (62) condicion -> . IF condicion2 condicionr estatutor
    (68) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (93) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (97) while -> . WHILE PARIZQ expresion PARDER bloque
    (98) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (122) llamada -> . ID PARIZQ expresion expresionr PARDER
    (123) llamada -> . empty
    (124) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

  ! ID              [ reduce using rule 124 (empty -> .) ]
  ! IF              [ reduce using rule 124 (empty -> .) ]
  ! WRITE           [ reduce using rule 124 (empty -> .) ]
  ! FOR             [ reduce using rule 124 (empty -> .) ]
  ! WHILE           [ reduce using rule 124 (empty -> .) ]
  ! WHEN            [ reduce using rule 124 (empty -> .) ]

    llamada                        shift and go to state 67
    estatuto                       shift and go to state 87
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    empty                          shift and go to state 68

state 68

    (52) estatuto -> empty .
    (123) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 52 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 52 (estatuto -> empty .)
    RETURN          reduce using rule 52 (estatuto -> empty .)
    LLAVEDER        reduce using rule 52 (estatuto -> empty .)
    ID              reduce using rule 123 (llamada -> empty .)
    IF              reduce using rule 123 (llamada -> empty .)
    WRITE           reduce using rule 123 (llamada -> empty .)
    FOR             reduce using rule 123 (llamada -> empty .)
    WHILE           reduce using rule 123 (llamada -> empty .)
    WHEN            reduce using rule 123 (llamada -> empty .)

  ! RETURN          [ reduce using rule 123 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 123 (llamada -> empty .) ]


state 69

    (53) asignacion -> ID . asignacion3 IGUAL asignacion2 COLON
    (122) llamada -> ID . PARIZQ expresion expresionr PARDER
    (59) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (60) asignacion3 -> . PUNTO ID
    (61) asignacion3 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 89
    CORCHIZQ        shift and go to state 90
    PUNTO           shift and go to state 91
    IGUAL           reduce using rule 124 (empty -> .)

    asignacion3                    shift and go to state 88
    empty                          shift and go to state 92

state 70

    (62) condicion -> IF . condicion2 condicionr estatutor
    (63) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 94

    condicion2                     shift and go to state 93

state 71

    (68) escritura -> WRITE . PARIZQ esc1 esc2 PARDER

    PARIZQ          shift and go to state 95


state 72

    (93) for -> FOR . PARIZQ ID IN for2 PARDER bloque

    PARIZQ          shift and go to state 96


state 73

    (97) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 97


state 74

    (98) when -> WHEN . PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER

    PARIZQ          shift and go to state 98


state 75

    (115) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER .

    $end            reduce using rule 115 (body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER .)


state 76

    (103) fun -> vars3 FUN ID PARIZQ fun2 PARDER . fun3 funbody
    (108) fun3 -> . DOSPUNTOS tipo
    (109) fun3 -> . empty
    (124) empty -> .

    DOSPUNTOS       shift and go to state 100
    LLAVEIZQ        reduce using rule 124 (empty -> .)

    fun3                           shift and go to state 99
    empty                          shift and go to state 101

state 77

    (104) fun2 -> tipo ID . funparamr
    (106) funparamr -> . COMA tipo ID funparamr
    (107) funparamr -> . empty
    (124) empty -> .

    COMA            shift and go to state 103
    PARDER          reduce using rule 124 (empty -> .)

    funparamr                      shift and go to state 102
    empty                          shift and go to state 104

state 78

    (8) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 105


state 79

    (9) bloque2 -> RETURN . bloque3
    (11) bloque3 -> . expresion
    (12) bloque3 -> . empty
    (21) expresion -> . megaexp
    (124) empty -> .
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty

    LLAVEDER        reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117

    bloque3                        shift and go to state 106
    expresion                      shift and go to state 107
    empty                          shift and go to state 108
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115

state 80

    (10) bloque2 -> empty .

    LLAVEDER        reduce using rule 10 (bloque2 -> empty .)


state 81

    (45) estatuto -> asignacion estatuto .

    RETURN          reduce using rule 45 (estatuto -> asignacion estatuto .)
    LLAVEDER        reduce using rule 45 (estatuto -> asignacion estatuto .)


state 82

    (46) estatuto -> condicion estatuto .

    RETURN          reduce using rule 46 (estatuto -> condicion estatuto .)
    LLAVEDER        reduce using rule 46 (estatuto -> condicion estatuto .)


state 83

    (47) estatuto -> escritura estatuto .

    RETURN          reduce using rule 47 (estatuto -> escritura estatuto .)
    LLAVEDER        reduce using rule 47 (estatuto -> escritura estatuto .)


state 84

    (48) estatuto -> for estatuto .

    RETURN          reduce using rule 48 (estatuto -> for estatuto .)
    LLAVEDER        reduce using rule 48 (estatuto -> for estatuto .)


state 85

    (49) estatuto -> while estatuto .

    RETURN          reduce using rule 49 (estatuto -> while estatuto .)
    LLAVEDER        reduce using rule 49 (estatuto -> while estatuto .)


state 86

    (50) estatuto -> when estatuto .

    RETURN          reduce using rule 50 (estatuto -> when estatuto .)
    LLAVEDER        reduce using rule 50 (estatuto -> when estatuto .)


state 87

    (51) estatuto -> llamada estatuto .

    RETURN          reduce using rule 51 (estatuto -> llamada estatuto .)
    LLAVEDER        reduce using rule 51 (estatuto -> llamada estatuto .)


state 88

    (53) asignacion -> ID asignacion3 . IGUAL asignacion2 COLON

    IGUAL           shift and go to state 118


state 89

    (122) llamada -> ID PARIZQ . expresion expresionr PARDER
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    expresion                      shift and go to state 119
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 90

    (59) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    expresion                      shift and go to state 121
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 91

    (60) asignacion3 -> PUNTO . ID

    ID              shift and go to state 122


state 92

    (61) asignacion3 -> empty .

    IGUAL           reduce using rule 61 (asignacion3 -> empty .)


state 93

    (62) condicion -> IF condicion2 . condicionr estatutor
    (64) condicionr -> . ELSE IF condicion2
    (65) condicionr -> . empty
    (124) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 124
    ID              reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    FOR             reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    WHEN            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

  ! ELSE            [ reduce using rule 124 (empty -> .) ]

    condicionr                     shift and go to state 123
    empty                          shift and go to state 125

state 94

    (63) condicion2 -> PARIZQ . expresion PARDER bloque
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    expresion                      shift and go to state 126
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 95

    (68) escritura -> WRITE PARIZQ . esc1 esc2 PARDER
    (69) esc1 -> . expresion
    (70) esc1 -> . STRING
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 129
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)

  ! STRING          [ reduce using rule 124 (empty -> .) ]

    esc1                           shift and go to state 127
    expresion                      shift and go to state 128
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 96

    (93) for -> FOR PARIZQ . ID IN for2 PARDER bloque

    ID              shift and go to state 130


state 97

    (97) while -> WHILE PARIZQ . expresion PARDER bloque
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    expresion                      shift and go to state 131
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 98

    (98) when -> WHEN PARIZQ . expresion PARDER LLAVEIZQ when2 LLAVEDER
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    expresion                      shift and go to state 132
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 99

    (103) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 . funbody
    (110) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 134

    funbody                        shift and go to state 133

state 100

    (108) fun3 -> DOSPUNTOS . tipo
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . BOOL
    (76) tipo -> . STRING
    (77) tipo -> . CID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23

    tipo                           shift and go to state 135

state 101

    (109) fun3 -> empty .

    LLAVEIZQ        reduce using rule 109 (fun3 -> empty .)


state 102

    (104) fun2 -> tipo ID funparamr .

    PARDER          reduce using rule 104 (fun2 -> tipo ID funparamr .)


state 103

    (106) funparamr -> COMA . tipo ID funparamr
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . BOOL
    (76) tipo -> . STRING
    (77) tipo -> . CID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23

    tipo                           shift and go to state 136

state 104

    (107) funparamr -> empty .

    PARDER          reduce using rule 107 (funparamr -> empty .)


state 105

    (8) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    LLAVEDER        reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ID              reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IN              reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    BOOLVAL         reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRING          reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 106

    (9) bloque2 -> RETURN bloque3 .

    LLAVEDER        reduce using rule 9 (bloque2 -> RETURN bloque3 .)


state 107

    (11) bloque3 -> expresion .

    LLAVEDER        reduce using rule 11 (bloque3 -> expresion .)


state 108

    (12) bloque3 -> empty .
    (92) factor2 -> empty .

    LLAVEDER        reduce using rule 12 (bloque3 -> empty .)
    ID              reduce using rule 92 (factor2 -> empty .)
    INTNUM          reduce using rule 92 (factor2 -> empty .)
    FLOATNUM        reduce using rule 92 (factor2 -> empty .)
    BOOLVAL         reduce using rule 92 (factor2 -> empty .)
    STRING          reduce using rule 92 (factor2 -> empty .)


state 109

    (21) expresion -> megaexp .

    LLAVEDER        reduce using rule 21 (expresion -> megaexp .)
    COMA            reduce using rule 21 (expresion -> megaexp .)
    PARDER          reduce using rule 21 (expresion -> megaexp .)
    CORCHDER        reduce using rule 21 (expresion -> megaexp .)
    COLON           reduce using rule 21 (expresion -> megaexp .)
    CORCHIZQ        reduce using rule 21 (expresion -> megaexp .)


state 110

    (34) megaexp -> superexp . megaexpr
    (35) megaexpr -> . AND superexp megaexpr
    (36) megaexpr -> . OR superexp megaexpr
    (37) megaexpr -> . empty
    (124) empty -> .

    AND             shift and go to state 138
    OR              shift and go to state 139
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    megaexpr                       shift and go to state 137
    empty                          shift and go to state 140

state 111

    (33) superexp -> exp . oplog
    (26) oplog -> . MAYORQUE exp
    (27) oplog -> . MENORQUE exp
    (28) oplog -> . DIFERENTE exp
    (29) oplog -> . MAYOROIGUAL exp
    (30) oplog -> . MENOROIGUAL exp
    (31) oplog -> . IGUALIGUAL exp
    (32) oplog -> . empty
    (124) empty -> .

    MAYORQUE        shift and go to state 142
    MENORQUE        shift and go to state 143
    DIFERENTE       shift and go to state 144
    MAYOROIGUAL     shift and go to state 145
    MENOROIGUAL     shift and go to state 146
    IGUALIGUAL      shift and go to state 147
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    oplog                          shift and go to state 141
    empty                          shift and go to state 148

state 112

    (84) exp -> termino . expr
    (85) expr -> . MAS termino expr
    (86) expr -> . MENOS termino expr
    (87) expr -> . empty
    (124) empty -> .

    MAS             shift and go to state 150
    MENOS           shift and go to state 151
    MAYORQUE        reduce using rule 124 (empty -> .)
    MENORQUE        reduce using rule 124 (empty -> .)
    DIFERENTE       reduce using rule 124 (empty -> .)
    MAYOROIGUAL     reduce using rule 124 (empty -> .)
    MENOROIGUAL     reduce using rule 124 (empty -> .)
    IGUALIGUAL      reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    expr                           shift and go to state 149
    empty                          shift and go to state 152

state 113

    (83) termino -> factor . terminor
    (80) terminor -> . POR factor terminor
    (81) terminor -> . SOBRE factor terminor
    (82) terminor -> . empty
    (124) empty -> .

    POR             shift and go to state 154
    SOBRE           shift and go to state 155
    MAS             reduce using rule 124 (empty -> .)
    MENOS           reduce using rule 124 (empty -> .)
    MAYORQUE        reduce using rule 124 (empty -> .)
    MENORQUE        reduce using rule 124 (empty -> .)
    DIFERENTE       reduce using rule 124 (empty -> .)
    MAYOROIGUAL     reduce using rule 124 (empty -> .)
    MENOROIGUAL     reduce using rule 124 (empty -> .)
    IGUALIGUAL      reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    terminor                       shift and go to state 153
    empty                          shift and go to state 156

state 114

    (78) factor -> PARIZQ . expresion PARDER
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    expresion                      shift and go to state 157
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 115

    (79) factor -> factor2 . varcte varcter
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 159
    INTNUM          shift and go to state 160
    FLOATNUM        shift and go to state 161
    BOOLVAL         shift and go to state 162
    STRING          shift and go to state 163

    varcte                         shift and go to state 158

state 116

    (90) factor2 -> MAS .

    ID              reduce using rule 90 (factor2 -> MAS .)
    INTNUM          reduce using rule 90 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 90 (factor2 -> MAS .)
    BOOLVAL         reduce using rule 90 (factor2 -> MAS .)
    STRING          reduce using rule 90 (factor2 -> MAS .)


state 117

    (91) factor2 -> MENOS .

    ID              reduce using rule 91 (factor2 -> MENOS .)
    INTNUM          reduce using rule 91 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 91 (factor2 -> MENOS .)
    BOOLVAL         reduce using rule 91 (factor2 -> MENOS .)
    STRING          reduce using rule 91 (factor2 -> MENOS .)


state 118

    (53) asignacion -> ID asignacion3 IGUAL . asignacion2 COLON
    (54) asignacion2 -> . expresion
    (55) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (56) asignacion2 -> . READ PARIZQ STRING PARDER
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    CORCHDER        shift and go to state 166
    READ            shift and go to state 167
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    asignacion2                    shift and go to state 164
    expresion                      shift and go to state 165
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 119

    (122) llamada -> ID PARIZQ expresion . expresionr PARDER
    (22) expresionr -> . COMA expresion expresionr
    (23) expresionr -> . empty
    (124) empty -> .

    COMA            shift and go to state 169
    PARDER          reduce using rule 124 (empty -> .)

    expresionr                     shift and go to state 168
    empty                          shift and go to state 170

state 120

    (92) factor2 -> empty .

    ID              reduce using rule 92 (factor2 -> empty .)
    INTNUM          reduce using rule 92 (factor2 -> empty .)
    FLOATNUM        reduce using rule 92 (factor2 -> empty .)
    BOOLVAL         reduce using rule 92 (factor2 -> empty .)
    STRING          reduce using rule 92 (factor2 -> empty .)


state 121

    (59) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 171


state 122

    (60) asignacion3 -> PUNTO ID .

    IGUAL           reduce using rule 60 (asignacion3 -> PUNTO ID .)


state 123

    (62) condicion -> IF condicion2 condicionr . estatutor
    (66) estatutor -> . ELSE bloque
    (67) estatutor -> . empty
    (124) empty -> .

    ELSE            shift and go to state 173
    ID              reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    FOR             reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    WHEN            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)

    estatutor                      shift and go to state 172
    empty                          shift and go to state 174

state 124

    (64) condicionr -> ELSE . IF condicion2

    IF              shift and go to state 175


state 125

    (65) condicionr -> empty .

    ELSE            reduce using rule 65 (condicionr -> empty .)
    ID              reduce using rule 65 (condicionr -> empty .)
    IF              reduce using rule 65 (condicionr -> empty .)
    WRITE           reduce using rule 65 (condicionr -> empty .)
    FOR             reduce using rule 65 (condicionr -> empty .)
    WHILE           reduce using rule 65 (condicionr -> empty .)
    WHEN            reduce using rule 65 (condicionr -> empty .)
    RETURN          reduce using rule 65 (condicionr -> empty .)
    LLAVEDER        reduce using rule 65 (condicionr -> empty .)


state 126

    (63) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 176


state 127

    (68) escritura -> WRITE PARIZQ esc1 . esc2 PARDER
    (71) esc2 -> . COMA esc1 esc2
    (72) esc2 -> . empty
    (124) empty -> .

    COMA            shift and go to state 178
    PARDER          reduce using rule 124 (empty -> .)

    esc2                           shift and go to state 177
    empty                          shift and go to state 179

state 128

    (69) esc1 -> expresion .

    COMA            reduce using rule 69 (esc1 -> expresion .)
    PARDER          reduce using rule 69 (esc1 -> expresion .)


state 129

    (70) esc1 -> STRING .

    COMA            reduce using rule 70 (esc1 -> STRING .)
    PARDER          reduce using rule 70 (esc1 -> STRING .)


state 130

    (93) for -> FOR PARIZQ ID . IN for2 PARDER bloque

    IN              shift and go to state 180


state 131

    (97) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 181


state 132

    (98) when -> WHEN PARIZQ expresion . PARDER LLAVEIZQ when2 LLAVEDER

    PARDER          shift and go to state 182


state 133

    (103) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .

    PRIVATE         reduce using rule 103 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    FUN             reduce using rule 103 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    MAIN            reduce using rule 103 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)


state 134

    (110) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (111) opc1 -> . vars multvarsdecl
    (112) opc1 -> . empty
    (38) vars -> . vars3 tipo vars2 COLON
    (39) vars -> . vars3 tipo LIST vars2 COLON
    (124) empty -> .
    (43) vars3 -> . PRIVATE
    (44) vars3 -> . empty

    ID              reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    FOR             reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    WHEN            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    BOOL            reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)
    CID             reduce using rule 124 (empty -> .)
    PRIVATE         shift and go to state 13

    opc1                           shift and go to state 183
    vars                           shift and go to state 184
    empty                          shift and go to state 185
    vars3                          shift and go to state 12

state 135

    (108) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 108 (fun3 -> DOSPUNTOS tipo .)


state 136

    (106) funparamr -> COMA tipo . ID funparamr

    ID              shift and go to state 186


state 137

    (34) megaexp -> superexp megaexpr .

    LLAVEDER        reduce using rule 34 (megaexp -> superexp megaexpr .)
    COMA            reduce using rule 34 (megaexp -> superexp megaexpr .)
    PARDER          reduce using rule 34 (megaexp -> superexp megaexpr .)
    CORCHDER        reduce using rule 34 (megaexp -> superexp megaexpr .)
    COLON           reduce using rule 34 (megaexp -> superexp megaexpr .)
    CORCHIZQ        reduce using rule 34 (megaexp -> superexp megaexpr .)


state 138

    (35) megaexpr -> AND . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    superexp                       shift and go to state 187
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 139

    (36) megaexpr -> OR . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    superexp                       shift and go to state 188
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 140

    (37) megaexpr -> empty .

    LLAVEDER        reduce using rule 37 (megaexpr -> empty .)
    COMA            reduce using rule 37 (megaexpr -> empty .)
    PARDER          reduce using rule 37 (megaexpr -> empty .)
    CORCHDER        reduce using rule 37 (megaexpr -> empty .)
    COLON           reduce using rule 37 (megaexpr -> empty .)
    CORCHIZQ        reduce using rule 37 (megaexpr -> empty .)


state 141

    (33) superexp -> exp oplog .

    AND             reduce using rule 33 (superexp -> exp oplog .)
    OR              reduce using rule 33 (superexp -> exp oplog .)
    LLAVEDER        reduce using rule 33 (superexp -> exp oplog .)
    COMA            reduce using rule 33 (superexp -> exp oplog .)
    PARDER          reduce using rule 33 (superexp -> exp oplog .)
    CORCHDER        reduce using rule 33 (superexp -> exp oplog .)
    COLON           reduce using rule 33 (superexp -> exp oplog .)
    CORCHIZQ        reduce using rule 33 (superexp -> exp oplog .)


state 142

    (26) oplog -> MAYORQUE . exp
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    exp                            shift and go to state 189
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 143

    (27) oplog -> MENORQUE . exp
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    exp                            shift and go to state 190
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 144

    (28) oplog -> DIFERENTE . exp
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    exp                            shift and go to state 191
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 145

    (29) oplog -> MAYOROIGUAL . exp
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    exp                            shift and go to state 192
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 146

    (30) oplog -> MENOROIGUAL . exp
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    exp                            shift and go to state 193
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 147

    (31) oplog -> IGUALIGUAL . exp
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    exp                            shift and go to state 194
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 148

    (32) oplog -> empty .

    AND             reduce using rule 32 (oplog -> empty .)
    OR              reduce using rule 32 (oplog -> empty .)
    LLAVEDER        reduce using rule 32 (oplog -> empty .)
    COMA            reduce using rule 32 (oplog -> empty .)
    PARDER          reduce using rule 32 (oplog -> empty .)
    CORCHDER        reduce using rule 32 (oplog -> empty .)
    COLON           reduce using rule 32 (oplog -> empty .)
    CORCHIZQ        reduce using rule 32 (oplog -> empty .)


state 149

    (84) exp -> termino expr .

    MAYORQUE        reduce using rule 84 (exp -> termino expr .)
    MENORQUE        reduce using rule 84 (exp -> termino expr .)
    DIFERENTE       reduce using rule 84 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 84 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 84 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 84 (exp -> termino expr .)
    AND             reduce using rule 84 (exp -> termino expr .)
    OR              reduce using rule 84 (exp -> termino expr .)
    LLAVEDER        reduce using rule 84 (exp -> termino expr .)
    COMA            reduce using rule 84 (exp -> termino expr .)
    PARDER          reduce using rule 84 (exp -> termino expr .)
    CORCHDER        reduce using rule 84 (exp -> termino expr .)
    COLON           reduce using rule 84 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 84 (exp -> termino expr .)


state 150

    (85) expr -> MAS . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    termino                        shift and go to state 195
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 151

    (86) expr -> MENOS . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    termino                        shift and go to state 196
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 152

    (87) expr -> empty .

    MAYORQUE        reduce using rule 87 (expr -> empty .)
    MENORQUE        reduce using rule 87 (expr -> empty .)
    DIFERENTE       reduce using rule 87 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 87 (expr -> empty .)
    MENOROIGUAL     reduce using rule 87 (expr -> empty .)
    IGUALIGUAL      reduce using rule 87 (expr -> empty .)
    AND             reduce using rule 87 (expr -> empty .)
    OR              reduce using rule 87 (expr -> empty .)
    LLAVEDER        reduce using rule 87 (expr -> empty .)
    COMA            reduce using rule 87 (expr -> empty .)
    PARDER          reduce using rule 87 (expr -> empty .)
    CORCHDER        reduce using rule 87 (expr -> empty .)
    COLON           reduce using rule 87 (expr -> empty .)
    CORCHIZQ        reduce using rule 87 (expr -> empty .)


state 153

    (83) termino -> factor terminor .

    MAS             reduce using rule 83 (termino -> factor terminor .)
    MENOS           reduce using rule 83 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 83 (termino -> factor terminor .)
    MENORQUE        reduce using rule 83 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 83 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 83 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 83 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 83 (termino -> factor terminor .)
    AND             reduce using rule 83 (termino -> factor terminor .)
    OR              reduce using rule 83 (termino -> factor terminor .)
    LLAVEDER        reduce using rule 83 (termino -> factor terminor .)
    COMA            reduce using rule 83 (termino -> factor terminor .)
    PARDER          reduce using rule 83 (termino -> factor terminor .)
    CORCHDER        reduce using rule 83 (termino -> factor terminor .)
    COLON           reduce using rule 83 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 83 (termino -> factor terminor .)


state 154

    (80) terminor -> POR . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    factor                         shift and go to state 197
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 155

    (81) terminor -> SOBRE . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    factor                         shift and go to state 198
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 156

    (82) terminor -> empty .

    MAS             reduce using rule 82 (terminor -> empty .)
    MENOS           reduce using rule 82 (terminor -> empty .)
    MAYORQUE        reduce using rule 82 (terminor -> empty .)
    MENORQUE        reduce using rule 82 (terminor -> empty .)
    DIFERENTE       reduce using rule 82 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 82 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 82 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 82 (terminor -> empty .)
    AND             reduce using rule 82 (terminor -> empty .)
    OR              reduce using rule 82 (terminor -> empty .)
    LLAVEDER        reduce using rule 82 (terminor -> empty .)
    COMA            reduce using rule 82 (terminor -> empty .)
    PARDER          reduce using rule 82 (terminor -> empty .)
    CORCHDER        reduce using rule 82 (terminor -> empty .)
    COLON           reduce using rule 82 (terminor -> empty .)
    CORCHIZQ        reduce using rule 82 (terminor -> empty .)


state 157

    (78) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 199


state 158

    (79) factor -> factor2 varcte . varcter
    (88) varcter -> . COMA varcte varcter
    (89) varcter -> . empty
    (124) empty -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 201
    POR             reduce using rule 124 (empty -> .)
    SOBRE           reduce using rule 124 (empty -> .)
    MAS             reduce using rule 124 (empty -> .)
    MENOS           reduce using rule 124 (empty -> .)
    MAYORQUE        reduce using rule 124 (empty -> .)
    MENORQUE        reduce using rule 124 (empty -> .)
    DIFERENTE       reduce using rule 124 (empty -> .)
    MAYOROIGUAL     reduce using rule 124 (empty -> .)
    MENOROIGUAL     reduce using rule 124 (empty -> .)
    IGUALIGUAL      reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

  ! COMA            [ reduce using rule 124 (empty -> .) ]

    varcter                        shift and go to state 200
    empty                          shift and go to state 202

state 159

    (13) varcte -> ID .
    (18) varcte -> ID . CORCHIZQ varcte CORCHDER
    (19) varcte -> ID . PUNTO ID
    (20) varcte -> ID . PARIZQ expresion2 PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    COMA            reduce using rule 13 (varcte -> ID .)
    POR             reduce using rule 13 (varcte -> ID .)
    SOBRE           reduce using rule 13 (varcte -> ID .)
    MAS             reduce using rule 13 (varcte -> ID .)
    MENOS           reduce using rule 13 (varcte -> ID .)
    MAYORQUE        reduce using rule 13 (varcte -> ID .)
    MENORQUE        reduce using rule 13 (varcte -> ID .)
    DIFERENTE       reduce using rule 13 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 13 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 13 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 13 (varcte -> ID .)
    AND             reduce using rule 13 (varcte -> ID .)
    OR              reduce using rule 13 (varcte -> ID .)
    LLAVEDER        reduce using rule 13 (varcte -> ID .)
    PARDER          reduce using rule 13 (varcte -> ID .)
    CORCHDER        reduce using rule 13 (varcte -> ID .)
    COLON           reduce using rule 13 (varcte -> ID .)
    FLECHITA        reduce using rule 13 (varcte -> ID .)
    CORCHIZQ        shift and go to state 203
    PUNTO           shift and go to state 204
    PARIZQ          shift and go to state 205

  ! CORCHIZQ        [ reduce using rule 13 (varcte -> ID .) ]


state 160

    (14) varcte -> INTNUM .

    COMA            reduce using rule 14 (varcte -> INTNUM .)
    POR             reduce using rule 14 (varcte -> INTNUM .)
    SOBRE           reduce using rule 14 (varcte -> INTNUM .)
    MAS             reduce using rule 14 (varcte -> INTNUM .)
    MENOS           reduce using rule 14 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 14 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 14 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 14 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 14 (varcte -> INTNUM .)
    AND             reduce using rule 14 (varcte -> INTNUM .)
    OR              reduce using rule 14 (varcte -> INTNUM .)
    LLAVEDER        reduce using rule 14 (varcte -> INTNUM .)
    PARDER          reduce using rule 14 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 14 (varcte -> INTNUM .)
    COLON           reduce using rule 14 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 14 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 14 (varcte -> INTNUM .)


state 161

    (15) varcte -> FLOATNUM .

    COMA            reduce using rule 15 (varcte -> FLOATNUM .)
    POR             reduce using rule 15 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 15 (varcte -> FLOATNUM .)
    MAS             reduce using rule 15 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 15 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 15 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 15 (varcte -> FLOATNUM .)
    AND             reduce using rule 15 (varcte -> FLOATNUM .)
    OR              reduce using rule 15 (varcte -> FLOATNUM .)
    LLAVEDER        reduce using rule 15 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 15 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 15 (varcte -> FLOATNUM .)
    COLON           reduce using rule 15 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 15 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 15 (varcte -> FLOATNUM .)


state 162

    (16) varcte -> BOOLVAL .

    COMA            reduce using rule 16 (varcte -> BOOLVAL .)
    POR             reduce using rule 16 (varcte -> BOOLVAL .)
    SOBRE           reduce using rule 16 (varcte -> BOOLVAL .)
    MAS             reduce using rule 16 (varcte -> BOOLVAL .)
    MENOS           reduce using rule 16 (varcte -> BOOLVAL .)
    MAYORQUE        reduce using rule 16 (varcte -> BOOLVAL .)
    MENORQUE        reduce using rule 16 (varcte -> BOOLVAL .)
    DIFERENTE       reduce using rule 16 (varcte -> BOOLVAL .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> BOOLVAL .)
    MENOROIGUAL     reduce using rule 16 (varcte -> BOOLVAL .)
    IGUALIGUAL      reduce using rule 16 (varcte -> BOOLVAL .)
    AND             reduce using rule 16 (varcte -> BOOLVAL .)
    OR              reduce using rule 16 (varcte -> BOOLVAL .)
    LLAVEDER        reduce using rule 16 (varcte -> BOOLVAL .)
    PARDER          reduce using rule 16 (varcte -> BOOLVAL .)
    CORCHDER        reduce using rule 16 (varcte -> BOOLVAL .)
    COLON           reduce using rule 16 (varcte -> BOOLVAL .)
    CORCHIZQ        reduce using rule 16 (varcte -> BOOLVAL .)
    FLECHITA        reduce using rule 16 (varcte -> BOOLVAL .)


state 163

    (17) varcte -> STRING .

    COMA            reduce using rule 17 (varcte -> STRING .)
    POR             reduce using rule 17 (varcte -> STRING .)
    SOBRE           reduce using rule 17 (varcte -> STRING .)
    MAS             reduce using rule 17 (varcte -> STRING .)
    MENOS           reduce using rule 17 (varcte -> STRING .)
    MAYORQUE        reduce using rule 17 (varcte -> STRING .)
    MENORQUE        reduce using rule 17 (varcte -> STRING .)
    DIFERENTE       reduce using rule 17 (varcte -> STRING .)
    MAYOROIGUAL     reduce using rule 17 (varcte -> STRING .)
    MENOROIGUAL     reduce using rule 17 (varcte -> STRING .)
    IGUALIGUAL      reduce using rule 17 (varcte -> STRING .)
    AND             reduce using rule 17 (varcte -> STRING .)
    OR              reduce using rule 17 (varcte -> STRING .)
    LLAVEDER        reduce using rule 17 (varcte -> STRING .)
    PARDER          reduce using rule 17 (varcte -> STRING .)
    CORCHDER        reduce using rule 17 (varcte -> STRING .)
    COLON           reduce using rule 17 (varcte -> STRING .)
    CORCHIZQ        reduce using rule 17 (varcte -> STRING .)
    FLECHITA        reduce using rule 17 (varcte -> STRING .)


state 164

    (53) asignacion -> ID asignacion3 IGUAL asignacion2 . COLON

    COLON           shift and go to state 206


state 165

    (54) asignacion2 -> expresion .

    COLON           reduce using rule 54 (asignacion2 -> expresion .)


state 166

    (55) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    expresion                      shift and go to state 207
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 167

    (56) asignacion2 -> READ . PARIZQ STRING PARDER

    PARIZQ          shift and go to state 208


state 168

    (122) llamada -> ID PARIZQ expresion expresionr . PARDER

    PARDER          shift and go to state 209


state 169

    (22) expresionr -> COMA . expresion expresionr
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    expresion                      shift and go to state 210
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 170

    (23) expresionr -> empty .

    PARDER          reduce using rule 23 (expresionr -> empty .)


state 171

    (59) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 59 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 172

    (62) condicion -> IF condicion2 condicionr estatutor .

    ID              reduce using rule 62 (condicion -> IF condicion2 condicionr estatutor .)
    IF              reduce using rule 62 (condicion -> IF condicion2 condicionr estatutor .)
    WRITE           reduce using rule 62 (condicion -> IF condicion2 condicionr estatutor .)
    FOR             reduce using rule 62 (condicion -> IF condicion2 condicionr estatutor .)
    WHILE           reduce using rule 62 (condicion -> IF condicion2 condicionr estatutor .)
    WHEN            reduce using rule 62 (condicion -> IF condicion2 condicionr estatutor .)
    RETURN          reduce using rule 62 (condicion -> IF condicion2 condicionr estatutor .)
    LLAVEDER        reduce using rule 62 (condicion -> IF condicion2 condicionr estatutor .)


state 173

    (66) estatutor -> ELSE . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 211

state 174

    (67) estatutor -> empty .

    ID              reduce using rule 67 (estatutor -> empty .)
    IF              reduce using rule 67 (estatutor -> empty .)
    WRITE           reduce using rule 67 (estatutor -> empty .)
    FOR             reduce using rule 67 (estatutor -> empty .)
    WHILE           reduce using rule 67 (estatutor -> empty .)
    WHEN            reduce using rule 67 (estatutor -> empty .)
    RETURN          reduce using rule 67 (estatutor -> empty .)
    LLAVEDER        reduce using rule 67 (estatutor -> empty .)


state 175

    (64) condicionr -> ELSE IF . condicion2
    (63) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 94

    condicion2                     shift and go to state 212

state 176

    (63) condicion2 -> PARIZQ expresion PARDER . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 213

state 177

    (68) escritura -> WRITE PARIZQ esc1 esc2 . PARDER

    PARDER          shift and go to state 214


state 178

    (71) esc2 -> COMA . esc1 esc2
    (69) esc1 -> . expresion
    (70) esc1 -> . STRING
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 129
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)

  ! STRING          [ reduce using rule 124 (empty -> .) ]

    esc1                           shift and go to state 215
    expresion                      shift and go to state 128
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 179

    (72) esc2 -> empty .

    PARDER          reduce using rule 72 (esc2 -> empty .)


state 180

    (93) for -> FOR PARIZQ ID IN . for2 PARDER bloque
    (94) for2 -> . ID
    (95) for2 -> . range
    (96) range -> . INTNUM PUNTOSRANGO INTNUM

    ID              shift and go to state 216
    INTNUM          shift and go to state 219

    for2                           shift and go to state 217
    range                          shift and go to state 218

state 181

    (97) while -> WHILE PARIZQ expresion PARDER . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 220

state 182

    (98) when -> WHEN PARIZQ expresion PARDER . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 221


state 183

    (110) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (113) opc2 -> . estatuto
    (114) opc2 -> . empty
    (45) estatuto -> . asignacion estatuto
    (46) estatuto -> . condicion estatuto
    (47) estatuto -> . escritura estatuto
    (48) estatuto -> . for estatuto
    (49) estatuto -> . while estatuto
    (50) estatuto -> . when estatuto
    (51) estatuto -> . llamada estatuto
    (52) estatuto -> . empty
    (124) empty -> .
    (53) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (62) condicion -> . IF condicion2 condicionr estatutor
    (68) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (93) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (97) while -> . WHILE PARIZQ expresion PARDER bloque
    (98) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (122) llamada -> . ID PARIZQ expresion expresionr PARDER
    (123) llamada -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74

  ! ID              [ reduce using rule 124 (empty -> .) ]
  ! IF              [ reduce using rule 124 (empty -> .) ]
  ! WRITE           [ reduce using rule 124 (empty -> .) ]
  ! FOR             [ reduce using rule 124 (empty -> .) ]
  ! WHILE           [ reduce using rule 124 (empty -> .) ]
  ! WHEN            [ reduce using rule 124 (empty -> .) ]

    opc2                           shift and go to state 222
    estatuto                       shift and go to state 223
    empty                          shift and go to state 224
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67

state 184

    (111) opc1 -> vars . multvarsdecl
    (118) multvarsdecl -> . vars
    (119) multvarsdecl -> . empty
    (38) vars -> . vars3 tipo vars2 COLON
    (39) vars -> . vars3 tipo LIST vars2 COLON
    (124) empty -> .
    (43) vars3 -> . PRIVATE
    (44) vars3 -> . empty

    ID              reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    FOR             reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    WHEN            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    INT             reduce using rule 124 (empty -> .)
    FLOAT           reduce using rule 124 (empty -> .)
    BOOL            reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)
    CID             reduce using rule 124 (empty -> .)
    PRIVATE         shift and go to state 13

    vars                           shift and go to state 35
    multvarsdecl                   shift and go to state 225
    empty                          shift and go to state 37
    vars3                          shift and go to state 12

state 185

    (112) opc1 -> empty .
    (44) vars3 -> empty .

    ID              reduce using rule 112 (opc1 -> empty .)
    IF              reduce using rule 112 (opc1 -> empty .)
    WRITE           reduce using rule 112 (opc1 -> empty .)
    FOR             reduce using rule 112 (opc1 -> empty .)
    WHILE           reduce using rule 112 (opc1 -> empty .)
    WHEN            reduce using rule 112 (opc1 -> empty .)
    RETURN          reduce using rule 112 (opc1 -> empty .)
    LLAVEDER        reduce using rule 112 (opc1 -> empty .)
    INT             reduce using rule 44 (vars3 -> empty .)
    FLOAT           reduce using rule 44 (vars3 -> empty .)
    BOOL            reduce using rule 44 (vars3 -> empty .)
    STRING          reduce using rule 44 (vars3 -> empty .)
    CID             reduce using rule 44 (vars3 -> empty .)


state 186

    (106) funparamr -> COMA tipo ID . funparamr
    (106) funparamr -> . COMA tipo ID funparamr
    (107) funparamr -> . empty
    (124) empty -> .

    COMA            shift and go to state 103
    PARDER          reduce using rule 124 (empty -> .)

    funparamr                      shift and go to state 226
    empty                          shift and go to state 104

state 187

    (35) megaexpr -> AND superexp . megaexpr
    (35) megaexpr -> . AND superexp megaexpr
    (36) megaexpr -> . OR superexp megaexpr
    (37) megaexpr -> . empty
    (124) empty -> .

    AND             shift and go to state 138
    OR              shift and go to state 139
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    megaexpr                       shift and go to state 227
    empty                          shift and go to state 140

state 188

    (36) megaexpr -> OR superexp . megaexpr
    (35) megaexpr -> . AND superexp megaexpr
    (36) megaexpr -> . OR superexp megaexpr
    (37) megaexpr -> . empty
    (124) empty -> .

    AND             shift and go to state 138
    OR              shift and go to state 139
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    megaexpr                       shift and go to state 228
    empty                          shift and go to state 140

state 189

    (26) oplog -> MAYORQUE exp .

    AND             reduce using rule 26 (oplog -> MAYORQUE exp .)
    OR              reduce using rule 26 (oplog -> MAYORQUE exp .)
    LLAVEDER        reduce using rule 26 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 26 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 26 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 26 (oplog -> MAYORQUE exp .)
    COLON           reduce using rule 26 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 26 (oplog -> MAYORQUE exp .)


state 190

    (27) oplog -> MENORQUE exp .

    AND             reduce using rule 27 (oplog -> MENORQUE exp .)
    OR              reduce using rule 27 (oplog -> MENORQUE exp .)
    LLAVEDER        reduce using rule 27 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 27 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 27 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 27 (oplog -> MENORQUE exp .)
    COLON           reduce using rule 27 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 27 (oplog -> MENORQUE exp .)


state 191

    (28) oplog -> DIFERENTE exp .

    AND             reduce using rule 28 (oplog -> DIFERENTE exp .)
    OR              reduce using rule 28 (oplog -> DIFERENTE exp .)
    LLAVEDER        reduce using rule 28 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 28 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 28 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 28 (oplog -> DIFERENTE exp .)
    COLON           reduce using rule 28 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 28 (oplog -> DIFERENTE exp .)


state 192

    (29) oplog -> MAYOROIGUAL exp .

    AND             reduce using rule 29 (oplog -> MAYOROIGUAL exp .)
    OR              reduce using rule 29 (oplog -> MAYOROIGUAL exp .)
    LLAVEDER        reduce using rule 29 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 29 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 29 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 29 (oplog -> MAYOROIGUAL exp .)
    COLON           reduce using rule 29 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 29 (oplog -> MAYOROIGUAL exp .)


state 193

    (30) oplog -> MENOROIGUAL exp .

    AND             reduce using rule 30 (oplog -> MENOROIGUAL exp .)
    OR              reduce using rule 30 (oplog -> MENOROIGUAL exp .)
    LLAVEDER        reduce using rule 30 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 30 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 30 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 30 (oplog -> MENOROIGUAL exp .)
    COLON           reduce using rule 30 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 30 (oplog -> MENOROIGUAL exp .)


state 194

    (31) oplog -> IGUALIGUAL exp .

    AND             reduce using rule 31 (oplog -> IGUALIGUAL exp .)
    OR              reduce using rule 31 (oplog -> IGUALIGUAL exp .)
    LLAVEDER        reduce using rule 31 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 31 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 31 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 31 (oplog -> IGUALIGUAL exp .)
    COLON           reduce using rule 31 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 31 (oplog -> IGUALIGUAL exp .)


state 195

    (85) expr -> MAS termino . expr
    (85) expr -> . MAS termino expr
    (86) expr -> . MENOS termino expr
    (87) expr -> . empty
    (124) empty -> .

    MAS             shift and go to state 150
    MENOS           shift and go to state 151
    MAYORQUE        reduce using rule 124 (empty -> .)
    MENORQUE        reduce using rule 124 (empty -> .)
    DIFERENTE       reduce using rule 124 (empty -> .)
    MAYOROIGUAL     reduce using rule 124 (empty -> .)
    MENOROIGUAL     reduce using rule 124 (empty -> .)
    IGUALIGUAL      reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    expr                           shift and go to state 229
    empty                          shift and go to state 152

state 196

    (86) expr -> MENOS termino . expr
    (85) expr -> . MAS termino expr
    (86) expr -> . MENOS termino expr
    (87) expr -> . empty
    (124) empty -> .

    MAS             shift and go to state 150
    MENOS           shift and go to state 151
    MAYORQUE        reduce using rule 124 (empty -> .)
    MENORQUE        reduce using rule 124 (empty -> .)
    DIFERENTE       reduce using rule 124 (empty -> .)
    MAYOROIGUAL     reduce using rule 124 (empty -> .)
    MENOROIGUAL     reduce using rule 124 (empty -> .)
    IGUALIGUAL      reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    expr                           shift and go to state 230
    empty                          shift and go to state 152

state 197

    (80) terminor -> POR factor . terminor
    (80) terminor -> . POR factor terminor
    (81) terminor -> . SOBRE factor terminor
    (82) terminor -> . empty
    (124) empty -> .

    POR             shift and go to state 154
    SOBRE           shift and go to state 155
    MAS             reduce using rule 124 (empty -> .)
    MENOS           reduce using rule 124 (empty -> .)
    MAYORQUE        reduce using rule 124 (empty -> .)
    MENORQUE        reduce using rule 124 (empty -> .)
    DIFERENTE       reduce using rule 124 (empty -> .)
    MAYOROIGUAL     reduce using rule 124 (empty -> .)
    MENOROIGUAL     reduce using rule 124 (empty -> .)
    IGUALIGUAL      reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    terminor                       shift and go to state 231
    empty                          shift and go to state 156

state 198

    (81) terminor -> SOBRE factor . terminor
    (80) terminor -> . POR factor terminor
    (81) terminor -> . SOBRE factor terminor
    (82) terminor -> . empty
    (124) empty -> .

    POR             shift and go to state 154
    SOBRE           shift and go to state 155
    MAS             reduce using rule 124 (empty -> .)
    MENOS           reduce using rule 124 (empty -> .)
    MAYORQUE        reduce using rule 124 (empty -> .)
    MENORQUE        reduce using rule 124 (empty -> .)
    DIFERENTE       reduce using rule 124 (empty -> .)
    MAYOROIGUAL     reduce using rule 124 (empty -> .)
    MENOROIGUAL     reduce using rule 124 (empty -> .)
    IGUALIGUAL      reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    COMA            reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)

    terminor                       shift and go to state 232
    empty                          shift and go to state 156

state 199

    (78) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    LLAVEDER        reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    COLON           reduce using rule 78 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 78 (factor -> PARIZQ expresion PARDER .)


state 200

    (79) factor -> factor2 varcte varcter .

    POR             reduce using rule 79 (factor -> factor2 varcte varcter .)
    SOBRE           reduce using rule 79 (factor -> factor2 varcte varcter .)
    MAS             reduce using rule 79 (factor -> factor2 varcte varcter .)
    MENOS           reduce using rule 79 (factor -> factor2 varcte varcter .)
    MAYORQUE        reduce using rule 79 (factor -> factor2 varcte varcter .)
    MENORQUE        reduce using rule 79 (factor -> factor2 varcte varcter .)
    DIFERENTE       reduce using rule 79 (factor -> factor2 varcte varcter .)
    MAYOROIGUAL     reduce using rule 79 (factor -> factor2 varcte varcter .)
    MENOROIGUAL     reduce using rule 79 (factor -> factor2 varcte varcter .)
    IGUALIGUAL      reduce using rule 79 (factor -> factor2 varcte varcter .)
    AND             reduce using rule 79 (factor -> factor2 varcte varcter .)
    OR              reduce using rule 79 (factor -> factor2 varcte varcter .)
    LLAVEDER        reduce using rule 79 (factor -> factor2 varcte varcter .)
    COMA            reduce using rule 79 (factor -> factor2 varcte varcter .)
    PARDER          reduce using rule 79 (factor -> factor2 varcte varcter .)
    CORCHDER        reduce using rule 79 (factor -> factor2 varcte varcter .)
    COLON           reduce using rule 79 (factor -> factor2 varcte varcter .)
    CORCHIZQ        reduce using rule 79 (factor -> factor2 varcte varcter .)


state 201

    (88) varcter -> COMA . varcte varcter
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 159
    INTNUM          shift and go to state 160
    FLOATNUM        shift and go to state 161
    BOOLVAL         shift and go to state 162
    STRING          shift and go to state 163

    varcte                         shift and go to state 233

state 202

    (89) varcter -> empty .

    POR             reduce using rule 89 (varcter -> empty .)
    SOBRE           reduce using rule 89 (varcter -> empty .)
    MAS             reduce using rule 89 (varcter -> empty .)
    MENOS           reduce using rule 89 (varcter -> empty .)
    MAYORQUE        reduce using rule 89 (varcter -> empty .)
    MENORQUE        reduce using rule 89 (varcter -> empty .)
    DIFERENTE       reduce using rule 89 (varcter -> empty .)
    MAYOROIGUAL     reduce using rule 89 (varcter -> empty .)
    MENOROIGUAL     reduce using rule 89 (varcter -> empty .)
    IGUALIGUAL      reduce using rule 89 (varcter -> empty .)
    AND             reduce using rule 89 (varcter -> empty .)
    OR              reduce using rule 89 (varcter -> empty .)
    LLAVEDER        reduce using rule 89 (varcter -> empty .)
    COMA            reduce using rule 89 (varcter -> empty .)
    PARDER          reduce using rule 89 (varcter -> empty .)
    CORCHDER        reduce using rule 89 (varcter -> empty .)
    COLON           reduce using rule 89 (varcter -> empty .)
    CORCHIZQ        reduce using rule 89 (varcter -> empty .)
    FLECHITA        reduce using rule 89 (varcter -> empty .)


state 203

    (18) varcte -> ID CORCHIZQ . varcte CORCHDER
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 159
    INTNUM          shift and go to state 160
    FLOATNUM        shift and go to state 161
    BOOLVAL         shift and go to state 162
    STRING          shift and go to state 163

    varcte                         shift and go to state 234

state 204

    (19) varcte -> ID PUNTO . ID

    ID              shift and go to state 235


state 205

    (20) varcte -> ID PARIZQ . expresion2 PARDER
    (24) expresion2 -> . expresion expresionr
    (25) expresion2 -> . empty
    (21) expresion -> . megaexp
    (124) empty -> .
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty

    PARDER          reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117

    expresion2                     shift and go to state 236
    expresion                      shift and go to state 237
    empty                          shift and go to state 238
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115

state 206

    (53) asignacion -> ID asignacion3 IGUAL asignacion2 COLON .

    ID              reduce using rule 53 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    IF              reduce using rule 53 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WRITE           reduce using rule 53 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    FOR             reduce using rule 53 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHILE           reduce using rule 53 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHEN            reduce using rule 53 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    RETURN          reduce using rule 53 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    LLAVEDER        reduce using rule 53 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)


state 207

    (55) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (57) asignacion2r -> . COMA expresion asignacion2r
    (58) asignacion2r -> . empty
    (124) empty -> .

    COMA            shift and go to state 240
    CORCHIZQ        reduce using rule 124 (empty -> .)

    asignacion2r                   shift and go to state 239
    empty                          shift and go to state 241

state 208

    (56) asignacion2 -> READ PARIZQ . STRING PARDER

    STRING          shift and go to state 242


state 209

    (122) llamada -> ID PARIZQ expresion expresionr PARDER .

    ID              reduce using rule 122 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    IF              reduce using rule 122 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    WRITE           reduce using rule 122 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    FOR             reduce using rule 122 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    WHILE           reduce using rule 122 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    WHEN            reduce using rule 122 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    RETURN          reduce using rule 122 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    LLAVEDER        reduce using rule 122 (llamada -> ID PARIZQ expresion expresionr PARDER .)


state 210

    (22) expresionr -> COMA expresion . expresionr
    (22) expresionr -> . COMA expresion expresionr
    (23) expresionr -> . empty
    (124) empty -> .

    COMA            shift and go to state 169
    PARDER          reduce using rule 124 (empty -> .)

    expresionr                     shift and go to state 243
    empty                          shift and go to state 170

state 211

    (66) estatutor -> ELSE bloque .

    ID              reduce using rule 66 (estatutor -> ELSE bloque .)
    IF              reduce using rule 66 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 66 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 66 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 66 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 66 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 66 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 66 (estatutor -> ELSE bloque .)


state 212

    (64) condicionr -> ELSE IF condicion2 .

    ELSE            reduce using rule 64 (condicionr -> ELSE IF condicion2 .)
    ID              reduce using rule 64 (condicionr -> ELSE IF condicion2 .)
    IF              reduce using rule 64 (condicionr -> ELSE IF condicion2 .)
    WRITE           reduce using rule 64 (condicionr -> ELSE IF condicion2 .)
    FOR             reduce using rule 64 (condicionr -> ELSE IF condicion2 .)
    WHILE           reduce using rule 64 (condicionr -> ELSE IF condicion2 .)
    WHEN            reduce using rule 64 (condicionr -> ELSE IF condicion2 .)
    RETURN          reduce using rule 64 (condicionr -> ELSE IF condicion2 .)
    LLAVEDER        reduce using rule 64 (condicionr -> ELSE IF condicion2 .)


state 213

    (63) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 63 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 63 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 63 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 63 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 63 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 63 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 63 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 63 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 63 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 214

    (68) escritura -> WRITE PARIZQ esc1 esc2 PARDER .

    ID              reduce using rule 68 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    IF              reduce using rule 68 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WRITE           reduce using rule 68 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    FOR             reduce using rule 68 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WHILE           reduce using rule 68 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WHEN            reduce using rule 68 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    RETURN          reduce using rule 68 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    LLAVEDER        reduce using rule 68 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)


state 215

    (71) esc2 -> COMA esc1 . esc2
    (71) esc2 -> . COMA esc1 esc2
    (72) esc2 -> . empty
    (124) empty -> .

    COMA            shift and go to state 178
    PARDER          reduce using rule 124 (empty -> .)

    esc2                           shift and go to state 244
    empty                          shift and go to state 179

state 216

    (94) for2 -> ID .

    PARDER          reduce using rule 94 (for2 -> ID .)


state 217

    (93) for -> FOR PARIZQ ID IN for2 . PARDER bloque

    PARDER          shift and go to state 245


state 218

    (95) for2 -> range .

    PARDER          reduce using rule 95 (for2 -> range .)


state 219

    (96) range -> INTNUM . PUNTOSRANGO INTNUM

    PUNTOSRANGO     shift and go to state 246


state 220

    (97) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 97 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 97 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 97 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 97 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 97 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 97 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 97 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 97 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 221

    (98) when -> WHEN PARIZQ expresion PARDER LLAVEIZQ . when2 LLAVEDER
    (99) when2 -> . varcte varcter FLECHITA bloque when2
    (100) when2 -> . IN range FLECHITA bloque when2
    (101) when2 -> . ELSE FLECHITA bloque when2
    (102) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (124) empty -> .

    IN              shift and go to state 249
    ELSE            shift and go to state 250
    ID              shift and go to state 159
    INTNUM          shift and go to state 160
    FLOATNUM        shift and go to state 161
    BOOLVAL         shift and go to state 162
    STRING          shift and go to state 163
    LLAVEDER        reduce using rule 124 (empty -> .)

    when2                          shift and go to state 247
    varcte                         shift and go to state 248
    empty                          shift and go to state 251

state 222

    (110) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (9) bloque2 -> . RETURN bloque3
    (10) bloque2 -> . empty
    (124) empty -> .

    RETURN          shift and go to state 79
    LLAVEDER        reduce using rule 124 (empty -> .)

    bloque2                        shift and go to state 252
    empty                          shift and go to state 80

state 223

    (113) opc2 -> estatuto .

    RETURN          reduce using rule 113 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 113 (opc2 -> estatuto .)


state 224

    (114) opc2 -> empty .
    (52) estatuto -> empty .
    (123) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 52 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 52 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 52 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 52 (estatuto -> empty .)
    RETURN          reduce using rule 52 (estatuto -> empty .)
    LLAVEDER        reduce using rule 52 (estatuto -> empty .)
    ID              reduce using rule 123 (llamada -> empty .)
    IF              reduce using rule 123 (llamada -> empty .)
    WRITE           reduce using rule 123 (llamada -> empty .)
    FOR             reduce using rule 123 (llamada -> empty .)
    WHILE           reduce using rule 123 (llamada -> empty .)
    WHEN            reduce using rule 123 (llamada -> empty .)

  ! RETURN          [ reduce using rule 114 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 114 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 123 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 123 (llamada -> empty .) ]


state 225

    (111) opc1 -> vars multvarsdecl .

    ID              reduce using rule 111 (opc1 -> vars multvarsdecl .)
    IF              reduce using rule 111 (opc1 -> vars multvarsdecl .)
    WRITE           reduce using rule 111 (opc1 -> vars multvarsdecl .)
    FOR             reduce using rule 111 (opc1 -> vars multvarsdecl .)
    WHILE           reduce using rule 111 (opc1 -> vars multvarsdecl .)
    WHEN            reduce using rule 111 (opc1 -> vars multvarsdecl .)
    RETURN          reduce using rule 111 (opc1 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 111 (opc1 -> vars multvarsdecl .)


state 226

    (106) funparamr -> COMA tipo ID funparamr .

    PARDER          reduce using rule 106 (funparamr -> COMA tipo ID funparamr .)


state 227

    (35) megaexpr -> AND superexp megaexpr .

    LLAVEDER        reduce using rule 35 (megaexpr -> AND superexp megaexpr .)
    COMA            reduce using rule 35 (megaexpr -> AND superexp megaexpr .)
    PARDER          reduce using rule 35 (megaexpr -> AND superexp megaexpr .)
    CORCHDER        reduce using rule 35 (megaexpr -> AND superexp megaexpr .)
    COLON           reduce using rule 35 (megaexpr -> AND superexp megaexpr .)
    CORCHIZQ        reduce using rule 35 (megaexpr -> AND superexp megaexpr .)


state 228

    (36) megaexpr -> OR superexp megaexpr .

    LLAVEDER        reduce using rule 36 (megaexpr -> OR superexp megaexpr .)
    COMA            reduce using rule 36 (megaexpr -> OR superexp megaexpr .)
    PARDER          reduce using rule 36 (megaexpr -> OR superexp megaexpr .)
    CORCHDER        reduce using rule 36 (megaexpr -> OR superexp megaexpr .)
    COLON           reduce using rule 36 (megaexpr -> OR superexp megaexpr .)
    CORCHIZQ        reduce using rule 36 (megaexpr -> OR superexp megaexpr .)


state 229

    (85) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 85 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 85 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 85 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 85 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 85 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 85 (expr -> MAS termino expr .)
    AND             reduce using rule 85 (expr -> MAS termino expr .)
    OR              reduce using rule 85 (expr -> MAS termino expr .)
    LLAVEDER        reduce using rule 85 (expr -> MAS termino expr .)
    COMA            reduce using rule 85 (expr -> MAS termino expr .)
    PARDER          reduce using rule 85 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 85 (expr -> MAS termino expr .)
    COLON           reduce using rule 85 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 85 (expr -> MAS termino expr .)


state 230

    (86) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 86 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 86 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 86 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 86 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 86 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 86 (expr -> MENOS termino expr .)
    AND             reduce using rule 86 (expr -> MENOS termino expr .)
    OR              reduce using rule 86 (expr -> MENOS termino expr .)
    LLAVEDER        reduce using rule 86 (expr -> MENOS termino expr .)
    COMA            reduce using rule 86 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 86 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 86 (expr -> MENOS termino expr .)
    COLON           reduce using rule 86 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 86 (expr -> MENOS termino expr .)


state 231

    (80) terminor -> POR factor terminor .

    MAS             reduce using rule 80 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 80 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 80 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 80 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 80 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 80 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 80 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 80 (terminor -> POR factor terminor .)
    AND             reduce using rule 80 (terminor -> POR factor terminor .)
    OR              reduce using rule 80 (terminor -> POR factor terminor .)
    LLAVEDER        reduce using rule 80 (terminor -> POR factor terminor .)
    COMA            reduce using rule 80 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 80 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 80 (terminor -> POR factor terminor .)
    COLON           reduce using rule 80 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 80 (terminor -> POR factor terminor .)


state 232

    (81) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 81 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 81 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 81 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 81 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 81 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 81 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 81 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 81 (terminor -> SOBRE factor terminor .)
    AND             reduce using rule 81 (terminor -> SOBRE factor terminor .)
    OR              reduce using rule 81 (terminor -> SOBRE factor terminor .)
    LLAVEDER        reduce using rule 81 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 81 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 81 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 81 (terminor -> SOBRE factor terminor .)
    COLON           reduce using rule 81 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 81 (terminor -> SOBRE factor terminor .)


state 233

    (88) varcter -> COMA varcte . varcter
    (88) varcter -> . COMA varcte varcter
    (89) varcter -> . empty
    (124) empty -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 201
    POR             reduce using rule 124 (empty -> .)
    SOBRE           reduce using rule 124 (empty -> .)
    MAS             reduce using rule 124 (empty -> .)
    MENOS           reduce using rule 124 (empty -> .)
    MAYORQUE        reduce using rule 124 (empty -> .)
    MENORQUE        reduce using rule 124 (empty -> .)
    DIFERENTE       reduce using rule 124 (empty -> .)
    MAYOROIGUAL     reduce using rule 124 (empty -> .)
    MENOROIGUAL     reduce using rule 124 (empty -> .)
    IGUALIGUAL      reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    LLAVEDER        reduce using rule 124 (empty -> .)
    PARDER          reduce using rule 124 (empty -> .)
    CORCHDER        reduce using rule 124 (empty -> .)
    COLON           reduce using rule 124 (empty -> .)
    CORCHIZQ        reduce using rule 124 (empty -> .)
    FLECHITA        reduce using rule 124 (empty -> .)

  ! COMA            [ reduce using rule 124 (empty -> .) ]

    varcter                        shift and go to state 253
    empty                          shift and go to state 202

state 234

    (18) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 254


state 235

    (19) varcte -> ID PUNTO ID .

    COMA            reduce using rule 19 (varcte -> ID PUNTO ID .)
    POR             reduce using rule 19 (varcte -> ID PUNTO ID .)
    SOBRE           reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAS             reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENOS           reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAYORQUE        reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENORQUE        reduce using rule 19 (varcte -> ID PUNTO ID .)
    DIFERENTE       reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAYOROIGUAL     reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENOROIGUAL     reduce using rule 19 (varcte -> ID PUNTO ID .)
    IGUALIGUAL      reduce using rule 19 (varcte -> ID PUNTO ID .)
    AND             reduce using rule 19 (varcte -> ID PUNTO ID .)
    OR              reduce using rule 19 (varcte -> ID PUNTO ID .)
    LLAVEDER        reduce using rule 19 (varcte -> ID PUNTO ID .)
    PARDER          reduce using rule 19 (varcte -> ID PUNTO ID .)
    CORCHDER        reduce using rule 19 (varcte -> ID PUNTO ID .)
    COLON           reduce using rule 19 (varcte -> ID PUNTO ID .)
    CORCHIZQ        reduce using rule 19 (varcte -> ID PUNTO ID .)
    FLECHITA        reduce using rule 19 (varcte -> ID PUNTO ID .)


state 236

    (20) varcte -> ID PARIZQ expresion2 . PARDER

    PARDER          shift and go to state 255


state 237

    (24) expresion2 -> expresion . expresionr
    (22) expresionr -> . COMA expresion expresionr
    (23) expresionr -> . empty
    (124) empty -> .

    COMA            shift and go to state 169
    PARDER          reduce using rule 124 (empty -> .)

    expresionr                     shift and go to state 256
    empty                          shift and go to state 170

state 238

    (25) expresion2 -> empty .
    (92) factor2 -> empty .

    PARDER          reduce using rule 25 (expresion2 -> empty .)
    ID              reduce using rule 92 (factor2 -> empty .)
    INTNUM          reduce using rule 92 (factor2 -> empty .)
    FLOATNUM        reduce using rule 92 (factor2 -> empty .)
    BOOLVAL         reduce using rule 92 (factor2 -> empty .)
    STRING          reduce using rule 92 (factor2 -> empty .)


state 239

    (55) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 257


state 240

    (57) asignacion2r -> COMA . expresion asignacion2r
    (21) expresion -> . megaexp
    (34) megaexp -> . superexp megaexpr
    (33) superexp -> . exp oplog
    (84) exp -> . termino expr
    (83) termino -> . factor terminor
    (78) factor -> . PARIZQ expresion PARDER
    (79) factor -> . factor2 varcte varcter
    (90) factor2 -> . MAS
    (91) factor2 -> . MENOS
    (92) factor2 -> . empty
    (124) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 124 (empty -> .)
    INTNUM          reduce using rule 124 (empty -> .)
    FLOATNUM        reduce using rule 124 (empty -> .)
    BOOLVAL         reduce using rule 124 (empty -> .)
    STRING          reduce using rule 124 (empty -> .)

    expresion                      shift and go to state 258
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 120

state 241

    (58) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 58 (asignacion2r -> empty .)


state 242

    (56) asignacion2 -> READ PARIZQ STRING . PARDER

    PARDER          shift and go to state 259


state 243

    (22) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 22 (expresionr -> COMA expresion expresionr .)


state 244

    (71) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 71 (esc2 -> COMA esc1 esc2 .)


state 245

    (93) for -> FOR PARIZQ ID IN for2 PARDER . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 260

state 246

    (96) range -> INTNUM PUNTOSRANGO . INTNUM

    INTNUM          shift and go to state 261


state 247

    (98) when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 262


state 248

    (99) when2 -> varcte . varcter FLECHITA bloque when2
    (88) varcter -> . COMA varcte varcter
    (89) varcter -> . empty
    (124) empty -> .

    COMA            shift and go to state 201
    FLECHITA        reduce using rule 124 (empty -> .)

    varcter                        shift and go to state 263
    empty                          shift and go to state 202

state 249

    (100) when2 -> IN . range FLECHITA bloque when2
    (96) range -> . INTNUM PUNTOSRANGO INTNUM

    INTNUM          shift and go to state 219

    range                          shift and go to state 264

state 250

    (101) when2 -> ELSE . FLECHITA bloque when2

    FLECHITA        shift and go to state 265


state 251

    (102) when2 -> empty .

    LLAVEDER        reduce using rule 102 (when2 -> empty .)


state 252

    (110) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 266


state 253

    (88) varcter -> COMA varcte varcter .

    POR             reduce using rule 88 (varcter -> COMA varcte varcter .)
    SOBRE           reduce using rule 88 (varcter -> COMA varcte varcter .)
    MAS             reduce using rule 88 (varcter -> COMA varcte varcter .)
    MENOS           reduce using rule 88 (varcter -> COMA varcte varcter .)
    MAYORQUE        reduce using rule 88 (varcter -> COMA varcte varcter .)
    MENORQUE        reduce using rule 88 (varcter -> COMA varcte varcter .)
    DIFERENTE       reduce using rule 88 (varcter -> COMA varcte varcter .)
    MAYOROIGUAL     reduce using rule 88 (varcter -> COMA varcte varcter .)
    MENOROIGUAL     reduce using rule 88 (varcter -> COMA varcte varcter .)
    IGUALIGUAL      reduce using rule 88 (varcter -> COMA varcte varcter .)
    AND             reduce using rule 88 (varcter -> COMA varcte varcter .)
    OR              reduce using rule 88 (varcter -> COMA varcte varcter .)
    LLAVEDER        reduce using rule 88 (varcter -> COMA varcte varcter .)
    COMA            reduce using rule 88 (varcter -> COMA varcte varcter .)
    PARDER          reduce using rule 88 (varcter -> COMA varcte varcter .)
    CORCHDER        reduce using rule 88 (varcter -> COMA varcte varcter .)
    COLON           reduce using rule 88 (varcter -> COMA varcte varcter .)
    CORCHIZQ        reduce using rule 88 (varcter -> COMA varcte varcter .)
    FLECHITA        reduce using rule 88 (varcter -> COMA varcte varcter .)


state 254

    (18) varcte -> ID CORCHIZQ varcte CORCHDER .

    COMA            reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    POR             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    AND             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    OR              reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    LLAVEDER        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COLON           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 255

    (20) varcte -> ID PARIZQ expresion2 PARDER .

    COMA            reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    POR             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    SOBRE           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAS             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOS           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYORQUE        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENORQUE        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    DIFERENTE       reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYOROIGUAL     reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOROIGUAL     reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    IGUALIGUAL      reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    AND             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    OR              reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    LLAVEDER        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    PARDER          reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    CORCHDER        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    COLON           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    CORCHIZQ        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    FLECHITA        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)


state 256

    (24) expresion2 -> expresion expresionr .

    PARDER          reduce using rule 24 (expresion2 -> expresion expresionr .)


state 257

    (55) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    COLON           reduce using rule 55 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 258

    (57) asignacion2r -> COMA expresion . asignacion2r
    (57) asignacion2r -> . COMA expresion asignacion2r
    (58) asignacion2r -> . empty
    (124) empty -> .

    COMA            shift and go to state 240
    CORCHIZQ        reduce using rule 124 (empty -> .)

    asignacion2r                   shift and go to state 267
    empty                          shift and go to state 241

state 259

    (56) asignacion2 -> READ PARIZQ STRING PARDER .

    COLON           reduce using rule 56 (asignacion2 -> READ PARIZQ STRING PARDER .)


state 260

    (93) for -> FOR PARIZQ ID IN for2 PARDER bloque .

    ID              reduce using rule 93 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    IF              reduce using rule 93 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WRITE           reduce using rule 93 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    FOR             reduce using rule 93 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHILE           reduce using rule 93 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHEN            reduce using rule 93 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    RETURN          reduce using rule 93 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    LLAVEDER        reduce using rule 93 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)


state 261

    (96) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 96 (range -> INTNUM PUNTOSRANGO INTNUM .)
    FLECHITA        reduce using rule 96 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 262

    (98) when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 98 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 98 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 98 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 98 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 98 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 98 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 98 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 98 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)


state 263

    (99) when2 -> varcte varcter . FLECHITA bloque when2

    FLECHITA        shift and go to state 268


state 264

    (100) when2 -> IN range . FLECHITA bloque when2

    FLECHITA        shift and go to state 269


state 265

    (101) when2 -> ELSE FLECHITA . bloque when2
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 270

state 266

    (110) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    PRIVATE         reduce using rule 110 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    FUN             reduce using rule 110 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    MAIN            reduce using rule 110 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 267

    (57) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 57 (asignacion2r -> COMA expresion asignacion2r .)


state 268

    (99) when2 -> varcte varcter FLECHITA . bloque when2
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 271

state 269

    (100) when2 -> IN range FLECHITA . bloque when2
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 272

state 270

    (101) when2 -> ELSE FLECHITA bloque . when2
    (99) when2 -> . varcte varcter FLECHITA bloque when2
    (100) when2 -> . IN range FLECHITA bloque when2
    (101) when2 -> . ELSE FLECHITA bloque when2
    (102) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (124) empty -> .

    IN              shift and go to state 249
    ELSE            shift and go to state 250
    ID              shift and go to state 159
    INTNUM          shift and go to state 160
    FLOATNUM        shift and go to state 161
    BOOLVAL         shift and go to state 162
    STRING          shift and go to state 163
    LLAVEDER        reduce using rule 124 (empty -> .)

    when2                          shift and go to state 273
    varcte                         shift and go to state 248
    empty                          shift and go to state 251

state 271

    (99) when2 -> varcte varcter FLECHITA bloque . when2
    (99) when2 -> . varcte varcter FLECHITA bloque when2
    (100) when2 -> . IN range FLECHITA bloque when2
    (101) when2 -> . ELSE FLECHITA bloque when2
    (102) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (124) empty -> .

    IN              shift and go to state 249
    ELSE            shift and go to state 250
    ID              shift and go to state 159
    INTNUM          shift and go to state 160
    FLOATNUM        shift and go to state 161
    BOOLVAL         shift and go to state 162
    STRING          shift and go to state 163
    LLAVEDER        reduce using rule 124 (empty -> .)

    varcte                         shift and go to state 248
    when2                          shift and go to state 274
    empty                          shift and go to state 251

state 272

    (100) when2 -> IN range FLECHITA bloque . when2
    (99) when2 -> . varcte varcter FLECHITA bloque when2
    (100) when2 -> . IN range FLECHITA bloque when2
    (101) when2 -> . ELSE FLECHITA bloque when2
    (102) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (124) empty -> .

    IN              shift and go to state 249
    ELSE            shift and go to state 250
    ID              shift and go to state 159
    INTNUM          shift and go to state 160
    FLOATNUM        shift and go to state 161
    BOOLVAL         shift and go to state 162
    STRING          shift and go to state 163
    LLAVEDER        reduce using rule 124 (empty -> .)

    when2                          shift and go to state 275
    varcte                         shift and go to state 248
    empty                          shift and go to state 251

state 273

    (101) when2 -> ELSE FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 101 (when2 -> ELSE FLECHITA bloque when2 .)


state 274

    (99) when2 -> varcte varcter FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 99 (when2 -> varcte varcter FLECHITA bloque when2 .)


state 275

    (100) when2 -> IN range FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 100 (when2 -> IN range FLECHITA bloque when2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 15 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for IF in state 55 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 55 resolved as shift
WARNING: shift/reduce conflict for FOR in state 55 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 55 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 61 resolved as shift
WARNING: shift/reduce conflict for IF in state 61 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 61 resolved as shift
WARNING: shift/reduce conflict for FOR in state 61 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 61 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 62 resolved as shift
WARNING: shift/reduce conflict for FOR in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for IF in state 63 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 63 resolved as shift
WARNING: shift/reduce conflict for FOR in state 63 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 63 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for IF in state 64 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 64 resolved as shift
WARNING: shift/reduce conflict for FOR in state 64 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 64 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 65 resolved as shift
WARNING: shift/reduce conflict for FOR in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 67 resolved as shift
WARNING: shift/reduce conflict for IF in state 67 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 67 resolved as shift
WARNING: shift/reduce conflict for FOR in state 67 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 67 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 67 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 93 resolved as shift
WARNING: shift/reduce conflict for STRING in state 95 resolved as shift
WARNING: shift/reduce conflict for COMA in state 158 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 159 resolved as shift
WARNING: shift/reduce conflict for STRING in state 178 resolved as shift
WARNING: shift/reduce conflict for ID in state 183 resolved as shift
WARNING: shift/reduce conflict for IF in state 183 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 183 resolved as shift
WARNING: shift/reduce conflict for FOR in state 183 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 183 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 183 resolved as shift
WARNING: shift/reduce conflict for COMA in state 233 resolved as shift
WARNING: reduce/reduce conflict in state 68 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 68
WARNING: reduce/reduce conflict in state 224 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 224
WARNING: reduce/reduce conflict in state 224 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 224
WARNING: Rule (opc2 -> empty) is never reduced
