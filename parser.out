Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    OR
    RANGE

Grammar

Rule 0     S' -> resultado
Rule 1     resultado -> class
Rule 2     class -> CLASS CID classparams class2 body
Rule 3     class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER
Rule 4     class2 -> empty
Rule 5     classparams -> PARIZQ classparams2 PARDER
Rule 6     classparams2 -> vars
Rule 7     classparams2 -> empty
Rule 8     bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 9     bloque2 -> RETURN bloque3
Rule 10    bloque2 -> empty
Rule 11    bloque3 -> expresion
Rule 12    bloque3 -> empty
Rule 13    varcte -> ID
Rule 14    varcte -> INTNUM
Rule 15    varcte -> FLOATNUM
Rule 16    varcte -> BOOLVAL
Rule 17    varcte -> STRING
Rule 18    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 19    varcte -> ID PUNTO ID
Rule 20    varcte -> ID PARIZQ expresion2 PARDER
Rule 21    expresion -> exp oplog
Rule 22    expresion -> ID PARIZQ expresion2 PARDER
Rule 23    expresionr -> COMA expresion expresionr
Rule 24    expresionr -> empty
Rule 25    expresion2 -> expresion expresionr
Rule 26    expresion2 -> empty
Rule 27    oplog -> MAYORQUE exp
Rule 28    oplog -> MENORQUE exp
Rule 29    oplog -> DIFERENTE exp
Rule 30    oplog -> MAYOROIGUAL exp
Rule 31    oplog -> MENOROIGUAL exp
Rule 32    oplog -> IGUALIGUAL exp
Rule 33    oplog -> empty
Rule 34    vars -> vars3 tipo vars2 COLON
Rule 35    vars -> vars3 tipo LIST vars2 COLON
Rule 36    varsr -> COMA ID varsr
Rule 37    varsr -> empty
Rule 38    vars2 -> ID varsr
Rule 39    vars3 -> PRIVATE
Rule 40    vars3 -> empty
Rule 41    estatuto -> asignacion estatuto
Rule 42    estatuto -> condicion estatuto
Rule 43    estatuto -> escritura estatuto
Rule 44    estatuto -> for estatuto
Rule 45    estatuto -> while estatuto
Rule 46    estatuto -> when estatuto
Rule 47    estatuto -> llamada estatuto
Rule 48    estatuto -> empty
Rule 49    asignacion -> ID asignacion3 IGUAL asignacion2
Rule 50    asignacion2 -> expresion
Rule 51    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 52    asignacion2 -> READ PARIZQ STRING PARDER
Rule 53    asignacion2r -> COMA expresion asignacion2r
Rule 54    asignacion2r -> empty
Rule 55    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 56    asignacion3 -> PUNTO ID
Rule 57    asignacion3 -> empty
Rule 58    condicion -> IF condicion2 condicionr estatutor
Rule 59    condicion2 -> PARIZQ expresion PARDER bloque
Rule 60    condicionr -> ELSE IF condicion2
Rule 61    condicionr -> empty
Rule 62    estatutor -> ELSE bloque
Rule 63    estatutor -> empty
Rule 64    escritura -> WRITE PARIZQ esc1 esc2 PARDER
Rule 65    esc1 -> expresion
Rule 66    esc1 -> STRING
Rule 67    esc2 -> COMA esc1 esc2
Rule 68    esc2 -> empty
Rule 69    tipo -> INT
Rule 70    tipo -> FLOAT
Rule 71    tipo -> BOOL
Rule 72    tipo -> STRING
Rule 73    tipo -> CID
Rule 74    factor -> PARIZQ expresion PARDER
Rule 75    factor -> factor2 varcte varcter
Rule 76    terminor -> POR factor terminor
Rule 77    terminor -> SOBRE factor terminor
Rule 78    terminor -> empty
Rule 79    termino -> factor terminor
Rule 80    exp -> termino expr
Rule 81    expr -> MAS termino expr
Rule 82    expr -> MENOS termino expr
Rule 83    expr -> empty
Rule 84    varcter -> COMA varcte varcter
Rule 85    varcter -> empty
Rule 86    factor2 -> MAS
Rule 87    factor2 -> MENOS
Rule 88    factor2 -> empty
Rule 89    for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 90    for2 -> ID
Rule 91    for2 -> range
Rule 92    range -> INTNUM PUNTOSRANGO INTNUM
Rule 93    while -> WHILE PARIZQ expresion PARDER bloque
Rule 94    when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
Rule 95    when2 -> varcte varcter FLECHITA bloque when2
Rule 96    when2 -> IN range FLECHITA bloque when2
Rule 97    when2 -> ELSE FLECHITA bloque when2
Rule 98    when2 -> empty
Rule 99    fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 100   fun2 -> tipo ID funparamr
Rule 101   fun2 -> empty
Rule 102   funparamr -> COMA tipo ID funparamr
Rule 103   funparamr -> empty
Rule 104   fun3 -> DOSPUNTOS tipo
Rule 105   fun3 -> empty
Rule 106   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 107   opc1 -> vars
Rule 108   opc1 -> empty
Rule 109   opc2 -> estatuto
Rule 110   opc2 -> empty
Rule 111   body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER
Rule 112   body2 -> vars
Rule 113   body2 -> empty
Rule 114   funr -> fun funr
Rule 115   funr -> empty
Rule 116   llamada -> ID PARIZQ expresion expresionr PARDER
Rule 117   llamada -> empty
Rule 118   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 71
BOOLVAL              : 16
CID                  : 2 73
CLASS                : 2
COLON                : 34 35
COMA                 : 23 36 53 67 84 102
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 18 51 55
CORCHIZQ             : 18 51 55
DIFERENTE            : 29
DOSPUNTOS            : 3 104
ELSE                 : 60 62 97
EOL                  : 
FLECHITA             : 95 96 97
FLOAT                : 70
FLOATNUM             : 15
FOR                  : 89
FUN                  : 99
GLOBAL               : 
ID                   : 3 13 18 19 19 20 22 36 38 49 56 89 90 99 100 102 116
IF                   : 58 60
IGUAL                : 49
IGUALIGUAL           : 32
IN                   : 89 96
INT                  : 69
INTNUM               : 14 92 92
LIST                 : 35
LLAVEDER             : 8 94 106 111
LLAVEIZQ             : 8 94 106 111
MAIN                 : 111
MAS                  : 81 86
MAYOROIGUAL          : 30
MAYORQUE             : 27
MENOROIGUAL          : 31
MENORQUE             : 28
MENOS                : 82 87
OR                   : 
PARDER               : 3 5 20 22 52 59 64 74 89 93 94 99 111 116
PARIZQ               : 3 5 20 22 52 59 64 74 89 93 94 99 111 116
POR                  : 76
PRIVATE              : 39
PUNTO                : 19 56
PUNTOSRANGO          : 92
RANGE                : 
READ                 : 52
RETURN               : 9
SOBRE                : 77
STRING               : 17 52 66 72
WHEN                 : 94
WHILE                : 93
WRITE                : 64
error                : 

Nonterminals, with rules where they appear

asignacion           : 41
asignacion2          : 49
asignacion2r         : 51 53
asignacion3          : 49
bloque               : 59 62 89 93 95 96 97 111
bloque2              : 8 106
bloque3              : 9
body                 : 2
body2                : 111
class                : 1
class2               : 2
classparams          : 2
classparams2         : 5
condicion            : 42
condicion2           : 58 60
condicionr           : 58
empty                : 4 7 10 12 24 26 33 37 40 48 54 57 61 63 68 78 83 85 88 98 101 103 105 108 110 113 115 117
esc1                 : 64 67
esc2                 : 64 67
escritura            : 43
estatuto             : 8 41 42 43 44 45 46 47 109
estatutor            : 58
exp                  : 21 27 28 29 30 31 32
expr                 : 80 81 82
expresion            : 11 23 25 50 51 53 55 59 65 74 93 94 116
expresion2           : 20 22
expresionr           : 23 25 116
factor               : 76 77 79
factor2              : 75
for                  : 44
for2                 : 89
fun                  : 114
fun2                 : 99
fun3                 : 99
funbody              : 99
funparamr            : 100 102
funr                 : 111 114
llamada              : 47
opc1                 : 106
opc2                 : 106
oplog                : 21
range                : 91 96
resultado            : 0
termino              : 80 81 82
terminor             : 76 77 79
tipo                 : 34 35 100 102 104
varcte               : 18 75 84 95
varcter              : 75 84 95
vars                 : 6 107 112
vars2                : 3 34 35
vars3                : 34 35 99
varsr                : 36 38
when                 : 46
when2                : 94 95 96 97
while                : 45

Parsing method: LALR

state 0

    (0) S' -> . resultado
    (1) resultado -> . class
    (2) class -> . CLASS CID classparams class2 body

    CLASS           shift and go to state 3

    resultado                      shift and go to state 1
    class                          shift and go to state 2

state 1

    (0) S' -> resultado .



state 2

    (1) resultado -> class .

    $end            reduce using rule 1 (resultado -> class .)


state 3

    (2) class -> CLASS . CID classparams class2 body

    CID             shift and go to state 4


state 4

    (2) class -> CLASS CID . classparams class2 body
    (5) classparams -> . PARIZQ classparams2 PARDER

    PARIZQ          shift and go to state 6

    classparams                    shift and go to state 5

state 5

    (2) class -> CLASS CID classparams . class2 body
    (3) class2 -> . DOSPUNTOS ID PARIZQ vars2 PARDER
    (4) class2 -> . empty
    (118) empty -> .

    DOSPUNTOS       shift and go to state 8
    LLAVEIZQ        reduce using rule 118 (empty -> .)

    class2                         shift and go to state 7
    empty                          shift and go to state 9

state 6

    (5) classparams -> PARIZQ . classparams2 PARDER
    (6) classparams2 -> . vars
    (7) classparams2 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (118) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    PARDER          reduce using rule 118 (empty -> .)
    INT             reduce using rule 118 (empty -> .)
    FLOAT           reduce using rule 118 (empty -> .)
    BOOL            reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    CID             reduce using rule 118 (empty -> .)
    PRIVATE         shift and go to state 14

    classparams2                   shift and go to state 10
    vars                           shift and go to state 11
    empty                          shift and go to state 12
    vars3                          shift and go to state 13

state 7

    (2) class -> CLASS CID classparams class2 . body
    (111) body -> . LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER

    LLAVEIZQ        shift and go to state 16

    body                           shift and go to state 15

state 8

    (3) class2 -> DOSPUNTOS . ID PARIZQ vars2 PARDER

    ID              shift and go to state 17


state 9

    (4) class2 -> empty .

    LLAVEIZQ        reduce using rule 4 (class2 -> empty .)


state 10

    (5) classparams -> PARIZQ classparams2 . PARDER

    PARDER          shift and go to state 18


state 11

    (6) classparams2 -> vars .

    PARDER          reduce using rule 6 (classparams2 -> vars .)


state 12

    (7) classparams2 -> empty .
    (40) vars3 -> empty .

    PARDER          reduce using rule 7 (classparams2 -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 13

    (34) vars -> vars3 . tipo vars2 COLON
    (35) vars -> vars3 . tipo LIST vars2 COLON
    (69) tipo -> . INT
    (70) tipo -> . FLOAT
    (71) tipo -> . BOOL
    (72) tipo -> . STRING
    (73) tipo -> . CID

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    CID             shift and go to state 24

    tipo                           shift and go to state 19

state 14

    (39) vars3 -> PRIVATE .

    INT             reduce using rule 39 (vars3 -> PRIVATE .)
    FLOAT           reduce using rule 39 (vars3 -> PRIVATE .)
    BOOL            reduce using rule 39 (vars3 -> PRIVATE .)
    STRING          reduce using rule 39 (vars3 -> PRIVATE .)
    CID             reduce using rule 39 (vars3 -> PRIVATE .)
    FUN             reduce using rule 39 (vars3 -> PRIVATE .)


state 15

    (2) class -> CLASS CID classparams class2 body .

    $end            reduce using rule 2 (class -> CLASS CID classparams class2 body .)


state 16

    (111) body -> LLAVEIZQ . body2 funr MAIN PARIZQ PARDER bloque LLAVEDER
    (112) body2 -> . vars
    (113) body2 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (118) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 118 (empty -> .)
    FUN             reduce using rule 118 (empty -> .)
    INT             reduce using rule 118 (empty -> .)
    FLOAT           reduce using rule 118 (empty -> .)
    BOOL            reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    CID             reduce using rule 118 (empty -> .)
    PRIVATE         shift and go to state 14

  ! PRIVATE         [ reduce using rule 118 (empty -> .) ]

    body2                          shift and go to state 25
    vars                           shift and go to state 26
    empty                          shift and go to state 27
    vars3                          shift and go to state 13

state 17

    (3) class2 -> DOSPUNTOS ID . PARIZQ vars2 PARDER

    PARIZQ          shift and go to state 28


state 18

    (5) classparams -> PARIZQ classparams2 PARDER .

    DOSPUNTOS       reduce using rule 5 (classparams -> PARIZQ classparams2 PARDER .)
    LLAVEIZQ        reduce using rule 5 (classparams -> PARIZQ classparams2 PARDER .)


state 19

    (34) vars -> vars3 tipo . vars2 COLON
    (35) vars -> vars3 tipo . LIST vars2 COLON
    (38) vars2 -> . ID varsr

    LIST            shift and go to state 30
    ID              shift and go to state 31

    vars2                          shift and go to state 29

state 20

    (69) tipo -> INT .

    LIST            reduce using rule 69 (tipo -> INT .)
    ID              reduce using rule 69 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 69 (tipo -> INT .)


state 21

    (70) tipo -> FLOAT .

    LIST            reduce using rule 70 (tipo -> FLOAT .)
    ID              reduce using rule 70 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 70 (tipo -> FLOAT .)


state 22

    (71) tipo -> BOOL .

    LIST            reduce using rule 71 (tipo -> BOOL .)
    ID              reduce using rule 71 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 71 (tipo -> BOOL .)


state 23

    (72) tipo -> STRING .

    LIST            reduce using rule 72 (tipo -> STRING .)
    ID              reduce using rule 72 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 72 (tipo -> STRING .)


state 24

    (73) tipo -> CID .

    LIST            reduce using rule 73 (tipo -> CID .)
    ID              reduce using rule 73 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 73 (tipo -> CID .)


state 25

    (111) body -> LLAVEIZQ body2 . funr MAIN PARIZQ PARDER bloque LLAVEDER
    (114) funr -> . fun funr
    (115) funr -> . empty
    (99) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (118) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    MAIN            reduce using rule 118 (empty -> .)
    FUN             reduce using rule 118 (empty -> .)
    PRIVATE         shift and go to state 14

    funr                           shift and go to state 32
    fun                            shift and go to state 33
    empty                          shift and go to state 34
    vars3                          shift and go to state 35

state 26

    (112) body2 -> vars .

    PRIVATE         reduce using rule 112 (body2 -> vars .)
    MAIN            reduce using rule 112 (body2 -> vars .)
    FUN             reduce using rule 112 (body2 -> vars .)


state 27

    (113) body2 -> empty .
    (40) vars3 -> empty .

    PRIVATE         reduce using rule 113 (body2 -> empty .)
    MAIN            reduce using rule 113 (body2 -> empty .)
    FUN             reduce using rule 113 (body2 -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 28

    (3) class2 -> DOSPUNTOS ID PARIZQ . vars2 PARDER
    (38) vars2 -> . ID varsr

    ID              shift and go to state 31

    vars2                          shift and go to state 36

state 29

    (34) vars -> vars3 tipo vars2 . COLON

    COLON           shift and go to state 37


state 30

    (35) vars -> vars3 tipo LIST . vars2 COLON
    (38) vars2 -> . ID varsr

    ID              shift and go to state 31

    vars2                          shift and go to state 38

state 31

    (38) vars2 -> ID . varsr
    (36) varsr -> . COMA ID varsr
    (37) varsr -> . empty
    (118) empty -> .

    COMA            shift and go to state 40
    COLON           reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)

    varsr                          shift and go to state 39
    empty                          shift and go to state 41

state 32

    (111) body -> LLAVEIZQ body2 funr . MAIN PARIZQ PARDER bloque LLAVEDER

    MAIN            shift and go to state 42


state 33

    (114) funr -> fun . funr
    (114) funr -> . fun funr
    (115) funr -> . empty
    (99) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (118) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    MAIN            reduce using rule 118 (empty -> .)
    FUN             reduce using rule 118 (empty -> .)
    PRIVATE         shift and go to state 14

    fun                            shift and go to state 33
    funr                           shift and go to state 43
    empty                          shift and go to state 34
    vars3                          shift and go to state 35

state 34

    (115) funr -> empty .
    (40) vars3 -> empty .

    MAIN            reduce using rule 115 (funr -> empty .)
    FUN             reduce using rule 40 (vars3 -> empty .)


state 35

    (99) fun -> vars3 . FUN ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 44


state 36

    (3) class2 -> DOSPUNTOS ID PARIZQ vars2 . PARDER

    PARDER          shift and go to state 45


state 37

    (34) vars -> vars3 tipo vars2 COLON .

    PARDER          reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    PRIVATE         reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    MAIN            reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    FUN             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    ID              reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    IF              reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    WRITE           reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    FOR             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    WHILE           reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    WHEN            reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    RETURN          reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    LLAVEDER        reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)


state 38

    (35) vars -> vars3 tipo LIST vars2 . COLON

    COLON           shift and go to state 46


state 39

    (38) vars2 -> ID varsr .

    COLON           reduce using rule 38 (vars2 -> ID varsr .)
    PARDER          reduce using rule 38 (vars2 -> ID varsr .)


state 40

    (36) varsr -> COMA . ID varsr

    ID              shift and go to state 47


state 41

    (37) varsr -> empty .

    COLON           reduce using rule 37 (varsr -> empty .)
    PARDER          reduce using rule 37 (varsr -> empty .)


state 42

    (111) body -> LLAVEIZQ body2 funr MAIN . PARIZQ PARDER bloque LLAVEDER

    PARIZQ          shift and go to state 48


state 43

    (114) funr -> fun funr .

    MAIN            reduce using rule 114 (funr -> fun funr .)


state 44

    (99) fun -> vars3 FUN . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 49


state 45

    (3) class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .

    LLAVEIZQ        reduce using rule 3 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)


state 46

    (35) vars -> vars3 tipo LIST vars2 COLON .

    PARDER          reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    PRIVATE         reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    MAIN            reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    FUN             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    ID              reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    IF              reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    WRITE           reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    FOR             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    WHILE           reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    WHEN            reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    RETURN          reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    LLAVEDER        reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)


state 47

    (36) varsr -> COMA ID . varsr
    (36) varsr -> . COMA ID varsr
    (37) varsr -> . empty
    (118) empty -> .

    COMA            shift and go to state 40
    COLON           reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)

    varsr                          shift and go to state 50
    empty                          shift and go to state 41

state 48

    (111) body -> LLAVEIZQ body2 funr MAIN PARIZQ . PARDER bloque LLAVEDER

    PARDER          shift and go to state 51


state 49

    (99) fun -> vars3 FUN ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 52


state 50

    (36) varsr -> COMA ID varsr .

    COLON           reduce using rule 36 (varsr -> COMA ID varsr .)
    PARDER          reduce using rule 36 (varsr -> COMA ID varsr .)


state 51

    (111) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER . bloque LLAVEDER
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 53

    bloque                         shift and go to state 54

state 52

    (99) fun -> vars3 FUN ID PARIZQ . fun2 PARDER fun3 funbody
    (100) fun2 -> . tipo ID funparamr
    (101) fun2 -> . empty
    (69) tipo -> . INT
    (70) tipo -> . FLOAT
    (71) tipo -> . BOOL
    (72) tipo -> . STRING
    (73) tipo -> . CID
    (118) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    CID             shift and go to state 24
    PARDER          reduce using rule 118 (empty -> .)

    fun2                           shift and go to state 55
    tipo                           shift and go to state 56
    empty                          shift and go to state 57

state 53

    (8) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2
    (58) condicion -> . IF condicion2 condicionr estatutor
    (64) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (89) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (93) while -> . WHILE PARIZQ expresion PARDER bloque
    (94) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (116) llamada -> . ID PARIZQ expresion expresionr PARDER
    (117) llamada -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 67
    IF              shift and go to state 68
    WRITE           shift and go to state 69
    FOR             shift and go to state 70
    WHILE           shift and go to state 71
    WHEN            shift and go to state 72
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! WRITE           [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! WHEN            [ reduce using rule 118 (empty -> .) ]

    estatuto                       shift and go to state 58
    asignacion                     shift and go to state 59
    condicion                      shift and go to state 60
    escritura                      shift and go to state 61
    for                            shift and go to state 62
    while                          shift and go to state 63
    when                           shift and go to state 64
    llamada                        shift and go to state 65
    empty                          shift and go to state 66

state 54

    (111) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque . LLAVEDER

    LLAVEDER        shift and go to state 73


state 55

    (99) fun -> vars3 FUN ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 74


state 56

    (100) fun2 -> tipo . ID funparamr

    ID              shift and go to state 75


state 57

    (101) fun2 -> empty .

    PARDER          reduce using rule 101 (fun2 -> empty .)


state 58

    (8) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (9) bloque2 -> . RETURN bloque3
    (10) bloque2 -> . empty
    (118) empty -> .

    RETURN          shift and go to state 77
    LLAVEDER        reduce using rule 118 (empty -> .)

    bloque2                        shift and go to state 76
    empty                          shift and go to state 78

state 59

    (41) estatuto -> asignacion . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2
    (58) condicion -> . IF condicion2 condicionr estatutor
    (64) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (89) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (93) while -> . WHILE PARIZQ expresion PARDER bloque
    (94) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (116) llamada -> . ID PARIZQ expresion expresionr PARDER
    (117) llamada -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 67
    IF              shift and go to state 68
    WRITE           shift and go to state 69
    FOR             shift and go to state 70
    WHILE           shift and go to state 71
    WHEN            shift and go to state 72
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! WRITE           [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! WHEN            [ reduce using rule 118 (empty -> .) ]

    asignacion                     shift and go to state 59
    estatuto                       shift and go to state 79
    condicion                      shift and go to state 60
    escritura                      shift and go to state 61
    for                            shift and go to state 62
    while                          shift and go to state 63
    when                           shift and go to state 64
    llamada                        shift and go to state 65
    empty                          shift and go to state 66

state 60

    (42) estatuto -> condicion . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2
    (58) condicion -> . IF condicion2 condicionr estatutor
    (64) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (89) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (93) while -> . WHILE PARIZQ expresion PARDER bloque
    (94) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (116) llamada -> . ID PARIZQ expresion expresionr PARDER
    (117) llamada -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 67
    IF              shift and go to state 68
    WRITE           shift and go to state 69
    FOR             shift and go to state 70
    WHILE           shift and go to state 71
    WHEN            shift and go to state 72
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! WRITE           [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! WHEN            [ reduce using rule 118 (empty -> .) ]

    condicion                      shift and go to state 60
    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 59
    escritura                      shift and go to state 61
    for                            shift and go to state 62
    while                          shift and go to state 63
    when                           shift and go to state 64
    llamada                        shift and go to state 65
    empty                          shift and go to state 66

state 61

    (43) estatuto -> escritura . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2
    (58) condicion -> . IF condicion2 condicionr estatutor
    (64) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (89) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (93) while -> . WHILE PARIZQ expresion PARDER bloque
    (94) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (116) llamada -> . ID PARIZQ expresion expresionr PARDER
    (117) llamada -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 67
    IF              shift and go to state 68
    WRITE           shift and go to state 69
    FOR             shift and go to state 70
    WHILE           shift and go to state 71
    WHEN            shift and go to state 72
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! WRITE           [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! WHEN            [ reduce using rule 118 (empty -> .) ]

    escritura                      shift and go to state 61
    estatuto                       shift and go to state 81
    asignacion                     shift and go to state 59
    condicion                      shift and go to state 60
    for                            shift and go to state 62
    while                          shift and go to state 63
    when                           shift and go to state 64
    llamada                        shift and go to state 65
    empty                          shift and go to state 66

state 62

    (44) estatuto -> for . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2
    (58) condicion -> . IF condicion2 condicionr estatutor
    (64) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (89) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (93) while -> . WHILE PARIZQ expresion PARDER bloque
    (94) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (116) llamada -> . ID PARIZQ expresion expresionr PARDER
    (117) llamada -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 67
    IF              shift and go to state 68
    WRITE           shift and go to state 69
    FOR             shift and go to state 70
    WHILE           shift and go to state 71
    WHEN            shift and go to state 72
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! WRITE           [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! WHEN            [ reduce using rule 118 (empty -> .) ]

    for                            shift and go to state 62
    estatuto                       shift and go to state 82
    asignacion                     shift and go to state 59
    condicion                      shift and go to state 60
    escritura                      shift and go to state 61
    while                          shift and go to state 63
    when                           shift and go to state 64
    llamada                        shift and go to state 65
    empty                          shift and go to state 66

state 63

    (45) estatuto -> while . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2
    (58) condicion -> . IF condicion2 condicionr estatutor
    (64) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (89) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (93) while -> . WHILE PARIZQ expresion PARDER bloque
    (94) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (116) llamada -> . ID PARIZQ expresion expresionr PARDER
    (117) llamada -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 67
    IF              shift and go to state 68
    WRITE           shift and go to state 69
    FOR             shift and go to state 70
    WHILE           shift and go to state 71
    WHEN            shift and go to state 72
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! WRITE           [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! WHEN            [ reduce using rule 118 (empty -> .) ]

    while                          shift and go to state 63
    estatuto                       shift and go to state 83
    asignacion                     shift and go to state 59
    condicion                      shift and go to state 60
    escritura                      shift and go to state 61
    for                            shift and go to state 62
    when                           shift and go to state 64
    llamada                        shift and go to state 65
    empty                          shift and go to state 66

state 64

    (46) estatuto -> when . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2
    (58) condicion -> . IF condicion2 condicionr estatutor
    (64) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (89) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (93) while -> . WHILE PARIZQ expresion PARDER bloque
    (94) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (116) llamada -> . ID PARIZQ expresion expresionr PARDER
    (117) llamada -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 67
    IF              shift and go to state 68
    WRITE           shift and go to state 69
    FOR             shift and go to state 70
    WHILE           shift and go to state 71
    WHEN            shift and go to state 72
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! WRITE           [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! WHEN            [ reduce using rule 118 (empty -> .) ]

    when                           shift and go to state 64
    estatuto                       shift and go to state 84
    asignacion                     shift and go to state 59
    condicion                      shift and go to state 60
    escritura                      shift and go to state 61
    for                            shift and go to state 62
    while                          shift and go to state 63
    llamada                        shift and go to state 65
    empty                          shift and go to state 66

state 65

    (47) estatuto -> llamada . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2
    (58) condicion -> . IF condicion2 condicionr estatutor
    (64) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (89) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (93) while -> . WHILE PARIZQ expresion PARDER bloque
    (94) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (116) llamada -> . ID PARIZQ expresion expresionr PARDER
    (117) llamada -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 67
    IF              shift and go to state 68
    WRITE           shift and go to state 69
    FOR             shift and go to state 70
    WHILE           shift and go to state 71
    WHEN            shift and go to state 72
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! WRITE           [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! WHEN            [ reduce using rule 118 (empty -> .) ]

    llamada                        shift and go to state 65
    estatuto                       shift and go to state 85
    asignacion                     shift and go to state 59
    condicion                      shift and go to state 60
    escritura                      shift and go to state 61
    for                            shift and go to state 62
    while                          shift and go to state 63
    when                           shift and go to state 64
    empty                          shift and go to state 66

state 66

    (48) estatuto -> empty .
    (117) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 48 (estatuto -> empty .)
    RETURN          reduce using rule 48 (estatuto -> empty .)
    LLAVEDER        reduce using rule 48 (estatuto -> empty .)
    ID              reduce using rule 117 (llamada -> empty .)
    IF              reduce using rule 117 (llamada -> empty .)
    WRITE           reduce using rule 117 (llamada -> empty .)
    FOR             reduce using rule 117 (llamada -> empty .)
    WHILE           reduce using rule 117 (llamada -> empty .)
    WHEN            reduce using rule 117 (llamada -> empty .)

  ! RETURN          [ reduce using rule 117 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 117 (llamada -> empty .) ]


state 67

    (49) asignacion -> ID . asignacion3 IGUAL asignacion2
    (116) llamada -> ID . PARIZQ expresion expresionr PARDER
    (55) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (56) asignacion3 -> . PUNTO ID
    (57) asignacion3 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 87
    CORCHIZQ        shift and go to state 88
    PUNTO           shift and go to state 89
    IGUAL           reduce using rule 118 (empty -> .)

    asignacion3                    shift and go to state 86
    empty                          shift and go to state 90

state 68

    (58) condicion -> IF . condicion2 condicionr estatutor
    (59) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 92

    condicion2                     shift and go to state 91

state 69

    (64) escritura -> WRITE . PARIZQ esc1 esc2 PARDER

    PARIZQ          shift and go to state 93


state 70

    (89) for -> FOR . PARIZQ ID IN for2 PARDER bloque

    PARIZQ          shift and go to state 94


state 71

    (93) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 95


state 72

    (94) when -> WHEN . PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER

    PARIZQ          shift and go to state 96


state 73

    (111) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER .

    $end            reduce using rule 111 (body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER .)


state 74

    (99) fun -> vars3 FUN ID PARIZQ fun2 PARDER . fun3 funbody
    (104) fun3 -> . DOSPUNTOS tipo
    (105) fun3 -> . empty
    (118) empty -> .

    DOSPUNTOS       shift and go to state 98
    LLAVEIZQ        reduce using rule 118 (empty -> .)

    fun3                           shift and go to state 97
    empty                          shift and go to state 99

state 75

    (100) fun2 -> tipo ID . funparamr
    (102) funparamr -> . COMA tipo ID funparamr
    (103) funparamr -> . empty
    (118) empty -> .

    COMA            shift and go to state 101
    PARDER          reduce using rule 118 (empty -> .)

    funparamr                      shift and go to state 100
    empty                          shift and go to state 102

state 76

    (8) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 103


state 77

    (9) bloque2 -> RETURN . bloque3
    (11) bloque3 -> . expresion
    (12) bloque3 -> . empty
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (118) empty -> .
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    LLAVEDER        reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114

  ! ID              [ reduce using rule 118 (empty -> .) ]

    bloque3                        shift and go to state 104
    expresion                      shift and go to state 105
    empty                          shift and go to state 106
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112

state 78

    (10) bloque2 -> empty .

    LLAVEDER        reduce using rule 10 (bloque2 -> empty .)


state 79

    (41) estatuto -> asignacion estatuto .

    RETURN          reduce using rule 41 (estatuto -> asignacion estatuto .)
    LLAVEDER        reduce using rule 41 (estatuto -> asignacion estatuto .)


state 80

    (42) estatuto -> condicion estatuto .

    RETURN          reduce using rule 42 (estatuto -> condicion estatuto .)
    LLAVEDER        reduce using rule 42 (estatuto -> condicion estatuto .)


state 81

    (43) estatuto -> escritura estatuto .

    RETURN          reduce using rule 43 (estatuto -> escritura estatuto .)
    LLAVEDER        reduce using rule 43 (estatuto -> escritura estatuto .)


state 82

    (44) estatuto -> for estatuto .

    RETURN          reduce using rule 44 (estatuto -> for estatuto .)
    LLAVEDER        reduce using rule 44 (estatuto -> for estatuto .)


state 83

    (45) estatuto -> while estatuto .

    RETURN          reduce using rule 45 (estatuto -> while estatuto .)
    LLAVEDER        reduce using rule 45 (estatuto -> while estatuto .)


state 84

    (46) estatuto -> when estatuto .

    RETURN          reduce using rule 46 (estatuto -> when estatuto .)
    LLAVEDER        reduce using rule 46 (estatuto -> when estatuto .)


state 85

    (47) estatuto -> llamada estatuto .

    RETURN          reduce using rule 47 (estatuto -> llamada estatuto .)
    LLAVEDER        reduce using rule 47 (estatuto -> llamada estatuto .)


state 86

    (49) asignacion -> ID asignacion3 . IGUAL asignacion2

    IGUAL           shift and go to state 115


state 87

    (116) llamada -> ID PARIZQ . expresion expresionr PARDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion                      shift and go to state 116
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 88

    (55) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion                      shift and go to state 118
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 89

    (56) asignacion3 -> PUNTO . ID

    ID              shift and go to state 119


state 90

    (57) asignacion3 -> empty .

    IGUAL           reduce using rule 57 (asignacion3 -> empty .)


state 91

    (58) condicion -> IF condicion2 . condicionr estatutor
    (60) condicionr -> . ELSE IF condicion2
    (61) condicionr -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 121
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

  ! ELSE            [ reduce using rule 118 (empty -> .) ]

    condicionr                     shift and go to state 120
    empty                          shift and go to state 122

state 92

    (59) condicion2 -> PARIZQ . expresion PARDER bloque
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion                      shift and go to state 123
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 93

    (64) escritura -> WRITE PARIZQ . esc1 esc2 PARDER
    (65) esc1 -> . expresion
    (66) esc1 -> . STRING
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 126
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! STRING          [ reduce using rule 118 (empty -> .) ]

    esc1                           shift and go to state 124
    expresion                      shift and go to state 125
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 94

    (89) for -> FOR PARIZQ . ID IN for2 PARDER bloque

    ID              shift and go to state 127


state 95

    (93) while -> WHILE PARIZQ . expresion PARDER bloque
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion                      shift and go to state 128
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 96

    (94) when -> WHEN PARIZQ . expresion PARDER LLAVEIZQ when2 LLAVEDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion                      shift and go to state 129
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 97

    (99) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 . funbody
    (106) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 131

    funbody                        shift and go to state 130

state 98

    (104) fun3 -> DOSPUNTOS . tipo
    (69) tipo -> . INT
    (70) tipo -> . FLOAT
    (71) tipo -> . BOOL
    (72) tipo -> . STRING
    (73) tipo -> . CID

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    CID             shift and go to state 24

    tipo                           shift and go to state 132

state 99

    (105) fun3 -> empty .

    LLAVEIZQ        reduce using rule 105 (fun3 -> empty .)


state 100

    (100) fun2 -> tipo ID funparamr .

    PARDER          reduce using rule 100 (fun2 -> tipo ID funparamr .)


state 101

    (102) funparamr -> COMA . tipo ID funparamr
    (69) tipo -> . INT
    (70) tipo -> . FLOAT
    (71) tipo -> . BOOL
    (72) tipo -> . STRING
    (73) tipo -> . CID

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 22
    STRING          shift and go to state 23
    CID             shift and go to state 24

    tipo                           shift and go to state 133

state 102

    (103) funparamr -> empty .

    PARDER          reduce using rule 103 (funparamr -> empty .)


state 103

    (8) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    LLAVEDER        reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ID              reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IN              reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    BOOLVAL         reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRING          reduce using rule 8 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 104

    (9) bloque2 -> RETURN bloque3 .

    LLAVEDER        reduce using rule 9 (bloque2 -> RETURN bloque3 .)


state 105

    (11) bloque3 -> expresion .

    LLAVEDER        reduce using rule 11 (bloque3 -> expresion .)


state 106

    (12) bloque3 -> empty .
    (88) factor2 -> empty .

    LLAVEDER        reduce using rule 12 (bloque3 -> empty .)
    ID              reduce using rule 88 (factor2 -> empty .)
    INTNUM          reduce using rule 88 (factor2 -> empty .)
    FLOATNUM        reduce using rule 88 (factor2 -> empty .)
    BOOLVAL         reduce using rule 88 (factor2 -> empty .)
    STRING          reduce using rule 88 (factor2 -> empty .)


state 107

    (21) expresion -> exp . oplog
    (27) oplog -> . MAYORQUE exp
    (28) oplog -> . MENORQUE exp
    (29) oplog -> . DIFERENTE exp
    (30) oplog -> . MAYOROIGUAL exp
    (31) oplog -> . MENOROIGUAL exp
    (32) oplog -> . IGUALIGUAL exp
    (33) oplog -> . empty
    (118) empty -> .

    MAYORQUE        shift and go to state 135
    MENORQUE        shift and go to state 136
    DIFERENTE       shift and go to state 137
    MAYOROIGUAL     shift and go to state 138
    MENOROIGUAL     shift and go to state 139
    IGUALIGUAL      shift and go to state 140
    LLAVEDER        reduce using rule 118 (empty -> .)
    COMA            reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)
    CORCHDER        reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CORCHIZQ        reduce using rule 118 (empty -> .)

    oplog                          shift and go to state 134
    empty                          shift and go to state 141

state 108

    (22) expresion -> ID . PARIZQ expresion2 PARDER

    PARIZQ          shift and go to state 142


state 109

    (74) factor -> PARIZQ . expresion PARDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion                      shift and go to state 143
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 110

    (80) exp -> termino . expr
    (81) expr -> . MAS termino expr
    (82) expr -> . MENOS termino expr
    (83) expr -> . empty
    (118) empty -> .

    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    MAYORQUE        reduce using rule 118 (empty -> .)
    MENORQUE        reduce using rule 118 (empty -> .)
    DIFERENTE       reduce using rule 118 (empty -> .)
    MAYOROIGUAL     reduce using rule 118 (empty -> .)
    MENOROIGUAL     reduce using rule 118 (empty -> .)
    IGUALIGUAL      reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    COMA            reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)
    CORCHDER        reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CORCHIZQ        reduce using rule 118 (empty -> .)

    expr                           shift and go to state 144
    empty                          shift and go to state 147

state 111

    (79) termino -> factor . terminor
    (76) terminor -> . POR factor terminor
    (77) terminor -> . SOBRE factor terminor
    (78) terminor -> . empty
    (118) empty -> .

    POR             shift and go to state 149
    SOBRE           shift and go to state 150
    MAS             reduce using rule 118 (empty -> .)
    MENOS           reduce using rule 118 (empty -> .)
    MAYORQUE        reduce using rule 118 (empty -> .)
    MENORQUE        reduce using rule 118 (empty -> .)
    DIFERENTE       reduce using rule 118 (empty -> .)
    MAYOROIGUAL     reduce using rule 118 (empty -> .)
    MENOROIGUAL     reduce using rule 118 (empty -> .)
    IGUALIGUAL      reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    COMA            reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)
    CORCHDER        reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CORCHIZQ        reduce using rule 118 (empty -> .)

    terminor                       shift and go to state 148
    empty                          shift and go to state 151

state 112

    (75) factor -> factor2 . varcte varcter
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 153
    INTNUM          shift and go to state 154
    FLOATNUM        shift and go to state 155
    BOOLVAL         shift and go to state 156
    STRING          shift and go to state 157

    varcte                         shift and go to state 152

state 113

    (86) factor2 -> MAS .

    ID              reduce using rule 86 (factor2 -> MAS .)
    INTNUM          reduce using rule 86 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 86 (factor2 -> MAS .)
    BOOLVAL         reduce using rule 86 (factor2 -> MAS .)
    STRING          reduce using rule 86 (factor2 -> MAS .)


state 114

    (87) factor2 -> MENOS .

    ID              reduce using rule 87 (factor2 -> MENOS .)
    INTNUM          reduce using rule 87 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 87 (factor2 -> MENOS .)
    BOOLVAL         reduce using rule 87 (factor2 -> MENOS .)
    STRING          reduce using rule 87 (factor2 -> MENOS .)


state 115

    (49) asignacion -> ID asignacion3 IGUAL . asignacion2
    (50) asignacion2 -> . expresion
    (51) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (52) asignacion2 -> . READ PARIZQ STRING PARDER
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CORCHDER        shift and go to state 160
    READ            shift and go to state 161
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    asignacion2                    shift and go to state 158
    expresion                      shift and go to state 159
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 116

    (116) llamada -> ID PARIZQ expresion . expresionr PARDER
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (118) empty -> .

    COMA            shift and go to state 163
    PARDER          reduce using rule 118 (empty -> .)

    expresionr                     shift and go to state 162
    empty                          shift and go to state 164

state 117

    (88) factor2 -> empty .

    ID              reduce using rule 88 (factor2 -> empty .)
    INTNUM          reduce using rule 88 (factor2 -> empty .)
    FLOATNUM        reduce using rule 88 (factor2 -> empty .)
    BOOLVAL         reduce using rule 88 (factor2 -> empty .)
    STRING          reduce using rule 88 (factor2 -> empty .)


state 118

    (55) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 165


state 119

    (56) asignacion3 -> PUNTO ID .

    IGUAL           reduce using rule 56 (asignacion3 -> PUNTO ID .)


state 120

    (58) condicion -> IF condicion2 condicionr . estatutor
    (62) estatutor -> . ELSE bloque
    (63) estatutor -> . empty
    (118) empty -> .

    ELSE            shift and go to state 167
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)

    estatutor                      shift and go to state 166
    empty                          shift and go to state 168

state 121

    (60) condicionr -> ELSE . IF condicion2

    IF              shift and go to state 169


state 122

    (61) condicionr -> empty .

    ELSE            reduce using rule 61 (condicionr -> empty .)
    ID              reduce using rule 61 (condicionr -> empty .)
    IF              reduce using rule 61 (condicionr -> empty .)
    WRITE           reduce using rule 61 (condicionr -> empty .)
    FOR             reduce using rule 61 (condicionr -> empty .)
    WHILE           reduce using rule 61 (condicionr -> empty .)
    WHEN            reduce using rule 61 (condicionr -> empty .)
    RETURN          reduce using rule 61 (condicionr -> empty .)
    LLAVEDER        reduce using rule 61 (condicionr -> empty .)


state 123

    (59) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 170


state 124

    (64) escritura -> WRITE PARIZQ esc1 . esc2 PARDER
    (67) esc2 -> . COMA esc1 esc2
    (68) esc2 -> . empty
    (118) empty -> .

    COMA            shift and go to state 172
    PARDER          reduce using rule 118 (empty -> .)

    esc2                           shift and go to state 171
    empty                          shift and go to state 173

state 125

    (65) esc1 -> expresion .

    COMA            reduce using rule 65 (esc1 -> expresion .)
    PARDER          reduce using rule 65 (esc1 -> expresion .)


state 126

    (66) esc1 -> STRING .

    COMA            reduce using rule 66 (esc1 -> STRING .)
    PARDER          reduce using rule 66 (esc1 -> STRING .)


state 127

    (89) for -> FOR PARIZQ ID . IN for2 PARDER bloque

    IN              shift and go to state 174


state 128

    (93) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 175


state 129

    (94) when -> WHEN PARIZQ expresion . PARDER LLAVEIZQ when2 LLAVEDER

    PARDER          shift and go to state 176


state 130

    (99) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .

    PRIVATE         reduce using rule 99 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    FUN             reduce using rule 99 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    MAIN            reduce using rule 99 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)


state 131

    (106) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (107) opc1 -> . vars
    (108) opc1 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (118) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    INT             reduce using rule 118 (empty -> .)
    FLOAT           reduce using rule 118 (empty -> .)
    BOOL            reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    CID             reduce using rule 118 (empty -> .)
    PRIVATE         shift and go to state 14

    opc1                           shift and go to state 177
    vars                           shift and go to state 178
    empty                          shift and go to state 179
    vars3                          shift and go to state 13

state 132

    (104) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 104 (fun3 -> DOSPUNTOS tipo .)


state 133

    (102) funparamr -> COMA tipo . ID funparamr

    ID              shift and go to state 180


state 134

    (21) expresion -> exp oplog .

    LLAVEDER        reduce using rule 21 (expresion -> exp oplog .)
    COMA            reduce using rule 21 (expresion -> exp oplog .)
    PARDER          reduce using rule 21 (expresion -> exp oplog .)
    CORCHDER        reduce using rule 21 (expresion -> exp oplog .)
    ID              reduce using rule 21 (expresion -> exp oplog .)
    IF              reduce using rule 21 (expresion -> exp oplog .)
    WRITE           reduce using rule 21 (expresion -> exp oplog .)
    FOR             reduce using rule 21 (expresion -> exp oplog .)
    WHILE           reduce using rule 21 (expresion -> exp oplog .)
    WHEN            reduce using rule 21 (expresion -> exp oplog .)
    RETURN          reduce using rule 21 (expresion -> exp oplog .)
    CORCHIZQ        reduce using rule 21 (expresion -> exp oplog .)


state 135

    (27) oplog -> MAYORQUE . exp
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    exp                            shift and go to state 181
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 136

    (28) oplog -> MENORQUE . exp
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    exp                            shift and go to state 182
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 137

    (29) oplog -> DIFERENTE . exp
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    exp                            shift and go to state 183
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 138

    (30) oplog -> MAYOROIGUAL . exp
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    exp                            shift and go to state 184
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 139

    (31) oplog -> MENOROIGUAL . exp
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    exp                            shift and go to state 185
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 140

    (32) oplog -> IGUALIGUAL . exp
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    exp                            shift and go to state 186
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 141

    (33) oplog -> empty .

    LLAVEDER        reduce using rule 33 (oplog -> empty .)
    COMA            reduce using rule 33 (oplog -> empty .)
    PARDER          reduce using rule 33 (oplog -> empty .)
    CORCHDER        reduce using rule 33 (oplog -> empty .)
    ID              reduce using rule 33 (oplog -> empty .)
    IF              reduce using rule 33 (oplog -> empty .)
    WRITE           reduce using rule 33 (oplog -> empty .)
    FOR             reduce using rule 33 (oplog -> empty .)
    WHILE           reduce using rule 33 (oplog -> empty .)
    WHEN            reduce using rule 33 (oplog -> empty .)
    RETURN          reduce using rule 33 (oplog -> empty .)
    CORCHIZQ        reduce using rule 33 (oplog -> empty .)


state 142

    (22) expresion -> ID PARIZQ . expresion2 PARDER
    (25) expresion2 -> . expresion expresionr
    (26) expresion2 -> . empty
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (118) empty -> .
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARDER          reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion2                     shift and go to state 187
    expresion                      shift and go to state 188
    empty                          shift and go to state 189
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112

state 143

    (74) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 190


state 144

    (80) exp -> termino expr .

    MAYORQUE        reduce using rule 80 (exp -> termino expr .)
    MENORQUE        reduce using rule 80 (exp -> termino expr .)
    DIFERENTE       reduce using rule 80 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 80 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 80 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 80 (exp -> termino expr .)
    LLAVEDER        reduce using rule 80 (exp -> termino expr .)
    COMA            reduce using rule 80 (exp -> termino expr .)
    PARDER          reduce using rule 80 (exp -> termino expr .)
    CORCHDER        reduce using rule 80 (exp -> termino expr .)
    ID              reduce using rule 80 (exp -> termino expr .)
    IF              reduce using rule 80 (exp -> termino expr .)
    WRITE           reduce using rule 80 (exp -> termino expr .)
    FOR             reduce using rule 80 (exp -> termino expr .)
    WHILE           reduce using rule 80 (exp -> termino expr .)
    WHEN            reduce using rule 80 (exp -> termino expr .)
    RETURN          reduce using rule 80 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 80 (exp -> termino expr .)


state 145

    (81) expr -> MAS . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    termino                        shift and go to state 191
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 146

    (82) expr -> MENOS . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    termino                        shift and go to state 192
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 147

    (83) expr -> empty .

    MAYORQUE        reduce using rule 83 (expr -> empty .)
    MENORQUE        reduce using rule 83 (expr -> empty .)
    DIFERENTE       reduce using rule 83 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 83 (expr -> empty .)
    MENOROIGUAL     reduce using rule 83 (expr -> empty .)
    IGUALIGUAL      reduce using rule 83 (expr -> empty .)
    LLAVEDER        reduce using rule 83 (expr -> empty .)
    COMA            reduce using rule 83 (expr -> empty .)
    PARDER          reduce using rule 83 (expr -> empty .)
    CORCHDER        reduce using rule 83 (expr -> empty .)
    ID              reduce using rule 83 (expr -> empty .)
    IF              reduce using rule 83 (expr -> empty .)
    WRITE           reduce using rule 83 (expr -> empty .)
    FOR             reduce using rule 83 (expr -> empty .)
    WHILE           reduce using rule 83 (expr -> empty .)
    WHEN            reduce using rule 83 (expr -> empty .)
    RETURN          reduce using rule 83 (expr -> empty .)
    CORCHIZQ        reduce using rule 83 (expr -> empty .)


state 148

    (79) termino -> factor terminor .

    MAS             reduce using rule 79 (termino -> factor terminor .)
    MENOS           reduce using rule 79 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 79 (termino -> factor terminor .)
    MENORQUE        reduce using rule 79 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 79 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 79 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 79 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 79 (termino -> factor terminor .)
    LLAVEDER        reduce using rule 79 (termino -> factor terminor .)
    COMA            reduce using rule 79 (termino -> factor terminor .)
    PARDER          reduce using rule 79 (termino -> factor terminor .)
    CORCHDER        reduce using rule 79 (termino -> factor terminor .)
    ID              reduce using rule 79 (termino -> factor terminor .)
    IF              reduce using rule 79 (termino -> factor terminor .)
    WRITE           reduce using rule 79 (termino -> factor terminor .)
    FOR             reduce using rule 79 (termino -> factor terminor .)
    WHILE           reduce using rule 79 (termino -> factor terminor .)
    WHEN            reduce using rule 79 (termino -> factor terminor .)
    RETURN          reduce using rule 79 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 79 (termino -> factor terminor .)


state 149

    (76) terminor -> POR . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    factor                         shift and go to state 193
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 150

    (77) terminor -> SOBRE . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    ID              reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

    factor                         shift and go to state 194
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 151

    (78) terminor -> empty .

    MAS             reduce using rule 78 (terminor -> empty .)
    MENOS           reduce using rule 78 (terminor -> empty .)
    MAYORQUE        reduce using rule 78 (terminor -> empty .)
    MENORQUE        reduce using rule 78 (terminor -> empty .)
    DIFERENTE       reduce using rule 78 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 78 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 78 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 78 (terminor -> empty .)
    LLAVEDER        reduce using rule 78 (terminor -> empty .)
    COMA            reduce using rule 78 (terminor -> empty .)
    PARDER          reduce using rule 78 (terminor -> empty .)
    CORCHDER        reduce using rule 78 (terminor -> empty .)
    ID              reduce using rule 78 (terminor -> empty .)
    IF              reduce using rule 78 (terminor -> empty .)
    WRITE           reduce using rule 78 (terminor -> empty .)
    FOR             reduce using rule 78 (terminor -> empty .)
    WHILE           reduce using rule 78 (terminor -> empty .)
    WHEN            reduce using rule 78 (terminor -> empty .)
    RETURN          reduce using rule 78 (terminor -> empty .)
    CORCHIZQ        reduce using rule 78 (terminor -> empty .)


state 152

    (75) factor -> factor2 varcte . varcter
    (84) varcter -> . COMA varcte varcter
    (85) varcter -> . empty
    (118) empty -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 196
    POR             reduce using rule 118 (empty -> .)
    SOBRE           reduce using rule 118 (empty -> .)
    MAS             reduce using rule 118 (empty -> .)
    MENOS           reduce using rule 118 (empty -> .)
    MAYORQUE        reduce using rule 118 (empty -> .)
    MENORQUE        reduce using rule 118 (empty -> .)
    DIFERENTE       reduce using rule 118 (empty -> .)
    MAYOROIGUAL     reduce using rule 118 (empty -> .)
    MENOROIGUAL     reduce using rule 118 (empty -> .)
    IGUALIGUAL      reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)
    CORCHDER        reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CORCHIZQ        reduce using rule 118 (empty -> .)

  ! COMA            [ reduce using rule 118 (empty -> .) ]

    varcter                        shift and go to state 195
    empty                          shift and go to state 197

state 153

    (13) varcte -> ID .
    (18) varcte -> ID . CORCHIZQ varcte CORCHDER
    (19) varcte -> ID . PUNTO ID
    (20) varcte -> ID . PARIZQ expresion2 PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    COMA            reduce using rule 13 (varcte -> ID .)
    POR             reduce using rule 13 (varcte -> ID .)
    SOBRE           reduce using rule 13 (varcte -> ID .)
    MAS             reduce using rule 13 (varcte -> ID .)
    MENOS           reduce using rule 13 (varcte -> ID .)
    MAYORQUE        reduce using rule 13 (varcte -> ID .)
    MENORQUE        reduce using rule 13 (varcte -> ID .)
    DIFERENTE       reduce using rule 13 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 13 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 13 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 13 (varcte -> ID .)
    LLAVEDER        reduce using rule 13 (varcte -> ID .)
    PARDER          reduce using rule 13 (varcte -> ID .)
    CORCHDER        reduce using rule 13 (varcte -> ID .)
    ID              reduce using rule 13 (varcte -> ID .)
    IF              reduce using rule 13 (varcte -> ID .)
    WRITE           reduce using rule 13 (varcte -> ID .)
    FOR             reduce using rule 13 (varcte -> ID .)
    WHILE           reduce using rule 13 (varcte -> ID .)
    WHEN            reduce using rule 13 (varcte -> ID .)
    RETURN          reduce using rule 13 (varcte -> ID .)
    FLECHITA        reduce using rule 13 (varcte -> ID .)
    CORCHIZQ        shift and go to state 198
    PUNTO           shift and go to state 199
    PARIZQ          shift and go to state 200

  ! CORCHIZQ        [ reduce using rule 13 (varcte -> ID .) ]


state 154

    (14) varcte -> INTNUM .

    COMA            reduce using rule 14 (varcte -> INTNUM .)
    POR             reduce using rule 14 (varcte -> INTNUM .)
    SOBRE           reduce using rule 14 (varcte -> INTNUM .)
    MAS             reduce using rule 14 (varcte -> INTNUM .)
    MENOS           reduce using rule 14 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 14 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 14 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 14 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 14 (varcte -> INTNUM .)
    LLAVEDER        reduce using rule 14 (varcte -> INTNUM .)
    PARDER          reduce using rule 14 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 14 (varcte -> INTNUM .)
    ID              reduce using rule 14 (varcte -> INTNUM .)
    IF              reduce using rule 14 (varcte -> INTNUM .)
    WRITE           reduce using rule 14 (varcte -> INTNUM .)
    FOR             reduce using rule 14 (varcte -> INTNUM .)
    WHILE           reduce using rule 14 (varcte -> INTNUM .)
    WHEN            reduce using rule 14 (varcte -> INTNUM .)
    RETURN          reduce using rule 14 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 14 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 14 (varcte -> INTNUM .)


state 155

    (15) varcte -> FLOATNUM .

    COMA            reduce using rule 15 (varcte -> FLOATNUM .)
    POR             reduce using rule 15 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 15 (varcte -> FLOATNUM .)
    MAS             reduce using rule 15 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 15 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 15 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 15 (varcte -> FLOATNUM .)
    LLAVEDER        reduce using rule 15 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 15 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 15 (varcte -> FLOATNUM .)
    ID              reduce using rule 15 (varcte -> FLOATNUM .)
    IF              reduce using rule 15 (varcte -> FLOATNUM .)
    WRITE           reduce using rule 15 (varcte -> FLOATNUM .)
    FOR             reduce using rule 15 (varcte -> FLOATNUM .)
    WHILE           reduce using rule 15 (varcte -> FLOATNUM .)
    WHEN            reduce using rule 15 (varcte -> FLOATNUM .)
    RETURN          reduce using rule 15 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 15 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 15 (varcte -> FLOATNUM .)


state 156

    (16) varcte -> BOOLVAL .

    COMA            reduce using rule 16 (varcte -> BOOLVAL .)
    POR             reduce using rule 16 (varcte -> BOOLVAL .)
    SOBRE           reduce using rule 16 (varcte -> BOOLVAL .)
    MAS             reduce using rule 16 (varcte -> BOOLVAL .)
    MENOS           reduce using rule 16 (varcte -> BOOLVAL .)
    MAYORQUE        reduce using rule 16 (varcte -> BOOLVAL .)
    MENORQUE        reduce using rule 16 (varcte -> BOOLVAL .)
    DIFERENTE       reduce using rule 16 (varcte -> BOOLVAL .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> BOOLVAL .)
    MENOROIGUAL     reduce using rule 16 (varcte -> BOOLVAL .)
    IGUALIGUAL      reduce using rule 16 (varcte -> BOOLVAL .)
    LLAVEDER        reduce using rule 16 (varcte -> BOOLVAL .)
    PARDER          reduce using rule 16 (varcte -> BOOLVAL .)
    CORCHDER        reduce using rule 16 (varcte -> BOOLVAL .)
    ID              reduce using rule 16 (varcte -> BOOLVAL .)
    IF              reduce using rule 16 (varcte -> BOOLVAL .)
    WRITE           reduce using rule 16 (varcte -> BOOLVAL .)
    FOR             reduce using rule 16 (varcte -> BOOLVAL .)
    WHILE           reduce using rule 16 (varcte -> BOOLVAL .)
    WHEN            reduce using rule 16 (varcte -> BOOLVAL .)
    RETURN          reduce using rule 16 (varcte -> BOOLVAL .)
    CORCHIZQ        reduce using rule 16 (varcte -> BOOLVAL .)
    FLECHITA        reduce using rule 16 (varcte -> BOOLVAL .)


state 157

    (17) varcte -> STRING .

    COMA            reduce using rule 17 (varcte -> STRING .)
    POR             reduce using rule 17 (varcte -> STRING .)
    SOBRE           reduce using rule 17 (varcte -> STRING .)
    MAS             reduce using rule 17 (varcte -> STRING .)
    MENOS           reduce using rule 17 (varcte -> STRING .)
    MAYORQUE        reduce using rule 17 (varcte -> STRING .)
    MENORQUE        reduce using rule 17 (varcte -> STRING .)
    DIFERENTE       reduce using rule 17 (varcte -> STRING .)
    MAYOROIGUAL     reduce using rule 17 (varcte -> STRING .)
    MENOROIGUAL     reduce using rule 17 (varcte -> STRING .)
    IGUALIGUAL      reduce using rule 17 (varcte -> STRING .)
    LLAVEDER        reduce using rule 17 (varcte -> STRING .)
    PARDER          reduce using rule 17 (varcte -> STRING .)
    CORCHDER        reduce using rule 17 (varcte -> STRING .)
    ID              reduce using rule 17 (varcte -> STRING .)
    IF              reduce using rule 17 (varcte -> STRING .)
    WRITE           reduce using rule 17 (varcte -> STRING .)
    FOR             reduce using rule 17 (varcte -> STRING .)
    WHILE           reduce using rule 17 (varcte -> STRING .)
    WHEN            reduce using rule 17 (varcte -> STRING .)
    RETURN          reduce using rule 17 (varcte -> STRING .)
    CORCHIZQ        reduce using rule 17 (varcte -> STRING .)
    FLECHITA        reduce using rule 17 (varcte -> STRING .)


state 158

    (49) asignacion -> ID asignacion3 IGUAL asignacion2 .

    ID              reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    IF              reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    WRITE           reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    FOR             reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    WHILE           reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    WHEN            reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    RETURN          reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 .)
    LLAVEDER        reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 .)


state 159

    (50) asignacion2 -> expresion .

    ID              reduce using rule 50 (asignacion2 -> expresion .)
    IF              reduce using rule 50 (asignacion2 -> expresion .)
    WRITE           reduce using rule 50 (asignacion2 -> expresion .)
    FOR             reduce using rule 50 (asignacion2 -> expresion .)
    WHILE           reduce using rule 50 (asignacion2 -> expresion .)
    WHEN            reduce using rule 50 (asignacion2 -> expresion .)
    RETURN          reduce using rule 50 (asignacion2 -> expresion .)
    LLAVEDER        reduce using rule 50 (asignacion2 -> expresion .)


state 160

    (51) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion                      shift and go to state 201
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 161

    (52) asignacion2 -> READ . PARIZQ STRING PARDER

    PARIZQ          shift and go to state 202


state 162

    (116) llamada -> ID PARIZQ expresion expresionr . PARDER

    PARDER          shift and go to state 203


state 163

    (23) expresionr -> COMA . expresion expresionr
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion                      shift and go to state 204
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 164

    (24) expresionr -> empty .

    PARDER          reduce using rule 24 (expresionr -> empty .)


state 165

    (55) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 55 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 166

    (58) condicion -> IF condicion2 condicionr estatutor .

    ID              reduce using rule 58 (condicion -> IF condicion2 condicionr estatutor .)
    IF              reduce using rule 58 (condicion -> IF condicion2 condicionr estatutor .)
    WRITE           reduce using rule 58 (condicion -> IF condicion2 condicionr estatutor .)
    FOR             reduce using rule 58 (condicion -> IF condicion2 condicionr estatutor .)
    WHILE           reduce using rule 58 (condicion -> IF condicion2 condicionr estatutor .)
    WHEN            reduce using rule 58 (condicion -> IF condicion2 condicionr estatutor .)
    RETURN          reduce using rule 58 (condicion -> IF condicion2 condicionr estatutor .)
    LLAVEDER        reduce using rule 58 (condicion -> IF condicion2 condicionr estatutor .)


state 167

    (62) estatutor -> ELSE . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 53

    bloque                         shift and go to state 205

state 168

    (63) estatutor -> empty .

    ID              reduce using rule 63 (estatutor -> empty .)
    IF              reduce using rule 63 (estatutor -> empty .)
    WRITE           reduce using rule 63 (estatutor -> empty .)
    FOR             reduce using rule 63 (estatutor -> empty .)
    WHILE           reduce using rule 63 (estatutor -> empty .)
    WHEN            reduce using rule 63 (estatutor -> empty .)
    RETURN          reduce using rule 63 (estatutor -> empty .)
    LLAVEDER        reduce using rule 63 (estatutor -> empty .)


state 169

    (60) condicionr -> ELSE IF . condicion2
    (59) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 92

    condicion2                     shift and go to state 206

state 170

    (59) condicion2 -> PARIZQ expresion PARDER . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 53

    bloque                         shift and go to state 207

state 171

    (64) escritura -> WRITE PARIZQ esc1 esc2 . PARDER

    PARDER          shift and go to state 208


state 172

    (67) esc2 -> COMA . esc1 esc2
    (65) esc1 -> . expresion
    (66) esc1 -> . STRING
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 126
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! STRING          [ reduce using rule 118 (empty -> .) ]

    esc1                           shift and go to state 209
    expresion                      shift and go to state 125
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 173

    (68) esc2 -> empty .

    PARDER          reduce using rule 68 (esc2 -> empty .)


state 174

    (89) for -> FOR PARIZQ ID IN . for2 PARDER bloque
    (90) for2 -> . ID
    (91) for2 -> . range
    (92) range -> . INTNUM PUNTOSRANGO INTNUM

    ID              shift and go to state 210
    INTNUM          shift and go to state 213

    for2                           shift and go to state 211
    range                          shift and go to state 212

state 175

    (93) while -> WHILE PARIZQ expresion PARDER . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 53

    bloque                         shift and go to state 214

state 176

    (94) when -> WHEN PARIZQ expresion PARDER . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 215


state 177

    (106) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (109) opc2 -> . estatuto
    (110) opc2 -> . empty
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (118) empty -> .
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2
    (58) condicion -> . IF condicion2 condicionr estatutor
    (64) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (89) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (93) while -> . WHILE PARIZQ expresion PARDER bloque
    (94) when -> . WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER
    (116) llamada -> . ID PARIZQ expresion expresionr PARDER
    (117) llamada -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    ID              shift and go to state 67
    IF              shift and go to state 68
    WRITE           shift and go to state 69
    FOR             shift and go to state 70
    WHILE           shift and go to state 71
    WHEN            shift and go to state 72

  ! ID              [ reduce using rule 118 (empty -> .) ]
  ! IF              [ reduce using rule 118 (empty -> .) ]
  ! WRITE           [ reduce using rule 118 (empty -> .) ]
  ! FOR             [ reduce using rule 118 (empty -> .) ]
  ! WHILE           [ reduce using rule 118 (empty -> .) ]
  ! WHEN            [ reduce using rule 118 (empty -> .) ]

    opc2                           shift and go to state 216
    estatuto                       shift and go to state 217
    empty                          shift and go to state 218
    asignacion                     shift and go to state 59
    condicion                      shift and go to state 60
    escritura                      shift and go to state 61
    for                            shift and go to state 62
    while                          shift and go to state 63
    when                           shift and go to state 64
    llamada                        shift and go to state 65

state 178

    (107) opc1 -> vars .

    ID              reduce using rule 107 (opc1 -> vars .)
    IF              reduce using rule 107 (opc1 -> vars .)
    WRITE           reduce using rule 107 (opc1 -> vars .)
    FOR             reduce using rule 107 (opc1 -> vars .)
    WHILE           reduce using rule 107 (opc1 -> vars .)
    WHEN            reduce using rule 107 (opc1 -> vars .)
    RETURN          reduce using rule 107 (opc1 -> vars .)
    LLAVEDER        reduce using rule 107 (opc1 -> vars .)


state 179

    (108) opc1 -> empty .
    (40) vars3 -> empty .

    ID              reduce using rule 108 (opc1 -> empty .)
    IF              reduce using rule 108 (opc1 -> empty .)
    WRITE           reduce using rule 108 (opc1 -> empty .)
    FOR             reduce using rule 108 (opc1 -> empty .)
    WHILE           reduce using rule 108 (opc1 -> empty .)
    WHEN            reduce using rule 108 (opc1 -> empty .)
    RETURN          reduce using rule 108 (opc1 -> empty .)
    LLAVEDER        reduce using rule 108 (opc1 -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 180

    (102) funparamr -> COMA tipo ID . funparamr
    (102) funparamr -> . COMA tipo ID funparamr
    (103) funparamr -> . empty
    (118) empty -> .

    COMA            shift and go to state 101
    PARDER          reduce using rule 118 (empty -> .)

    funparamr                      shift and go to state 219
    empty                          shift and go to state 102

state 181

    (27) oplog -> MAYORQUE exp .

    LLAVEDER        reduce using rule 27 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 27 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 27 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 27 (oplog -> MAYORQUE exp .)
    ID              reduce using rule 27 (oplog -> MAYORQUE exp .)
    IF              reduce using rule 27 (oplog -> MAYORQUE exp .)
    WRITE           reduce using rule 27 (oplog -> MAYORQUE exp .)
    FOR             reduce using rule 27 (oplog -> MAYORQUE exp .)
    WHILE           reduce using rule 27 (oplog -> MAYORQUE exp .)
    WHEN            reduce using rule 27 (oplog -> MAYORQUE exp .)
    RETURN          reduce using rule 27 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 27 (oplog -> MAYORQUE exp .)


state 182

    (28) oplog -> MENORQUE exp .

    LLAVEDER        reduce using rule 28 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 28 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 28 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 28 (oplog -> MENORQUE exp .)
    ID              reduce using rule 28 (oplog -> MENORQUE exp .)
    IF              reduce using rule 28 (oplog -> MENORQUE exp .)
    WRITE           reduce using rule 28 (oplog -> MENORQUE exp .)
    FOR             reduce using rule 28 (oplog -> MENORQUE exp .)
    WHILE           reduce using rule 28 (oplog -> MENORQUE exp .)
    WHEN            reduce using rule 28 (oplog -> MENORQUE exp .)
    RETURN          reduce using rule 28 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 28 (oplog -> MENORQUE exp .)


state 183

    (29) oplog -> DIFERENTE exp .

    LLAVEDER        reduce using rule 29 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 29 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 29 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 29 (oplog -> DIFERENTE exp .)
    ID              reduce using rule 29 (oplog -> DIFERENTE exp .)
    IF              reduce using rule 29 (oplog -> DIFERENTE exp .)
    WRITE           reduce using rule 29 (oplog -> DIFERENTE exp .)
    FOR             reduce using rule 29 (oplog -> DIFERENTE exp .)
    WHILE           reduce using rule 29 (oplog -> DIFERENTE exp .)
    WHEN            reduce using rule 29 (oplog -> DIFERENTE exp .)
    RETURN          reduce using rule 29 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 29 (oplog -> DIFERENTE exp .)


state 184

    (30) oplog -> MAYOROIGUAL exp .

    LLAVEDER        reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    ID              reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    IF              reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    WRITE           reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    FOR             reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    WHILE           reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    WHEN            reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    RETURN          reduce using rule 30 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 30 (oplog -> MAYOROIGUAL exp .)


state 185

    (31) oplog -> MENOROIGUAL exp .

    LLAVEDER        reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    ID              reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    IF              reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    WRITE           reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    FOR             reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    WHILE           reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    WHEN            reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    RETURN          reduce using rule 31 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 31 (oplog -> MENOROIGUAL exp .)


state 186

    (32) oplog -> IGUALIGUAL exp .

    LLAVEDER        reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    ID              reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    IF              reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    WRITE           reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    FOR             reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    WHILE           reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    WHEN            reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    RETURN          reduce using rule 32 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 32 (oplog -> IGUALIGUAL exp .)


state 187

    (22) expresion -> ID PARIZQ expresion2 . PARDER

    PARDER          shift and go to state 220


state 188

    (25) expresion2 -> expresion . expresionr
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (118) empty -> .

    COMA            shift and go to state 163
    PARDER          reduce using rule 118 (empty -> .)

    expresionr                     shift and go to state 221
    empty                          shift and go to state 164

state 189

    (26) expresion2 -> empty .
    (88) factor2 -> empty .

    PARDER          reduce using rule 26 (expresion2 -> empty .)
    ID              reduce using rule 88 (factor2 -> empty .)
    INTNUM          reduce using rule 88 (factor2 -> empty .)
    FLOATNUM        reduce using rule 88 (factor2 -> empty .)
    BOOLVAL         reduce using rule 88 (factor2 -> empty .)
    STRING          reduce using rule 88 (factor2 -> empty .)


state 190

    (74) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    LLAVEDER        reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    ID              reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    IF              reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    WRITE           reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    FOR             reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    WHILE           reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    WHEN            reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    RETURN          reduce using rule 74 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 74 (factor -> PARIZQ expresion PARDER .)


state 191

    (81) expr -> MAS termino . expr
    (81) expr -> . MAS termino expr
    (82) expr -> . MENOS termino expr
    (83) expr -> . empty
    (118) empty -> .

    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    MAYORQUE        reduce using rule 118 (empty -> .)
    MENORQUE        reduce using rule 118 (empty -> .)
    DIFERENTE       reduce using rule 118 (empty -> .)
    MAYOROIGUAL     reduce using rule 118 (empty -> .)
    MENOROIGUAL     reduce using rule 118 (empty -> .)
    IGUALIGUAL      reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    COMA            reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)
    CORCHDER        reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CORCHIZQ        reduce using rule 118 (empty -> .)

    expr                           shift and go to state 222
    empty                          shift and go to state 147

state 192

    (82) expr -> MENOS termino . expr
    (81) expr -> . MAS termino expr
    (82) expr -> . MENOS termino expr
    (83) expr -> . empty
    (118) empty -> .

    MAS             shift and go to state 145
    MENOS           shift and go to state 146
    MAYORQUE        reduce using rule 118 (empty -> .)
    MENORQUE        reduce using rule 118 (empty -> .)
    DIFERENTE       reduce using rule 118 (empty -> .)
    MAYOROIGUAL     reduce using rule 118 (empty -> .)
    MENOROIGUAL     reduce using rule 118 (empty -> .)
    IGUALIGUAL      reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    COMA            reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)
    CORCHDER        reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CORCHIZQ        reduce using rule 118 (empty -> .)

    expr                           shift and go to state 223
    empty                          shift and go to state 147

state 193

    (76) terminor -> POR factor . terminor
    (76) terminor -> . POR factor terminor
    (77) terminor -> . SOBRE factor terminor
    (78) terminor -> . empty
    (118) empty -> .

    POR             shift and go to state 149
    SOBRE           shift and go to state 150
    MAS             reduce using rule 118 (empty -> .)
    MENOS           reduce using rule 118 (empty -> .)
    MAYORQUE        reduce using rule 118 (empty -> .)
    MENORQUE        reduce using rule 118 (empty -> .)
    DIFERENTE       reduce using rule 118 (empty -> .)
    MAYOROIGUAL     reduce using rule 118 (empty -> .)
    MENOROIGUAL     reduce using rule 118 (empty -> .)
    IGUALIGUAL      reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    COMA            reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)
    CORCHDER        reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CORCHIZQ        reduce using rule 118 (empty -> .)

    terminor                       shift and go to state 224
    empty                          shift and go to state 151

state 194

    (77) terminor -> SOBRE factor . terminor
    (76) terminor -> . POR factor terminor
    (77) terminor -> . SOBRE factor terminor
    (78) terminor -> . empty
    (118) empty -> .

    POR             shift and go to state 149
    SOBRE           shift and go to state 150
    MAS             reduce using rule 118 (empty -> .)
    MENOS           reduce using rule 118 (empty -> .)
    MAYORQUE        reduce using rule 118 (empty -> .)
    MENORQUE        reduce using rule 118 (empty -> .)
    DIFERENTE       reduce using rule 118 (empty -> .)
    MAYOROIGUAL     reduce using rule 118 (empty -> .)
    MENOROIGUAL     reduce using rule 118 (empty -> .)
    IGUALIGUAL      reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    COMA            reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)
    CORCHDER        reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CORCHIZQ        reduce using rule 118 (empty -> .)

    terminor                       shift and go to state 225
    empty                          shift and go to state 151

state 195

    (75) factor -> factor2 varcte varcter .

    POR             reduce using rule 75 (factor -> factor2 varcte varcter .)
    SOBRE           reduce using rule 75 (factor -> factor2 varcte varcter .)
    MAS             reduce using rule 75 (factor -> factor2 varcte varcter .)
    MENOS           reduce using rule 75 (factor -> factor2 varcte varcter .)
    MAYORQUE        reduce using rule 75 (factor -> factor2 varcte varcter .)
    MENORQUE        reduce using rule 75 (factor -> factor2 varcte varcter .)
    DIFERENTE       reduce using rule 75 (factor -> factor2 varcte varcter .)
    MAYOROIGUAL     reduce using rule 75 (factor -> factor2 varcte varcter .)
    MENOROIGUAL     reduce using rule 75 (factor -> factor2 varcte varcter .)
    IGUALIGUAL      reduce using rule 75 (factor -> factor2 varcte varcter .)
    LLAVEDER        reduce using rule 75 (factor -> factor2 varcte varcter .)
    COMA            reduce using rule 75 (factor -> factor2 varcte varcter .)
    PARDER          reduce using rule 75 (factor -> factor2 varcte varcter .)
    CORCHDER        reduce using rule 75 (factor -> factor2 varcte varcter .)
    ID              reduce using rule 75 (factor -> factor2 varcte varcter .)
    IF              reduce using rule 75 (factor -> factor2 varcte varcter .)
    WRITE           reduce using rule 75 (factor -> factor2 varcte varcter .)
    FOR             reduce using rule 75 (factor -> factor2 varcte varcter .)
    WHILE           reduce using rule 75 (factor -> factor2 varcte varcter .)
    WHEN            reduce using rule 75 (factor -> factor2 varcte varcter .)
    RETURN          reduce using rule 75 (factor -> factor2 varcte varcter .)
    CORCHIZQ        reduce using rule 75 (factor -> factor2 varcte varcter .)


state 196

    (84) varcter -> COMA . varcte varcter
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 153
    INTNUM          shift and go to state 154
    FLOATNUM        shift and go to state 155
    BOOLVAL         shift and go to state 156
    STRING          shift and go to state 157

    varcte                         shift and go to state 226

state 197

    (85) varcter -> empty .

    POR             reduce using rule 85 (varcter -> empty .)
    SOBRE           reduce using rule 85 (varcter -> empty .)
    MAS             reduce using rule 85 (varcter -> empty .)
    MENOS           reduce using rule 85 (varcter -> empty .)
    MAYORQUE        reduce using rule 85 (varcter -> empty .)
    MENORQUE        reduce using rule 85 (varcter -> empty .)
    DIFERENTE       reduce using rule 85 (varcter -> empty .)
    MAYOROIGUAL     reduce using rule 85 (varcter -> empty .)
    MENOROIGUAL     reduce using rule 85 (varcter -> empty .)
    IGUALIGUAL      reduce using rule 85 (varcter -> empty .)
    LLAVEDER        reduce using rule 85 (varcter -> empty .)
    COMA            reduce using rule 85 (varcter -> empty .)
    PARDER          reduce using rule 85 (varcter -> empty .)
    CORCHDER        reduce using rule 85 (varcter -> empty .)
    ID              reduce using rule 85 (varcter -> empty .)
    IF              reduce using rule 85 (varcter -> empty .)
    WRITE           reduce using rule 85 (varcter -> empty .)
    FOR             reduce using rule 85 (varcter -> empty .)
    WHILE           reduce using rule 85 (varcter -> empty .)
    WHEN            reduce using rule 85 (varcter -> empty .)
    RETURN          reduce using rule 85 (varcter -> empty .)
    CORCHIZQ        reduce using rule 85 (varcter -> empty .)
    FLECHITA        reduce using rule 85 (varcter -> empty .)


state 198

    (18) varcte -> ID CORCHIZQ . varcte CORCHDER
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 153
    INTNUM          shift and go to state 154
    FLOATNUM        shift and go to state 155
    BOOLVAL         shift and go to state 156
    STRING          shift and go to state 157

    varcte                         shift and go to state 227

state 199

    (19) varcte -> ID PUNTO . ID

    ID              shift and go to state 228


state 200

    (20) varcte -> ID PARIZQ . expresion2 PARDER
    (25) expresion2 -> . expresion expresionr
    (26) expresion2 -> . empty
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (118) empty -> .
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARDER          reduce using rule 118 (empty -> .)
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion2                     shift and go to state 229
    expresion                      shift and go to state 188
    empty                          shift and go to state 189
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112

state 201

    (51) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (53) asignacion2r -> . COMA expresion asignacion2r
    (54) asignacion2r -> . empty
    (118) empty -> .

    COMA            shift and go to state 231
    CORCHIZQ        reduce using rule 118 (empty -> .)

    asignacion2r                   shift and go to state 230
    empty                          shift and go to state 232

state 202

    (52) asignacion2 -> READ PARIZQ . STRING PARDER

    STRING          shift and go to state 233


state 203

    (116) llamada -> ID PARIZQ expresion expresionr PARDER .

    ID              reduce using rule 116 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    IF              reduce using rule 116 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    WRITE           reduce using rule 116 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    FOR             reduce using rule 116 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    WHILE           reduce using rule 116 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    WHEN            reduce using rule 116 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    RETURN          reduce using rule 116 (llamada -> ID PARIZQ expresion expresionr PARDER .)
    LLAVEDER        reduce using rule 116 (llamada -> ID PARIZQ expresion expresionr PARDER .)


state 204

    (23) expresionr -> COMA expresion . expresionr
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (118) empty -> .

    COMA            shift and go to state 163
    PARDER          reduce using rule 118 (empty -> .)

    expresionr                     shift and go to state 234
    empty                          shift and go to state 164

state 205

    (62) estatutor -> ELSE bloque .

    ID              reduce using rule 62 (estatutor -> ELSE bloque .)
    IF              reduce using rule 62 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 62 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 62 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 62 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 62 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 62 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 62 (estatutor -> ELSE bloque .)


state 206

    (60) condicionr -> ELSE IF condicion2 .

    ELSE            reduce using rule 60 (condicionr -> ELSE IF condicion2 .)
    ID              reduce using rule 60 (condicionr -> ELSE IF condicion2 .)
    IF              reduce using rule 60 (condicionr -> ELSE IF condicion2 .)
    WRITE           reduce using rule 60 (condicionr -> ELSE IF condicion2 .)
    FOR             reduce using rule 60 (condicionr -> ELSE IF condicion2 .)
    WHILE           reduce using rule 60 (condicionr -> ELSE IF condicion2 .)
    WHEN            reduce using rule 60 (condicionr -> ELSE IF condicion2 .)
    RETURN          reduce using rule 60 (condicionr -> ELSE IF condicion2 .)
    LLAVEDER        reduce using rule 60 (condicionr -> ELSE IF condicion2 .)


state 207

    (59) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 208

    (64) escritura -> WRITE PARIZQ esc1 esc2 PARDER .

    ID              reduce using rule 64 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    IF              reduce using rule 64 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WRITE           reduce using rule 64 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    FOR             reduce using rule 64 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WHILE           reduce using rule 64 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WHEN            reduce using rule 64 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    RETURN          reduce using rule 64 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    LLAVEDER        reduce using rule 64 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)


state 209

    (67) esc2 -> COMA esc1 . esc2
    (67) esc2 -> . COMA esc1 esc2
    (68) esc2 -> . empty
    (118) empty -> .

    COMA            shift and go to state 172
    PARDER          reduce using rule 118 (empty -> .)

    esc2                           shift and go to state 235
    empty                          shift and go to state 173

state 210

    (90) for2 -> ID .

    PARDER          reduce using rule 90 (for2 -> ID .)


state 211

    (89) for -> FOR PARIZQ ID IN for2 . PARDER bloque

    PARDER          shift and go to state 236


state 212

    (91) for2 -> range .

    PARDER          reduce using rule 91 (for2 -> range .)


state 213

    (92) range -> INTNUM . PUNTOSRANGO INTNUM

    PUNTOSRANGO     shift and go to state 237


state 214

    (93) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 93 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 93 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 93 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 93 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 93 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 93 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 93 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 93 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 215

    (94) when -> WHEN PARIZQ expresion PARDER LLAVEIZQ . when2 LLAVEDER
    (95) when2 -> . varcte varcter FLECHITA bloque when2
    (96) when2 -> . IN range FLECHITA bloque when2
    (97) when2 -> . ELSE FLECHITA bloque when2
    (98) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (118) empty -> .

    IN              shift and go to state 240
    ELSE            shift and go to state 241
    ID              shift and go to state 153
    INTNUM          shift and go to state 154
    FLOATNUM        shift and go to state 155
    BOOLVAL         shift and go to state 156
    STRING          shift and go to state 157
    LLAVEDER        reduce using rule 118 (empty -> .)

    when2                          shift and go to state 238
    varcte                         shift and go to state 239
    empty                          shift and go to state 242

state 216

    (106) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (9) bloque2 -> . RETURN bloque3
    (10) bloque2 -> . empty
    (118) empty -> .

    RETURN          shift and go to state 77
    LLAVEDER        reduce using rule 118 (empty -> .)

    bloque2                        shift and go to state 243
    empty                          shift and go to state 78

state 217

    (109) opc2 -> estatuto .

    RETURN          reduce using rule 109 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 109 (opc2 -> estatuto .)


state 218

    (110) opc2 -> empty .
    (48) estatuto -> empty .
    (117) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 48 (estatuto -> empty .)
    RETURN          reduce using rule 48 (estatuto -> empty .)
    LLAVEDER        reduce using rule 48 (estatuto -> empty .)
    ID              reduce using rule 117 (llamada -> empty .)
    IF              reduce using rule 117 (llamada -> empty .)
    WRITE           reduce using rule 117 (llamada -> empty .)
    FOR             reduce using rule 117 (llamada -> empty .)
    WHILE           reduce using rule 117 (llamada -> empty .)
    WHEN            reduce using rule 117 (llamada -> empty .)

  ! RETURN          [ reduce using rule 110 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 110 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 117 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 117 (llamada -> empty .) ]


state 219

    (102) funparamr -> COMA tipo ID funparamr .

    PARDER          reduce using rule 102 (funparamr -> COMA tipo ID funparamr .)


state 220

    (22) expresion -> ID PARIZQ expresion2 PARDER .

    LLAVEDER        reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    COMA            reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    PARDER          reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    CORCHDER        reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    ID              reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    IF              reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    WRITE           reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    FOR             reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    WHILE           reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    WHEN            reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    RETURN          reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)
    CORCHIZQ        reduce using rule 22 (expresion -> ID PARIZQ expresion2 PARDER .)


state 221

    (25) expresion2 -> expresion expresionr .

    PARDER          reduce using rule 25 (expresion2 -> expresion expresionr .)


state 222

    (81) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 81 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 81 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 81 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 81 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 81 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 81 (expr -> MAS termino expr .)
    LLAVEDER        reduce using rule 81 (expr -> MAS termino expr .)
    COMA            reduce using rule 81 (expr -> MAS termino expr .)
    PARDER          reduce using rule 81 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 81 (expr -> MAS termino expr .)
    ID              reduce using rule 81 (expr -> MAS termino expr .)
    IF              reduce using rule 81 (expr -> MAS termino expr .)
    WRITE           reduce using rule 81 (expr -> MAS termino expr .)
    FOR             reduce using rule 81 (expr -> MAS termino expr .)
    WHILE           reduce using rule 81 (expr -> MAS termino expr .)
    WHEN            reduce using rule 81 (expr -> MAS termino expr .)
    RETURN          reduce using rule 81 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 81 (expr -> MAS termino expr .)


state 223

    (82) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 82 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 82 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 82 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 82 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 82 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 82 (expr -> MENOS termino expr .)
    LLAVEDER        reduce using rule 82 (expr -> MENOS termino expr .)
    COMA            reduce using rule 82 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 82 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 82 (expr -> MENOS termino expr .)
    ID              reduce using rule 82 (expr -> MENOS termino expr .)
    IF              reduce using rule 82 (expr -> MENOS termino expr .)
    WRITE           reduce using rule 82 (expr -> MENOS termino expr .)
    FOR             reduce using rule 82 (expr -> MENOS termino expr .)
    WHILE           reduce using rule 82 (expr -> MENOS termino expr .)
    WHEN            reduce using rule 82 (expr -> MENOS termino expr .)
    RETURN          reduce using rule 82 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 82 (expr -> MENOS termino expr .)


state 224

    (76) terminor -> POR factor terminor .

    MAS             reduce using rule 76 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 76 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 76 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 76 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 76 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 76 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 76 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 76 (terminor -> POR factor terminor .)
    LLAVEDER        reduce using rule 76 (terminor -> POR factor terminor .)
    COMA            reduce using rule 76 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 76 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 76 (terminor -> POR factor terminor .)
    ID              reduce using rule 76 (terminor -> POR factor terminor .)
    IF              reduce using rule 76 (terminor -> POR factor terminor .)
    WRITE           reduce using rule 76 (terminor -> POR factor terminor .)
    FOR             reduce using rule 76 (terminor -> POR factor terminor .)
    WHILE           reduce using rule 76 (terminor -> POR factor terminor .)
    WHEN            reduce using rule 76 (terminor -> POR factor terminor .)
    RETURN          reduce using rule 76 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 76 (terminor -> POR factor terminor .)


state 225

    (77) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 77 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 77 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 77 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 77 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 77 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 77 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 77 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 77 (terminor -> SOBRE factor terminor .)
    LLAVEDER        reduce using rule 77 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 77 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 77 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 77 (terminor -> SOBRE factor terminor .)
    ID              reduce using rule 77 (terminor -> SOBRE factor terminor .)
    IF              reduce using rule 77 (terminor -> SOBRE factor terminor .)
    WRITE           reduce using rule 77 (terminor -> SOBRE factor terminor .)
    FOR             reduce using rule 77 (terminor -> SOBRE factor terminor .)
    WHILE           reduce using rule 77 (terminor -> SOBRE factor terminor .)
    WHEN            reduce using rule 77 (terminor -> SOBRE factor terminor .)
    RETURN          reduce using rule 77 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 77 (terminor -> SOBRE factor terminor .)


state 226

    (84) varcter -> COMA varcte . varcter
    (84) varcter -> . COMA varcte varcter
    (85) varcter -> . empty
    (118) empty -> .

  ! shift/reduce conflict for COMA resolved as shift
    COMA            shift and go to state 196
    POR             reduce using rule 118 (empty -> .)
    SOBRE           reduce using rule 118 (empty -> .)
    MAS             reduce using rule 118 (empty -> .)
    MENOS           reduce using rule 118 (empty -> .)
    MAYORQUE        reduce using rule 118 (empty -> .)
    MENORQUE        reduce using rule 118 (empty -> .)
    DIFERENTE       reduce using rule 118 (empty -> .)
    MAYOROIGUAL     reduce using rule 118 (empty -> .)
    MENOROIGUAL     reduce using rule 118 (empty -> .)
    IGUALIGUAL      reduce using rule 118 (empty -> .)
    LLAVEDER        reduce using rule 118 (empty -> .)
    PARDER          reduce using rule 118 (empty -> .)
    CORCHDER        reduce using rule 118 (empty -> .)
    ID              reduce using rule 118 (empty -> .)
    IF              reduce using rule 118 (empty -> .)
    WRITE           reduce using rule 118 (empty -> .)
    FOR             reduce using rule 118 (empty -> .)
    WHILE           reduce using rule 118 (empty -> .)
    WHEN            reduce using rule 118 (empty -> .)
    RETURN          reduce using rule 118 (empty -> .)
    CORCHIZQ        reduce using rule 118 (empty -> .)
    FLECHITA        reduce using rule 118 (empty -> .)

  ! COMA            [ reduce using rule 118 (empty -> .) ]

    varcter                        shift and go to state 244
    empty                          shift and go to state 197

state 227

    (18) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 245


state 228

    (19) varcte -> ID PUNTO ID .

    COMA            reduce using rule 19 (varcte -> ID PUNTO ID .)
    POR             reduce using rule 19 (varcte -> ID PUNTO ID .)
    SOBRE           reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAS             reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENOS           reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAYORQUE        reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENORQUE        reduce using rule 19 (varcte -> ID PUNTO ID .)
    DIFERENTE       reduce using rule 19 (varcte -> ID PUNTO ID .)
    MAYOROIGUAL     reduce using rule 19 (varcte -> ID PUNTO ID .)
    MENOROIGUAL     reduce using rule 19 (varcte -> ID PUNTO ID .)
    IGUALIGUAL      reduce using rule 19 (varcte -> ID PUNTO ID .)
    LLAVEDER        reduce using rule 19 (varcte -> ID PUNTO ID .)
    PARDER          reduce using rule 19 (varcte -> ID PUNTO ID .)
    CORCHDER        reduce using rule 19 (varcte -> ID PUNTO ID .)
    ID              reduce using rule 19 (varcte -> ID PUNTO ID .)
    IF              reduce using rule 19 (varcte -> ID PUNTO ID .)
    WRITE           reduce using rule 19 (varcte -> ID PUNTO ID .)
    FOR             reduce using rule 19 (varcte -> ID PUNTO ID .)
    WHILE           reduce using rule 19 (varcte -> ID PUNTO ID .)
    WHEN            reduce using rule 19 (varcte -> ID PUNTO ID .)
    RETURN          reduce using rule 19 (varcte -> ID PUNTO ID .)
    CORCHIZQ        reduce using rule 19 (varcte -> ID PUNTO ID .)
    FLECHITA        reduce using rule 19 (varcte -> ID PUNTO ID .)


state 229

    (20) varcte -> ID PARIZQ expresion2 . PARDER

    PARDER          shift and go to state 246


state 230

    (51) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 247


state 231

    (53) asignacion2r -> COMA . expresion asignacion2r
    (21) expresion -> . exp oplog
    (22) expresion -> . ID PARIZQ expresion2 PARDER
    (80) exp -> . termino expr
    (79) termino -> . factor terminor
    (74) factor -> . PARIZQ expresion PARDER
    (75) factor -> . factor2 varcte varcter
    (86) factor2 -> . MAS
    (87) factor2 -> . MENOS
    (88) factor2 -> . empty
    (118) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 108
    PARIZQ          shift and go to state 109
    MAS             shift and go to state 113
    MENOS           shift and go to state 114
    INTNUM          reduce using rule 118 (empty -> .)
    FLOATNUM        reduce using rule 118 (empty -> .)
    BOOLVAL         reduce using rule 118 (empty -> .)
    STRING          reduce using rule 118 (empty -> .)

  ! ID              [ reduce using rule 118 (empty -> .) ]

    expresion                      shift and go to state 248
    exp                            shift and go to state 107
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    factor2                        shift and go to state 112
    empty                          shift and go to state 117

state 232

    (54) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 54 (asignacion2r -> empty .)


state 233

    (52) asignacion2 -> READ PARIZQ STRING . PARDER

    PARDER          shift and go to state 249


state 234

    (23) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 23 (expresionr -> COMA expresion expresionr .)


state 235

    (67) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 67 (esc2 -> COMA esc1 esc2 .)


state 236

    (89) for -> FOR PARIZQ ID IN for2 PARDER . bloque
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 53

    bloque                         shift and go to state 250

state 237

    (92) range -> INTNUM PUNTOSRANGO . INTNUM

    INTNUM          shift and go to state 251


state 238

    (94) when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 252


state 239

    (95) when2 -> varcte . varcter FLECHITA bloque when2
    (84) varcter -> . COMA varcte varcter
    (85) varcter -> . empty
    (118) empty -> .

    COMA            shift and go to state 196
    FLECHITA        reduce using rule 118 (empty -> .)

    varcter                        shift and go to state 253
    empty                          shift and go to state 197

state 240

    (96) when2 -> IN . range FLECHITA bloque when2
    (92) range -> . INTNUM PUNTOSRANGO INTNUM

    INTNUM          shift and go to state 213

    range                          shift and go to state 254

state 241

    (97) when2 -> ELSE . FLECHITA bloque when2

    FLECHITA        shift and go to state 255


state 242

    (98) when2 -> empty .

    LLAVEDER        reduce using rule 98 (when2 -> empty .)


state 243

    (106) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 256


state 244

    (84) varcter -> COMA varcte varcter .

    POR             reduce using rule 84 (varcter -> COMA varcte varcter .)
    SOBRE           reduce using rule 84 (varcter -> COMA varcte varcter .)
    MAS             reduce using rule 84 (varcter -> COMA varcte varcter .)
    MENOS           reduce using rule 84 (varcter -> COMA varcte varcter .)
    MAYORQUE        reduce using rule 84 (varcter -> COMA varcte varcter .)
    MENORQUE        reduce using rule 84 (varcter -> COMA varcte varcter .)
    DIFERENTE       reduce using rule 84 (varcter -> COMA varcte varcter .)
    MAYOROIGUAL     reduce using rule 84 (varcter -> COMA varcte varcter .)
    MENOROIGUAL     reduce using rule 84 (varcter -> COMA varcte varcter .)
    IGUALIGUAL      reduce using rule 84 (varcter -> COMA varcte varcter .)
    LLAVEDER        reduce using rule 84 (varcter -> COMA varcte varcter .)
    COMA            reduce using rule 84 (varcter -> COMA varcte varcter .)
    PARDER          reduce using rule 84 (varcter -> COMA varcte varcter .)
    CORCHDER        reduce using rule 84 (varcter -> COMA varcte varcter .)
    ID              reduce using rule 84 (varcter -> COMA varcte varcter .)
    IF              reduce using rule 84 (varcter -> COMA varcte varcter .)
    WRITE           reduce using rule 84 (varcter -> COMA varcte varcter .)
    FOR             reduce using rule 84 (varcter -> COMA varcte varcter .)
    WHILE           reduce using rule 84 (varcter -> COMA varcte varcter .)
    WHEN            reduce using rule 84 (varcter -> COMA varcte varcter .)
    RETURN          reduce using rule 84 (varcter -> COMA varcte varcter .)
    CORCHIZQ        reduce using rule 84 (varcter -> COMA varcte varcter .)
    FLECHITA        reduce using rule 84 (varcter -> COMA varcte varcter .)


state 245

    (18) varcte -> ID CORCHIZQ varcte CORCHDER .

    COMA            reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    POR             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    LLAVEDER        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    ID              reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IF              reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    WRITE           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FOR             reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    WHILE           reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    WHEN            reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    RETURN          reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 18 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 246

    (20) varcte -> ID PARIZQ expresion2 PARDER .

    COMA            reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    POR             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    SOBRE           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAS             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOS           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYORQUE        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENORQUE        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    DIFERENTE       reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYOROIGUAL     reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOROIGUAL     reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    IGUALIGUAL      reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    LLAVEDER        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    PARDER          reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    CORCHDER        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    ID              reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    IF              reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    WRITE           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    FOR             reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    WHILE           reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    WHEN            reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    RETURN          reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    CORCHIZQ        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)
    FLECHITA        reduce using rule 20 (varcte -> ID PARIZQ expresion2 PARDER .)


state 247

    (51) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    ID              reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    IF              reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    WRITE           reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    FOR             reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    WHILE           reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    WHEN            reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    RETURN          reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)
    LLAVEDER        reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 248

    (53) asignacion2r -> COMA expresion . asignacion2r
    (53) asignacion2r -> . COMA expresion asignacion2r
    (54) asignacion2r -> . empty
    (118) empty -> .

    COMA            shift and go to state 231
    CORCHIZQ        reduce using rule 118 (empty -> .)

    asignacion2r                   shift and go to state 257
    empty                          shift and go to state 232

state 249

    (52) asignacion2 -> READ PARIZQ STRING PARDER .

    ID              reduce using rule 52 (asignacion2 -> READ PARIZQ STRING PARDER .)
    IF              reduce using rule 52 (asignacion2 -> READ PARIZQ STRING PARDER .)
    WRITE           reduce using rule 52 (asignacion2 -> READ PARIZQ STRING PARDER .)
    FOR             reduce using rule 52 (asignacion2 -> READ PARIZQ STRING PARDER .)
    WHILE           reduce using rule 52 (asignacion2 -> READ PARIZQ STRING PARDER .)
    WHEN            reduce using rule 52 (asignacion2 -> READ PARIZQ STRING PARDER .)
    RETURN          reduce using rule 52 (asignacion2 -> READ PARIZQ STRING PARDER .)
    LLAVEDER        reduce using rule 52 (asignacion2 -> READ PARIZQ STRING PARDER .)


state 250

    (89) for -> FOR PARIZQ ID IN for2 PARDER bloque .

    ID              reduce using rule 89 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    IF              reduce using rule 89 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WRITE           reduce using rule 89 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    FOR             reduce using rule 89 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHILE           reduce using rule 89 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHEN            reduce using rule 89 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    RETURN          reduce using rule 89 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    LLAVEDER        reduce using rule 89 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)


state 251

    (92) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 92 (range -> INTNUM PUNTOSRANGO INTNUM .)
    FLECHITA        reduce using rule 92 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 252

    (94) when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 94 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 94 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 94 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 94 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 94 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 94 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 94 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 94 (when -> WHEN PARIZQ expresion PARDER LLAVEIZQ when2 LLAVEDER .)


state 253

    (95) when2 -> varcte varcter . FLECHITA bloque when2

    FLECHITA        shift and go to state 258


state 254

    (96) when2 -> IN range . FLECHITA bloque when2

    FLECHITA        shift and go to state 259


state 255

    (97) when2 -> ELSE FLECHITA . bloque when2
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 53

    bloque                         shift and go to state 260

state 256

    (106) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    PRIVATE         reduce using rule 106 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    FUN             reduce using rule 106 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    MAIN            reduce using rule 106 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 257

    (53) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 53 (asignacion2r -> COMA expresion asignacion2r .)


state 258

    (95) when2 -> varcte varcter FLECHITA . bloque when2
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 53

    bloque                         shift and go to state 261

state 259

    (96) when2 -> IN range FLECHITA . bloque when2
    (8) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 53

    bloque                         shift and go to state 262

state 260

    (97) when2 -> ELSE FLECHITA bloque . when2
    (95) when2 -> . varcte varcter FLECHITA bloque when2
    (96) when2 -> . IN range FLECHITA bloque when2
    (97) when2 -> . ELSE FLECHITA bloque when2
    (98) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (118) empty -> .

    IN              shift and go to state 240
    ELSE            shift and go to state 241
    ID              shift and go to state 153
    INTNUM          shift and go to state 154
    FLOATNUM        shift and go to state 155
    BOOLVAL         shift and go to state 156
    STRING          shift and go to state 157
    LLAVEDER        reduce using rule 118 (empty -> .)

    when2                          shift and go to state 263
    varcte                         shift and go to state 239
    empty                          shift and go to state 242

state 261

    (95) when2 -> varcte varcter FLECHITA bloque . when2
    (95) when2 -> . varcte varcter FLECHITA bloque when2
    (96) when2 -> . IN range FLECHITA bloque when2
    (97) when2 -> . ELSE FLECHITA bloque when2
    (98) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (118) empty -> .

    IN              shift and go to state 240
    ELSE            shift and go to state 241
    ID              shift and go to state 153
    INTNUM          shift and go to state 154
    FLOATNUM        shift and go to state 155
    BOOLVAL         shift and go to state 156
    STRING          shift and go to state 157
    LLAVEDER        reduce using rule 118 (empty -> .)

    varcte                         shift and go to state 239
    when2                          shift and go to state 264
    empty                          shift and go to state 242

state 262

    (96) when2 -> IN range FLECHITA bloque . when2
    (95) when2 -> . varcte varcter FLECHITA bloque when2
    (96) when2 -> . IN range FLECHITA bloque when2
    (97) when2 -> . ELSE FLECHITA bloque when2
    (98) when2 -> . empty
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . BOOLVAL
    (17) varcte -> . STRING
    (18) varcte -> . ID CORCHIZQ varcte CORCHDER
    (19) varcte -> . ID PUNTO ID
    (20) varcte -> . ID PARIZQ expresion2 PARDER
    (118) empty -> .

    IN              shift and go to state 240
    ELSE            shift and go to state 241
    ID              shift and go to state 153
    INTNUM          shift and go to state 154
    FLOATNUM        shift and go to state 155
    BOOLVAL         shift and go to state 156
    STRING          shift and go to state 157
    LLAVEDER        reduce using rule 118 (empty -> .)

    when2                          shift and go to state 265
    varcte                         shift and go to state 239
    empty                          shift and go to state 242

state 263

    (97) when2 -> ELSE FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 97 (when2 -> ELSE FLECHITA bloque when2 .)


state 264

    (95) when2 -> varcte varcter FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 95 (when2 -> varcte varcter FLECHITA bloque when2 .)


state 265

    (96) when2 -> IN range FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 96 (when2 -> IN range FLECHITA bloque when2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 16 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 53 resolved as shift
WARNING: shift/reduce conflict for FOR in state 53 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 53 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for IF in state 59 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 59 resolved as shift
WARNING: shift/reduce conflict for FOR in state 59 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 59 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 60 resolved as shift
WARNING: shift/reduce conflict for FOR in state 60 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 61 resolved as shift
WARNING: shift/reduce conflict for IF in state 61 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 61 resolved as shift
WARNING: shift/reduce conflict for FOR in state 61 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 61 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 62 resolved as shift
WARNING: shift/reduce conflict for FOR in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for IF in state 63 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 63 resolved as shift
WARNING: shift/reduce conflict for FOR in state 63 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 63 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for IF in state 64 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 64 resolved as shift
WARNING: shift/reduce conflict for FOR in state 64 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 64 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 65 resolved as shift
WARNING: shift/reduce conflict for FOR in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for STRING in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 109 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 142 resolved as shift
WARNING: shift/reduce conflict for COMA in state 152 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 153 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 163 resolved as shift
WARNING: shift/reduce conflict for ID in state 172 resolved as shift
WARNING: shift/reduce conflict for STRING in state 172 resolved as shift
WARNING: shift/reduce conflict for ID in state 177 resolved as shift
WARNING: shift/reduce conflict for IF in state 177 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 177 resolved as shift
WARNING: shift/reduce conflict for FOR in state 177 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 177 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 177 resolved as shift
WARNING: shift/reduce conflict for ID in state 200 resolved as shift
WARNING: shift/reduce conflict for COMA in state 226 resolved as shift
WARNING: shift/reduce conflict for ID in state 231 resolved as shift
WARNING: reduce/reduce conflict in state 66 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 66
WARNING: reduce/reduce conflict in state 218 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 218
WARNING: reduce/reduce conflict in state 218 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 218
WARNING: Rule (opc2 -> empty) is never reduced
