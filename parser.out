Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    RANGE

Grammar

Rule 0     S' -> file
Rule 1     file -> class classr
Rule 2     classr -> class classr
Rule 3     classr -> empty
Rule 4     class -> CLASS CID classparams class2 body
Rule 5     class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER
Rule 6     class2 -> empty
Rule 7     classparams -> PARIZQ classparams2 PARDER
Rule 8     classparams -> empty
Rule 9     classparams2 -> vars3 tipo ID classparams3
Rule 10    classparams2 -> empty
Rule 11    classparams3 -> COMA vars3 tipo ID classparams3
Rule 12    classparams3 -> empty
Rule 13    varcte -> ID
Rule 14    varcte -> INTNUM
Rule 15    varcte -> FLOATNUM
Rule 16    varcte -> TRUE
Rule 17    varcte -> FALSE
Rule 18    varcte -> STRINGVAL
Rule 19    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 20    varcte -> ID PUNTO ID
Rule 21    varcte -> ID PARIZQ llamada_param PARDER
Rule 22    expresion -> megaexp
Rule 23    expresionr -> COMA expresion expresionr
Rule 24    expresionr -> empty
Rule 25    expresion2 -> expresion expresionr
Rule 26    expresion2 -> empty
Rule 27    superexp -> exp oplog
Rule 28    oplog -> MAYORQUE exp
Rule 29    oplog -> MENORQUE exp
Rule 30    oplog -> DIFERENTE exp
Rule 31    oplog -> MAYOROIGUAL exp
Rule 32    oplog -> MENOROIGUAL exp
Rule 33    oplog -> IGUALIGUAL exp
Rule 34    oplog -> empty
Rule 35    megaexp -> superexp megaexpr
Rule 36    megaexpr -> AND superexp megaexpr
Rule 37    megaexpr -> OR superexp megaexpr
Rule 38    megaexpr -> empty
Rule 39    vars -> vars3 tipo vars2 COLON
Rule 40    vars -> vars3 tipo LIST vars2 COLON
Rule 41    varsr -> COMA ID varsr
Rule 42    varsr -> empty
Rule 43    vars2 -> ID varsr
Rule 44    vars3 -> PRIVATE
Rule 45    vars3 -> empty
Rule 46    estatuto -> asignacion estatuto
Rule 47    estatuto -> condicion estatuto
Rule 48    estatuto -> escritura estatuto
Rule 49    estatuto -> for estatuto
Rule 50    estatuto -> while estatuto
Rule 51    estatuto -> when estatuto
Rule 52    estatuto -> llamada estatuto
Rule 53    estatuto -> empty
Rule 54    asignacion -> ID asignacion3 IGUAL asignacion2 COLON
Rule 55    asignacion2 -> expresion
Rule 56    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 57    asignacion2 -> READ PARIZQ assign_read PARDER
Rule 58    asignacion2 -> CID PARIZQ expresion expresionr PARDER
Rule 59    assign_read -> STRINGVAL
Rule 60    assign_read -> empty
Rule 61    asignacion2r -> COMA expresion asignacion2r
Rule 62    asignacion2r -> empty
Rule 63    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 64    asignacion3 -> PUNTO ID
Rule 65    asignacion3 -> empty
Rule 66    condicion -> IF condicion2 estatutor
Rule 67    condicion2 -> PARIZQ expresion PARDER bloque
Rule 68    condicionr -> ELSE IF condicion2
Rule 69    condicionr -> empty
Rule 70    bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 71    bloque2 -> RETURN bloque3
Rule 72    bloque2 -> empty
Rule 73    bloque3 -> expresion COLON
Rule 74    bloque3 -> empty
Rule 75    estatutor -> ELSE bloque
Rule 76    estatutor -> empty
Rule 77    escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON
Rule 78    esc1 -> expresion
Rule 79    esc1 -> STRING
Rule 80    esc2 -> COMA esc1 esc2
Rule 81    esc2 -> empty
Rule 82    tipo -> INT
Rule 83    tipo -> FLOAT
Rule 84    tipo -> BOOL
Rule 85    tipo -> STRING
Rule 86    tipo -> CID
Rule 87    factor -> PARIZQ expresion PARDER
Rule 88    factor -> factor2 varcte
Rule 89    terminor -> POR factor terminor
Rule 90    terminor -> SOBRE factor terminor
Rule 91    terminor -> empty
Rule 92    termino -> factor terminor
Rule 93    exp -> termino expr
Rule 94    expr -> MAS termino expr
Rule 95    expr -> MENOS termino expr
Rule 96    expr -> empty
Rule 97    varcter -> COMA varcte varcter
Rule 98    varcter -> empty
Rule 99    factor2 -> MAS
Rule 100   factor2 -> MENOS
Rule 101   factor2 -> empty
Rule 102   for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 103   for2 -> ID
Rule 104   for2 -> range
Rule 105   range -> INTNUM PUNTOSRANGO INTNUM
Rule 106   range -> ID PUNTOSRANGO ID
Rule 107   range -> ID PUNTOSRANGO INTNUM
Rule 108   range -> INTNUM PUNTOSRANGO ID
Rule 109   while -> WHILE PARIZQ expresion PARDER bloque
Rule 110   when -> WHEN LLAVEIZQ when2 LLAVEDER
Rule 111   when2 -> expresion FLECHITA bloque when2
Rule 112   when2 -> ELSE FLECHITA bloque
Rule 113   when2 -> empty
Rule 114   fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 115   fun2 -> tipo ID funparamr
Rule 116   fun2 -> empty
Rule 117   funparamr -> COMA tipo ID funparamr
Rule 118   funparamr -> empty
Rule 119   fun3 -> DOSPUNTOS tipo
Rule 120   fun3 -> empty
Rule 121   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 122   opc1 -> vars multvarsdecl
Rule 123   opc1 -> empty
Rule 124   opc2 -> estatuto
Rule 125   opc2 -> empty
Rule 126   body -> LLAVEIZQ body2 funr body_main LLAVEDER
Rule 127   body -> empty
Rule 128   body_main -> MAIN PARIZQ PARDER mainbloque
Rule 129   body_main -> empty
Rule 130   body2 -> vars multvarsdecl
Rule 131   body2 -> empty
Rule 132   mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER
Rule 133   multvarsdecl -> vars
Rule 134   multvarsdecl -> empty
Rule 135   funr -> fun funr
Rule 136   funr -> empty
Rule 137   llamada -> ID PARIZQ llamada_param PARDER COLON
Rule 138   llamada -> empty
Rule 139   llamada_param -> expresion expresionr
Rule 140   llamada_param -> empty
Rule 141   empty -> <empty>

Terminals, with rules where they appear

AND                  : 36
BOOL                 : 84
CID                  : 4 58 86
CLASS                : 4
COLON                : 39 40 54 73 77 137
COMA                 : 11 23 41 61 80 97 117
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 19 56 63
CORCHIZQ             : 19 56 63
DIFERENTE            : 30
DOSPUNTOS            : 5 119
ELSE                 : 68 75 112
EOL                  : 
FALSE                : 17
FLECHITA             : 111 112
FLOAT                : 83
FLOATNUM             : 15
FOR                  : 102
FUN                  : 114
GLOBAL               : 
ID                   : 5 9 11 13 19 20 20 21 41 43 54 64 102 103 106 106 107 108 114 115 117 137
IF                   : 66 68
IGUAL                : 54
IGUALIGUAL           : 33
IN                   : 102
INT                  : 82
INTNUM               : 14 105 105 107 108
LIST                 : 40
LLAVEDER             : 70 110 121 126 132
LLAVEIZQ             : 70 110 121 126 132
MAIN                 : 128
MAS                  : 94 99
MAYOROIGUAL          : 31
MAYORQUE             : 28
MENOROIGUAL          : 32
MENORQUE             : 29
MENOS                : 95 100
OR                   : 37
PARDER               : 5 7 21 57 58 67 77 87 102 109 114 128 137
PARIZQ               : 5 7 21 57 58 67 77 87 102 109 114 128 137
POR                  : 89
PRIVATE              : 44
PUNTO                : 20 64
PUNTOSRANGO          : 105 106 107 108
RANGE                : 
READ                 : 57
RETURN               : 71
SOBRE                : 90
STRING               : 79 85
STRINGVAL            : 18 59
TRUE                 : 16
WHEN                 : 110
WHILE                : 109
WRITE                : 77
error                : 

Nonterminals, with rules where they appear

asignacion           : 46
asignacion2          : 54
asignacion2r         : 56 61
asignacion3          : 54
assign_read          : 57
bloque               : 67 75 102 109 111 112
bloque2              : 70 121
bloque3              : 71
body                 : 4
body2                : 126 132
body_main            : 126
class                : 1 2
class2               : 4
classparams          : 4
classparams2         : 7
classparams3         : 9 11
classr               : 1 2
condicion            : 47
condicion2           : 66 68
condicionr           : 
empty                : 3 6 8 10 12 24 26 34 38 42 45 53 60 62 65 69 72 74 76 81 91 96 98 101 113 116 118 120 123 125 127 129 131 134 136 138 140
esc1                 : 77 80
esc2                 : 77 80
escritura            : 48
estatuto             : 46 47 48 49 50 51 52 70 124 132
estatutor            : 66
exp                  : 27 28 29 30 31 32 33
expr                 : 93 94 95
expresion            : 23 25 55 56 58 61 63 67 73 78 87 109 111 139
expresion2           : 
expresionr           : 23 25 58 139
factor               : 89 90 92
factor2              : 88
file                 : 0
for                  : 49
for2                 : 102
fun                  : 135
fun2                 : 114
fun3                 : 114
funbody              : 114
funparamr            : 115 117
funr                 : 126 135
llamada              : 52
llamada_param        : 21 137
mainbloque           : 128
megaexp              : 22
megaexpr             : 35 36 37
multvarsdecl         : 122 130
opc1                 : 121
opc2                 : 121
oplog                : 27
range                : 104
superexp             : 35 36 37
termino              : 93 94 95
terminor             : 89 90 92
tipo                 : 9 11 39 40 115 117 119
varcte               : 19 88 97
varcter              : 97
vars                 : 122 130 133
vars2                : 5 39 40
vars3                : 9 11 39 40 114
varsr                : 41 43
when                 : 51
when2                : 110 111
while                : 50

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . class classr
    (4) class -> . CLASS CID classparams class2 body

    CLASS           shift and go to state 3

    file                           shift and go to state 1
    class                          shift and go to state 2

state 1

    (0) S' -> file .



state 2

    (1) file -> class . classr
    (2) classr -> . class classr
    (3) classr -> . empty
    (4) class -> . CLASS CID classparams class2 body
    (141) empty -> .

    CLASS           shift and go to state 3
    $end            reduce using rule 141 (empty -> .)

    class                          shift and go to state 4
    classr                         shift and go to state 5
    empty                          shift and go to state 6

state 3

    (4) class -> CLASS . CID classparams class2 body

    CID             shift and go to state 7


state 4

    (2) classr -> class . classr
    (2) classr -> . class classr
    (3) classr -> . empty
    (4) class -> . CLASS CID classparams class2 body
    (141) empty -> .

    CLASS           shift and go to state 3
    $end            reduce using rule 141 (empty -> .)

    class                          shift and go to state 4
    classr                         shift and go to state 8
    empty                          shift and go to state 6

state 5

    (1) file -> class classr .

    $end            reduce using rule 1 (file -> class classr .)


state 6

    (3) classr -> empty .

    $end            reduce using rule 3 (classr -> empty .)


state 7

    (4) class -> CLASS CID . classparams class2 body
    (7) classparams -> . PARIZQ classparams2 PARDER
    (8) classparams -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 10
    DOSPUNTOS       reduce using rule 141 (empty -> .)
    LLAVEIZQ        reduce using rule 141 (empty -> .)
    CLASS           reduce using rule 141 (empty -> .)
    $end            reduce using rule 141 (empty -> .)

    classparams                    shift and go to state 9
    empty                          shift and go to state 11

state 8

    (2) classr -> class classr .

    $end            reduce using rule 2 (classr -> class classr .)


state 9

    (4) class -> CLASS CID classparams . class2 body
    (5) class2 -> . DOSPUNTOS ID PARIZQ vars2 PARDER
    (6) class2 -> . empty
    (141) empty -> .

    DOSPUNTOS       shift and go to state 13
    LLAVEIZQ        reduce using rule 141 (empty -> .)
    CLASS           reduce using rule 141 (empty -> .)
    $end            reduce using rule 141 (empty -> .)

    class2                         shift and go to state 12
    empty                          shift and go to state 14

state 10

    (7) classparams -> PARIZQ . classparams2 PARDER
    (9) classparams2 -> . vars3 tipo ID classparams3
    (10) classparams2 -> . empty
    (44) vars3 -> . PRIVATE
    (45) vars3 -> . empty
    (141) empty -> .

    PRIVATE         shift and go to state 18
    PARDER          reduce using rule 141 (empty -> .)
    INT             reduce using rule 141 (empty -> .)
    FLOAT           reduce using rule 141 (empty -> .)
    BOOL            reduce using rule 141 (empty -> .)
    STRING          reduce using rule 141 (empty -> .)
    CID             reduce using rule 141 (empty -> .)

    classparams2                   shift and go to state 15
    vars3                          shift and go to state 16
    empty                          shift and go to state 17

state 11

    (8) classparams -> empty .

    DOSPUNTOS       reduce using rule 8 (classparams -> empty .)
    LLAVEIZQ        reduce using rule 8 (classparams -> empty .)
    CLASS           reduce using rule 8 (classparams -> empty .)
    $end            reduce using rule 8 (classparams -> empty .)


state 12

    (4) class -> CLASS CID classparams class2 . body
    (126) body -> . LLAVEIZQ body2 funr body_main LLAVEDER
    (127) body -> . empty
    (141) empty -> .

    LLAVEIZQ        shift and go to state 20
    CLASS           reduce using rule 141 (empty -> .)
    $end            reduce using rule 141 (empty -> .)

    body                           shift and go to state 19
    empty                          shift and go to state 21

state 13

    (5) class2 -> DOSPUNTOS . ID PARIZQ vars2 PARDER

    ID              shift and go to state 22


state 14

    (6) class2 -> empty .

    LLAVEIZQ        reduce using rule 6 (class2 -> empty .)
    CLASS           reduce using rule 6 (class2 -> empty .)
    $end            reduce using rule 6 (class2 -> empty .)


state 15

    (7) classparams -> PARIZQ classparams2 . PARDER

    PARDER          shift and go to state 23


state 16

    (9) classparams2 -> vars3 . tipo ID classparams3
    (82) tipo -> . INT
    (83) tipo -> . FLOAT
    (84) tipo -> . BOOL
    (85) tipo -> . STRING
    (86) tipo -> . CID

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    BOOL            shift and go to state 27
    STRING          shift and go to state 28
    CID             shift and go to state 29

    tipo                           shift and go to state 24

state 17

    (10) classparams2 -> empty .
    (45) vars3 -> empty .

    PARDER          reduce using rule 10 (classparams2 -> empty .)
    INT             reduce using rule 45 (vars3 -> empty .)
    FLOAT           reduce using rule 45 (vars3 -> empty .)
    BOOL            reduce using rule 45 (vars3 -> empty .)
    STRING          reduce using rule 45 (vars3 -> empty .)
    CID             reduce using rule 45 (vars3 -> empty .)


state 18

    (44) vars3 -> PRIVATE .

    INT             reduce using rule 44 (vars3 -> PRIVATE .)
    FLOAT           reduce using rule 44 (vars3 -> PRIVATE .)
    BOOL            reduce using rule 44 (vars3 -> PRIVATE .)
    STRING          reduce using rule 44 (vars3 -> PRIVATE .)
    CID             reduce using rule 44 (vars3 -> PRIVATE .)
    FUN             reduce using rule 44 (vars3 -> PRIVATE .)


state 19

    (4) class -> CLASS CID classparams class2 body .

    CLASS           reduce using rule 4 (class -> CLASS CID classparams class2 body .)
    $end            reduce using rule 4 (class -> CLASS CID classparams class2 body .)


state 20

    (126) body -> LLAVEIZQ . body2 funr body_main LLAVEDER
    (130) body2 -> . vars multvarsdecl
    (131) body2 -> . empty
    (39) vars -> . vars3 tipo vars2 COLON
    (40) vars -> . vars3 tipo LIST vars2 COLON
    (141) empty -> .
    (44) vars3 -> . PRIVATE
    (45) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)
    FUN             reduce using rule 141 (empty -> .)
    INT             reduce using rule 141 (empty -> .)
    FLOAT           reduce using rule 141 (empty -> .)
    BOOL            reduce using rule 141 (empty -> .)
    STRING          reduce using rule 141 (empty -> .)
    CID             reduce using rule 141 (empty -> .)
    PRIVATE         shift and go to state 18

  ! PRIVATE         [ reduce using rule 141 (empty -> .) ]

    body2                          shift and go to state 30
    vars                           shift and go to state 31
    empty                          shift and go to state 32
    vars3                          shift and go to state 33

state 21

    (127) body -> empty .

    CLASS           reduce using rule 127 (body -> empty .)
    $end            reduce using rule 127 (body -> empty .)


state 22

    (5) class2 -> DOSPUNTOS ID . PARIZQ vars2 PARDER

    PARIZQ          shift and go to state 34


state 23

    (7) classparams -> PARIZQ classparams2 PARDER .

    DOSPUNTOS       reduce using rule 7 (classparams -> PARIZQ classparams2 PARDER .)
    LLAVEIZQ        reduce using rule 7 (classparams -> PARIZQ classparams2 PARDER .)
    CLASS           reduce using rule 7 (classparams -> PARIZQ classparams2 PARDER .)
    $end            reduce using rule 7 (classparams -> PARIZQ classparams2 PARDER .)


state 24

    (9) classparams2 -> vars3 tipo . ID classparams3

    ID              shift and go to state 35


state 25

    (82) tipo -> INT .

    ID              reduce using rule 82 (tipo -> INT .)
    LIST            reduce using rule 82 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 82 (tipo -> INT .)


state 26

    (83) tipo -> FLOAT .

    ID              reduce using rule 83 (tipo -> FLOAT .)
    LIST            reduce using rule 83 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 83 (tipo -> FLOAT .)


state 27

    (84) tipo -> BOOL .

    ID              reduce using rule 84 (tipo -> BOOL .)
    LIST            reduce using rule 84 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 84 (tipo -> BOOL .)


state 28

    (85) tipo -> STRING .

    ID              reduce using rule 85 (tipo -> STRING .)
    LIST            reduce using rule 85 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 85 (tipo -> STRING .)


state 29

    (86) tipo -> CID .

    ID              reduce using rule 86 (tipo -> CID .)
    LIST            reduce using rule 86 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 86 (tipo -> CID .)


state 30

    (126) body -> LLAVEIZQ body2 . funr body_main LLAVEDER
    (135) funr -> . fun funr
    (136) funr -> . empty
    (114) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (141) empty -> .
    (44) vars3 -> . PRIVATE
    (45) vars3 -> . empty

    MAIN            reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)
    FUN             reduce using rule 141 (empty -> .)
    PRIVATE         shift and go to state 18

    funr                           shift and go to state 36
    fun                            shift and go to state 37
    empty                          shift and go to state 38
    vars3                          shift and go to state 39

state 31

    (130) body2 -> vars . multvarsdecl
    (133) multvarsdecl -> . vars
    (134) multvarsdecl -> . empty
    (39) vars -> . vars3 tipo vars2 COLON
    (40) vars -> . vars3 tipo LIST vars2 COLON
    (141) empty -> .
    (44) vars3 -> . PRIVATE
    (45) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)
    FUN             reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    WHEN            reduce using rule 141 (empty -> .)
    INT             reduce using rule 141 (empty -> .)
    FLOAT           reduce using rule 141 (empty -> .)
    BOOL            reduce using rule 141 (empty -> .)
    STRING          reduce using rule 141 (empty -> .)
    CID             reduce using rule 141 (empty -> .)
    PRIVATE         shift and go to state 18

  ! PRIVATE         [ reduce using rule 141 (empty -> .) ]

    vars                           shift and go to state 40
    multvarsdecl                   shift and go to state 41
    empty                          shift and go to state 42
    vars3                          shift and go to state 33

state 32

    (131) body2 -> empty .
    (45) vars3 -> empty .

    PRIVATE         reduce using rule 131 (body2 -> empty .)
    MAIN            reduce using rule 131 (body2 -> empty .)
    LLAVEDER        reduce using rule 131 (body2 -> empty .)
    FUN             reduce using rule 131 (body2 -> empty .)
    ID              reduce using rule 131 (body2 -> empty .)
    IF              reduce using rule 131 (body2 -> empty .)
    WRITE           reduce using rule 131 (body2 -> empty .)
    FOR             reduce using rule 131 (body2 -> empty .)
    WHILE           reduce using rule 131 (body2 -> empty .)
    WHEN            reduce using rule 131 (body2 -> empty .)
    INT             reduce using rule 45 (vars3 -> empty .)
    FLOAT           reduce using rule 45 (vars3 -> empty .)
    BOOL            reduce using rule 45 (vars3 -> empty .)
    STRING          reduce using rule 45 (vars3 -> empty .)
    CID             reduce using rule 45 (vars3 -> empty .)


state 33

    (39) vars -> vars3 . tipo vars2 COLON
    (40) vars -> vars3 . tipo LIST vars2 COLON
    (82) tipo -> . INT
    (83) tipo -> . FLOAT
    (84) tipo -> . BOOL
    (85) tipo -> . STRING
    (86) tipo -> . CID

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    BOOL            shift and go to state 27
    STRING          shift and go to state 28
    CID             shift and go to state 29

    tipo                           shift and go to state 43

state 34

    (5) class2 -> DOSPUNTOS ID PARIZQ . vars2 PARDER
    (43) vars2 -> . ID varsr

    ID              shift and go to state 44

    vars2                          shift and go to state 45

state 35

    (9) classparams2 -> vars3 tipo ID . classparams3
    (11) classparams3 -> . COMA vars3 tipo ID classparams3
    (12) classparams3 -> . empty
    (141) empty -> .

    COMA            shift and go to state 47
    PARDER          reduce using rule 141 (empty -> .)

    classparams3                   shift and go to state 46
    empty                          shift and go to state 48

state 36

    (126) body -> LLAVEIZQ body2 funr . body_main LLAVEDER
    (128) body_main -> . MAIN PARIZQ PARDER mainbloque
    (129) body_main -> . empty
    (141) empty -> .

    MAIN            shift and go to state 50
    LLAVEDER        reduce using rule 141 (empty -> .)

    body_main                      shift and go to state 49
    empty                          shift and go to state 51

state 37

    (135) funr -> fun . funr
    (135) funr -> . fun funr
    (136) funr -> . empty
    (114) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (141) empty -> .
    (44) vars3 -> . PRIVATE
    (45) vars3 -> . empty

    MAIN            reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)
    FUN             reduce using rule 141 (empty -> .)
    PRIVATE         shift and go to state 18

    fun                            shift and go to state 37
    funr                           shift and go to state 52
    empty                          shift and go to state 38
    vars3                          shift and go to state 39

state 38

    (136) funr -> empty .
    (45) vars3 -> empty .

    MAIN            reduce using rule 136 (funr -> empty .)
    LLAVEDER        reduce using rule 136 (funr -> empty .)
    FUN             reduce using rule 45 (vars3 -> empty .)


state 39

    (114) fun -> vars3 . FUN ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 53


state 40

    (133) multvarsdecl -> vars .

    PRIVATE         reduce using rule 133 (multvarsdecl -> vars .)
    MAIN            reduce using rule 133 (multvarsdecl -> vars .)
    LLAVEDER        reduce using rule 133 (multvarsdecl -> vars .)
    FUN             reduce using rule 133 (multvarsdecl -> vars .)
    ID              reduce using rule 133 (multvarsdecl -> vars .)
    IF              reduce using rule 133 (multvarsdecl -> vars .)
    WRITE           reduce using rule 133 (multvarsdecl -> vars .)
    FOR             reduce using rule 133 (multvarsdecl -> vars .)
    WHILE           reduce using rule 133 (multvarsdecl -> vars .)
    WHEN            reduce using rule 133 (multvarsdecl -> vars .)
    RETURN          reduce using rule 133 (multvarsdecl -> vars .)


state 41

    (130) body2 -> vars multvarsdecl .

    PRIVATE         reduce using rule 130 (body2 -> vars multvarsdecl .)
    MAIN            reduce using rule 130 (body2 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 130 (body2 -> vars multvarsdecl .)
    FUN             reduce using rule 130 (body2 -> vars multvarsdecl .)
    ID              reduce using rule 130 (body2 -> vars multvarsdecl .)
    IF              reduce using rule 130 (body2 -> vars multvarsdecl .)
    WRITE           reduce using rule 130 (body2 -> vars multvarsdecl .)
    FOR             reduce using rule 130 (body2 -> vars multvarsdecl .)
    WHILE           reduce using rule 130 (body2 -> vars multvarsdecl .)
    WHEN            reduce using rule 130 (body2 -> vars multvarsdecl .)


state 42

    (134) multvarsdecl -> empty .
    (45) vars3 -> empty .

    PRIVATE         reduce using rule 134 (multvarsdecl -> empty .)
    MAIN            reduce using rule 134 (multvarsdecl -> empty .)
    LLAVEDER        reduce using rule 134 (multvarsdecl -> empty .)
    FUN             reduce using rule 134 (multvarsdecl -> empty .)
    ID              reduce using rule 134 (multvarsdecl -> empty .)
    IF              reduce using rule 134 (multvarsdecl -> empty .)
    WRITE           reduce using rule 134 (multvarsdecl -> empty .)
    FOR             reduce using rule 134 (multvarsdecl -> empty .)
    WHILE           reduce using rule 134 (multvarsdecl -> empty .)
    WHEN            reduce using rule 134 (multvarsdecl -> empty .)
    RETURN          reduce using rule 134 (multvarsdecl -> empty .)
    INT             reduce using rule 45 (vars3 -> empty .)
    FLOAT           reduce using rule 45 (vars3 -> empty .)
    BOOL            reduce using rule 45 (vars3 -> empty .)
    STRING          reduce using rule 45 (vars3 -> empty .)
    CID             reduce using rule 45 (vars3 -> empty .)


state 43

    (39) vars -> vars3 tipo . vars2 COLON
    (40) vars -> vars3 tipo . LIST vars2 COLON
    (43) vars2 -> . ID varsr

    LIST            shift and go to state 55
    ID              shift and go to state 44

    vars2                          shift and go to state 54

state 44

    (43) vars2 -> ID . varsr
    (41) varsr -> . COMA ID varsr
    (42) varsr -> . empty
    (141) empty -> .

    COMA            shift and go to state 57
    PARDER          reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)

    varsr                          shift and go to state 56
    empty                          shift and go to state 58

state 45

    (5) class2 -> DOSPUNTOS ID PARIZQ vars2 . PARDER

    PARDER          shift and go to state 59


state 46

    (9) classparams2 -> vars3 tipo ID classparams3 .

    PARDER          reduce using rule 9 (classparams2 -> vars3 tipo ID classparams3 .)


state 47

    (11) classparams3 -> COMA . vars3 tipo ID classparams3
    (44) vars3 -> . PRIVATE
    (45) vars3 -> . empty
    (141) empty -> .

    PRIVATE         shift and go to state 18
    INT             reduce using rule 141 (empty -> .)
    FLOAT           reduce using rule 141 (empty -> .)
    BOOL            reduce using rule 141 (empty -> .)
    STRING          reduce using rule 141 (empty -> .)
    CID             reduce using rule 141 (empty -> .)

    vars3                          shift and go to state 60
    empty                          shift and go to state 61

state 48

    (12) classparams3 -> empty .

    PARDER          reduce using rule 12 (classparams3 -> empty .)


state 49

    (126) body -> LLAVEIZQ body2 funr body_main . LLAVEDER

    LLAVEDER        shift and go to state 62


state 50

    (128) body_main -> MAIN . PARIZQ PARDER mainbloque

    PARIZQ          shift and go to state 63


state 51

    (129) body_main -> empty .

    LLAVEDER        reduce using rule 129 (body_main -> empty .)


state 52

    (135) funr -> fun funr .

    MAIN            reduce using rule 135 (funr -> fun funr .)
    LLAVEDER        reduce using rule 135 (funr -> fun funr .)


state 53

    (114) fun -> vars3 FUN . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 64


state 54

    (39) vars -> vars3 tipo vars2 . COLON

    COLON           shift and go to state 65


state 55

    (40) vars -> vars3 tipo LIST . vars2 COLON
    (43) vars2 -> . ID varsr

    ID              shift and go to state 44

    vars2                          shift and go to state 66

state 56

    (43) vars2 -> ID varsr .

    PARDER          reduce using rule 43 (vars2 -> ID varsr .)
    COLON           reduce using rule 43 (vars2 -> ID varsr .)


state 57

    (41) varsr -> COMA . ID varsr

    ID              shift and go to state 67


state 58

    (42) varsr -> empty .

    PARDER          reduce using rule 42 (varsr -> empty .)
    COLON           reduce using rule 42 (varsr -> empty .)


state 59

    (5) class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .

    LLAVEIZQ        reduce using rule 5 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)
    CLASS           reduce using rule 5 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)
    $end            reduce using rule 5 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)


state 60

    (11) classparams3 -> COMA vars3 . tipo ID classparams3
    (82) tipo -> . INT
    (83) tipo -> . FLOAT
    (84) tipo -> . BOOL
    (85) tipo -> . STRING
    (86) tipo -> . CID

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    BOOL            shift and go to state 27
    STRING          shift and go to state 28
    CID             shift and go to state 29

    tipo                           shift and go to state 68

state 61

    (45) vars3 -> empty .

    INT             reduce using rule 45 (vars3 -> empty .)
    FLOAT           reduce using rule 45 (vars3 -> empty .)
    BOOL            reduce using rule 45 (vars3 -> empty .)
    STRING          reduce using rule 45 (vars3 -> empty .)
    CID             reduce using rule 45 (vars3 -> empty .)


state 62

    (126) body -> LLAVEIZQ body2 funr body_main LLAVEDER .

    CLASS           reduce using rule 126 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)
    $end            reduce using rule 126 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)


state 63

    (128) body_main -> MAIN PARIZQ . PARDER mainbloque

    PARDER          shift and go to state 69


state 64

    (114) fun -> vars3 FUN ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 70


state 65

    (39) vars -> vars3 tipo vars2 COLON .

    PRIVATE         reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    INT             reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    FLOAT           reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    BOOL            reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    STRING          reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    CID             reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    MAIN            reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    LLAVEDER        reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    FUN             reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    ID              reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    IF              reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    WRITE           reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    FOR             reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    WHILE           reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    WHEN            reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)
    RETURN          reduce using rule 39 (vars -> vars3 tipo vars2 COLON .)


state 66

    (40) vars -> vars3 tipo LIST vars2 . COLON

    COLON           shift and go to state 71


state 67

    (41) varsr -> COMA ID . varsr
    (41) varsr -> . COMA ID varsr
    (42) varsr -> . empty
    (141) empty -> .

    COMA            shift and go to state 57
    PARDER          reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)

    varsr                          shift and go to state 72
    empty                          shift and go to state 58

state 68

    (11) classparams3 -> COMA vars3 tipo . ID classparams3

    ID              shift and go to state 73


state 69

    (128) body_main -> MAIN PARIZQ PARDER . mainbloque
    (132) mainbloque -> . LLAVEIZQ body2 estatuto LLAVEDER

    LLAVEIZQ        shift and go to state 75

    mainbloque                     shift and go to state 74

state 70

    (114) fun -> vars3 FUN ID PARIZQ . fun2 PARDER fun3 funbody
    (115) fun2 -> . tipo ID funparamr
    (116) fun2 -> . empty
    (82) tipo -> . INT
    (83) tipo -> . FLOAT
    (84) tipo -> . BOOL
    (85) tipo -> . STRING
    (86) tipo -> . CID
    (141) empty -> .

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    BOOL            shift and go to state 27
    STRING          shift and go to state 28
    CID             shift and go to state 29
    PARDER          reduce using rule 141 (empty -> .)

    fun2                           shift and go to state 76
    tipo                           shift and go to state 77
    empty                          shift and go to state 78

state 71

    (40) vars -> vars3 tipo LIST vars2 COLON .

    PRIVATE         reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    INT             reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    FLOAT           reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    BOOL            reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    STRING          reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    CID             reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    MAIN            reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    LLAVEDER        reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    FUN             reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    ID              reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    IF              reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    WRITE           reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    FOR             reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    WHILE           reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    WHEN            reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)
    RETURN          reduce using rule 40 (vars -> vars3 tipo LIST vars2 COLON .)


state 72

    (41) varsr -> COMA ID varsr .

    PARDER          reduce using rule 41 (varsr -> COMA ID varsr .)
    COLON           reduce using rule 41 (varsr -> COMA ID varsr .)


state 73

    (11) classparams3 -> COMA vars3 tipo ID . classparams3
    (11) classparams3 -> . COMA vars3 tipo ID classparams3
    (12) classparams3 -> . empty
    (141) empty -> .

    COMA            shift and go to state 47
    PARDER          reduce using rule 141 (empty -> .)

    classparams3                   shift and go to state 79
    empty                          shift and go to state 48

state 74

    (128) body_main -> MAIN PARIZQ PARDER mainbloque .

    LLAVEDER        reduce using rule 128 (body_main -> MAIN PARIZQ PARDER mainbloque .)


state 75

    (132) mainbloque -> LLAVEIZQ . body2 estatuto LLAVEDER
    (130) body2 -> . vars multvarsdecl
    (131) body2 -> . empty
    (39) vars -> . vars3 tipo vars2 COLON
    (40) vars -> . vars3 tipo LIST vars2 COLON
    (141) empty -> .
    (44) vars3 -> . PRIVATE
    (45) vars3 -> . empty

    ID              reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    WHEN            reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)
    INT             reduce using rule 141 (empty -> .)
    FLOAT           reduce using rule 141 (empty -> .)
    BOOL            reduce using rule 141 (empty -> .)
    STRING          reduce using rule 141 (empty -> .)
    CID             reduce using rule 141 (empty -> .)
    PRIVATE         shift and go to state 18

    body2                          shift and go to state 80
    vars                           shift and go to state 31
    empty                          shift and go to state 32
    vars3                          shift and go to state 33

state 76

    (114) fun -> vars3 FUN ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 81


state 77

    (115) fun2 -> tipo . ID funparamr

    ID              shift and go to state 82


state 78

    (116) fun2 -> empty .

    PARDER          reduce using rule 116 (fun2 -> empty .)


state 79

    (11) classparams3 -> COMA vars3 tipo ID classparams3 .

    PARDER          reduce using rule 11 (classparams3 -> COMA vars3 tipo ID classparams3 .)


state 80

    (132) mainbloque -> LLAVEIZQ body2 . estatuto LLAVEDER
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97
    LLAVEDER        reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 83
    asignacion                     shift and go to state 84
    condicion                      shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    while                          shift and go to state 88
    when                           shift and go to state 89
    llamada                        shift and go to state 90
    empty                          shift and go to state 91

state 81

    (114) fun -> vars3 FUN ID PARIZQ fun2 PARDER . fun3 funbody
    (119) fun3 -> . DOSPUNTOS tipo
    (120) fun3 -> . empty
    (141) empty -> .

    DOSPUNTOS       shift and go to state 99
    LLAVEIZQ        reduce using rule 141 (empty -> .)

    fun3                           shift and go to state 98
    empty                          shift and go to state 100

state 82

    (115) fun2 -> tipo ID . funparamr
    (117) funparamr -> . COMA tipo ID funparamr
    (118) funparamr -> . empty
    (141) empty -> .

    COMA            shift and go to state 102
    PARDER          reduce using rule 141 (empty -> .)

    funparamr                      shift and go to state 101
    empty                          shift and go to state 103

state 83

    (132) mainbloque -> LLAVEIZQ body2 estatuto . LLAVEDER

    LLAVEDER        shift and go to state 104


state 84

    (46) estatuto -> asignacion . estatuto
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97
    LLAVEDER        reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    asignacion                     shift and go to state 84
    estatuto                       shift and go to state 105
    condicion                      shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    while                          shift and go to state 88
    when                           shift and go to state 89
    llamada                        shift and go to state 90
    empty                          shift and go to state 91

state 85

    (47) estatuto -> condicion . estatuto
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97
    LLAVEDER        reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    condicion                      shift and go to state 85
    estatuto                       shift and go to state 106
    asignacion                     shift and go to state 84
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    while                          shift and go to state 88
    when                           shift and go to state 89
    llamada                        shift and go to state 90
    empty                          shift and go to state 91

state 86

    (48) estatuto -> escritura . estatuto
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97
    LLAVEDER        reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    escritura                      shift and go to state 86
    estatuto                       shift and go to state 107
    asignacion                     shift and go to state 84
    condicion                      shift and go to state 85
    for                            shift and go to state 87
    while                          shift and go to state 88
    when                           shift and go to state 89
    llamada                        shift and go to state 90
    empty                          shift and go to state 91

state 87

    (49) estatuto -> for . estatuto
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97
    LLAVEDER        reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    for                            shift and go to state 87
    estatuto                       shift and go to state 108
    asignacion                     shift and go to state 84
    condicion                      shift and go to state 85
    escritura                      shift and go to state 86
    while                          shift and go to state 88
    when                           shift and go to state 89
    llamada                        shift and go to state 90
    empty                          shift and go to state 91

state 88

    (50) estatuto -> while . estatuto
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97
    LLAVEDER        reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    while                          shift and go to state 88
    estatuto                       shift and go to state 109
    asignacion                     shift and go to state 84
    condicion                      shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    when                           shift and go to state 89
    llamada                        shift and go to state 90
    empty                          shift and go to state 91

state 89

    (51) estatuto -> when . estatuto
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97
    LLAVEDER        reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    when                           shift and go to state 89
    estatuto                       shift and go to state 110
    asignacion                     shift and go to state 84
    condicion                      shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    while                          shift and go to state 88
    llamada                        shift and go to state 90
    empty                          shift and go to state 91

state 90

    (52) estatuto -> llamada . estatuto
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97
    LLAVEDER        reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    llamada                        shift and go to state 90
    estatuto                       shift and go to state 111
    asignacion                     shift and go to state 84
    condicion                      shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    while                          shift and go to state 88
    when                           shift and go to state 89
    empty                          shift and go to state 91

state 91

    (53) estatuto -> empty .
    (138) llamada -> empty .

  ! reduce/reduce conflict for LLAVEDER resolved using rule 53 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 53 (estatuto -> empty .)
    LLAVEDER        reduce using rule 53 (estatuto -> empty .)
    RETURN          reduce using rule 53 (estatuto -> empty .)
    ID              reduce using rule 138 (llamada -> empty .)
    IF              reduce using rule 138 (llamada -> empty .)
    WRITE           reduce using rule 138 (llamada -> empty .)
    FOR             reduce using rule 138 (llamada -> empty .)
    WHILE           reduce using rule 138 (llamada -> empty .)
    WHEN            reduce using rule 138 (llamada -> empty .)

  ! LLAVEDER        [ reduce using rule 138 (llamada -> empty .) ]
  ! RETURN          [ reduce using rule 138 (llamada -> empty .) ]


state 92

    (54) asignacion -> ID . asignacion3 IGUAL asignacion2 COLON
    (137) llamada -> ID . PARIZQ llamada_param PARDER COLON
    (63) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (64) asignacion3 -> . PUNTO ID
    (65) asignacion3 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 113
    CORCHIZQ        shift and go to state 114
    PUNTO           shift and go to state 115
    IGUAL           reduce using rule 141 (empty -> .)

    asignacion3                    shift and go to state 112
    empty                          shift and go to state 116

state 93

    (66) condicion -> IF . condicion2 estatutor
    (67) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 118

    condicion2                     shift and go to state 117

state 94

    (77) escritura -> WRITE . PARIZQ esc1 esc2 PARDER COLON

    PARIZQ          shift and go to state 119


state 95

    (102) for -> FOR . PARIZQ ID IN for2 PARDER bloque

    PARIZQ          shift and go to state 120


state 96

    (109) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 121


state 97

    (110) when -> WHEN . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 122


state 98

    (114) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 . funbody
    (121) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 124

    funbody                        shift and go to state 123

state 99

    (119) fun3 -> DOSPUNTOS . tipo
    (82) tipo -> . INT
    (83) tipo -> . FLOAT
    (84) tipo -> . BOOL
    (85) tipo -> . STRING
    (86) tipo -> . CID

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    BOOL            shift and go to state 27
    STRING          shift and go to state 28
    CID             shift and go to state 29

    tipo                           shift and go to state 125

state 100

    (120) fun3 -> empty .

    LLAVEIZQ        reduce using rule 120 (fun3 -> empty .)


state 101

    (115) fun2 -> tipo ID funparamr .

    PARDER          reduce using rule 115 (fun2 -> tipo ID funparamr .)


state 102

    (117) funparamr -> COMA . tipo ID funparamr
    (82) tipo -> . INT
    (83) tipo -> . FLOAT
    (84) tipo -> . BOOL
    (85) tipo -> . STRING
    (86) tipo -> . CID

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    BOOL            shift and go to state 27
    STRING          shift and go to state 28
    CID             shift and go to state 29

    tipo                           shift and go to state 126

state 103

    (118) funparamr -> empty .

    PARDER          reduce using rule 118 (funparamr -> empty .)


state 104

    (132) mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .

    LLAVEDER        reduce using rule 132 (mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .)


state 105

    (46) estatuto -> asignacion estatuto .

    LLAVEDER        reduce using rule 46 (estatuto -> asignacion estatuto .)
    RETURN          reduce using rule 46 (estatuto -> asignacion estatuto .)


state 106

    (47) estatuto -> condicion estatuto .

    LLAVEDER        reduce using rule 47 (estatuto -> condicion estatuto .)
    RETURN          reduce using rule 47 (estatuto -> condicion estatuto .)


state 107

    (48) estatuto -> escritura estatuto .

    LLAVEDER        reduce using rule 48 (estatuto -> escritura estatuto .)
    RETURN          reduce using rule 48 (estatuto -> escritura estatuto .)


state 108

    (49) estatuto -> for estatuto .

    LLAVEDER        reduce using rule 49 (estatuto -> for estatuto .)
    RETURN          reduce using rule 49 (estatuto -> for estatuto .)


state 109

    (50) estatuto -> while estatuto .

    LLAVEDER        reduce using rule 50 (estatuto -> while estatuto .)
    RETURN          reduce using rule 50 (estatuto -> while estatuto .)


state 110

    (51) estatuto -> when estatuto .

    LLAVEDER        reduce using rule 51 (estatuto -> when estatuto .)
    RETURN          reduce using rule 51 (estatuto -> when estatuto .)


state 111

    (52) estatuto -> llamada estatuto .

    LLAVEDER        reduce using rule 52 (estatuto -> llamada estatuto .)
    RETURN          reduce using rule 52 (estatuto -> llamada estatuto .)


state 112

    (54) asignacion -> ID asignacion3 . IGUAL asignacion2 COLON

    IGUAL           shift and go to state 127


state 113

    (137) llamada -> ID PARIZQ . llamada_param PARDER COLON
    (139) llamada_param -> . expresion expresionr
    (140) llamada_param -> . empty
    (22) expresion -> . megaexp
    (141) empty -> .
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty

    PARDER          reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)
    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139

    llamada_param                  shift and go to state 129
    expresion                      shift and go to state 130
    empty                          shift and go to state 131
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137

state 114

    (63) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    expresion                      shift and go to state 140
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 115

    (64) asignacion3 -> PUNTO . ID

    ID              shift and go to state 142


state 116

    (65) asignacion3 -> empty .

    IGUAL           reduce using rule 65 (asignacion3 -> empty .)


state 117

    (66) condicion -> IF condicion2 . estatutor
    (75) estatutor -> . ELSE bloque
    (76) estatutor -> . empty
    (141) empty -> .

    ELSE            shift and go to state 144
    ID              reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    WHEN            reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)

    estatutor                      shift and go to state 143
    empty                          shift and go to state 145

state 118

    (67) condicion2 -> PARIZQ . expresion PARDER bloque
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    expresion                      shift and go to state 146
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 119

    (77) escritura -> WRITE PARIZQ . esc1 esc2 PARDER COLON
    (78) esc1 -> . expresion
    (79) esc1 -> . STRING
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    STRING          shift and go to state 149
    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    esc1                           shift and go to state 147
    expresion                      shift and go to state 148
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 120

    (102) for -> FOR PARIZQ . ID IN for2 PARDER bloque

    ID              shift and go to state 150


state 121

    (109) while -> WHILE PARIZQ . expresion PARDER bloque
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    expresion                      shift and go to state 151
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 122

    (110) when -> WHEN LLAVEIZQ . when2 LLAVEDER
    (111) when2 -> . expresion FLECHITA bloque when2
    (112) when2 -> . ELSE FLECHITA bloque
    (113) when2 -> . empty
    (22) expresion -> . megaexp
    (141) empty -> .
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty

    ELSE            shift and go to state 154
    LLAVEDER        reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)
    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139

    when2                          shift and go to state 152
    expresion                      shift and go to state 153
    empty                          shift and go to state 155
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137

state 123

    (114) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .

    PRIVATE         reduce using rule 114 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    FUN             reduce using rule 114 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    MAIN            reduce using rule 114 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    LLAVEDER        reduce using rule 114 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)


state 124

    (121) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (122) opc1 -> . vars multvarsdecl
    (123) opc1 -> . empty
    (39) vars -> . vars3 tipo vars2 COLON
    (40) vars -> . vars3 tipo LIST vars2 COLON
    (141) empty -> .
    (44) vars3 -> . PRIVATE
    (45) vars3 -> . empty

    ID              reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    WHEN            reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)
    INT             reduce using rule 141 (empty -> .)
    FLOAT           reduce using rule 141 (empty -> .)
    BOOL            reduce using rule 141 (empty -> .)
    STRING          reduce using rule 141 (empty -> .)
    CID             reduce using rule 141 (empty -> .)
    PRIVATE         shift and go to state 18

    opc1                           shift and go to state 156
    vars                           shift and go to state 157
    empty                          shift and go to state 158
    vars3                          shift and go to state 33

state 125

    (119) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 119 (fun3 -> DOSPUNTOS tipo .)


state 126

    (117) funparamr -> COMA tipo . ID funparamr

    ID              shift and go to state 159


state 127

    (54) asignacion -> ID asignacion3 IGUAL . asignacion2 COLON
    (55) asignacion2 -> . expresion
    (56) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (57) asignacion2 -> . READ PARIZQ assign_read PARDER
    (58) asignacion2 -> . CID PARIZQ expresion expresionr PARDER
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    CORCHDER        shift and go to state 162
    READ            shift and go to state 163
    CID             shift and go to state 164
    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    asignacion2                    shift and go to state 160
    expresion                      shift and go to state 161
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 128

    (87) factor -> PARIZQ . expresion PARDER
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    expresion                      shift and go to state 165
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 129

    (137) llamada -> ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 166


state 130

    (139) llamada_param -> expresion . expresionr
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (141) empty -> .

    COMA            shift and go to state 168
    PARDER          reduce using rule 141 (empty -> .)

    expresionr                     shift and go to state 167
    empty                          shift and go to state 169

state 131

    (140) llamada_param -> empty .
    (101) factor2 -> empty .

    PARDER          reduce using rule 140 (llamada_param -> empty .)
    ID              reduce using rule 101 (factor2 -> empty .)
    INTNUM          reduce using rule 101 (factor2 -> empty .)
    FLOATNUM        reduce using rule 101 (factor2 -> empty .)
    TRUE            reduce using rule 101 (factor2 -> empty .)
    FALSE           reduce using rule 101 (factor2 -> empty .)
    STRINGVAL       reduce using rule 101 (factor2 -> empty .)


state 132

    (22) expresion -> megaexp .

    COMA            reduce using rule 22 (expresion -> megaexp .)
    PARDER          reduce using rule 22 (expresion -> megaexp .)
    CORCHDER        reduce using rule 22 (expresion -> megaexp .)
    FLECHITA        reduce using rule 22 (expresion -> megaexp .)
    COLON           reduce using rule 22 (expresion -> megaexp .)
    CORCHIZQ        reduce using rule 22 (expresion -> megaexp .)


state 133

    (35) megaexp -> superexp . megaexpr
    (36) megaexpr -> . AND superexp megaexpr
    (37) megaexpr -> . OR superexp megaexpr
    (38) megaexpr -> . empty
    (141) empty -> .

    AND             shift and go to state 171
    OR              shift and go to state 172
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    megaexpr                       shift and go to state 170
    empty                          shift and go to state 173

state 134

    (27) superexp -> exp . oplog
    (28) oplog -> . MAYORQUE exp
    (29) oplog -> . MENORQUE exp
    (30) oplog -> . DIFERENTE exp
    (31) oplog -> . MAYOROIGUAL exp
    (32) oplog -> . MENOROIGUAL exp
    (33) oplog -> . IGUALIGUAL exp
    (34) oplog -> . empty
    (141) empty -> .

    MAYORQUE        shift and go to state 175
    MENORQUE        shift and go to state 176
    DIFERENTE       shift and go to state 177
    MAYOROIGUAL     shift and go to state 178
    MENOROIGUAL     shift and go to state 179
    IGUALIGUAL      shift and go to state 180
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    oplog                          shift and go to state 174
    empty                          shift and go to state 181

state 135

    (93) exp -> termino . expr
    (94) expr -> . MAS termino expr
    (95) expr -> . MENOS termino expr
    (96) expr -> . empty
    (141) empty -> .

    MAS             shift and go to state 183
    MENOS           shift and go to state 184
    MAYORQUE        reduce using rule 141 (empty -> .)
    MENORQUE        reduce using rule 141 (empty -> .)
    DIFERENTE       reduce using rule 141 (empty -> .)
    MAYOROIGUAL     reduce using rule 141 (empty -> .)
    MENOROIGUAL     reduce using rule 141 (empty -> .)
    IGUALIGUAL      reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    expr                           shift and go to state 182
    empty                          shift and go to state 185

state 136

    (92) termino -> factor . terminor
    (89) terminor -> . POR factor terminor
    (90) terminor -> . SOBRE factor terminor
    (91) terminor -> . empty
    (141) empty -> .

    POR             shift and go to state 187
    SOBRE           shift and go to state 188
    MAS             reduce using rule 141 (empty -> .)
    MENOS           reduce using rule 141 (empty -> .)
    MAYORQUE        reduce using rule 141 (empty -> .)
    MENORQUE        reduce using rule 141 (empty -> .)
    DIFERENTE       reduce using rule 141 (empty -> .)
    MAYOROIGUAL     reduce using rule 141 (empty -> .)
    MENOROIGUAL     reduce using rule 141 (empty -> .)
    IGUALIGUAL      reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    terminor                       shift and go to state 186
    empty                          shift and go to state 189

state 137

    (88) factor -> factor2 . varcte
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . TRUE
    (17) varcte -> . FALSE
    (18) varcte -> . STRINGVAL
    (19) varcte -> . ID CORCHIZQ varcte CORCHDER
    (20) varcte -> . ID PUNTO ID
    (21) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 191
    INTNUM          shift and go to state 192
    FLOATNUM        shift and go to state 193
    TRUE            shift and go to state 194
    FALSE           shift and go to state 195
    STRINGVAL       shift and go to state 196

    varcte                         shift and go to state 190

state 138

    (99) factor2 -> MAS .

    ID              reduce using rule 99 (factor2 -> MAS .)
    INTNUM          reduce using rule 99 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 99 (factor2 -> MAS .)
    TRUE            reduce using rule 99 (factor2 -> MAS .)
    FALSE           reduce using rule 99 (factor2 -> MAS .)
    STRINGVAL       reduce using rule 99 (factor2 -> MAS .)


state 139

    (100) factor2 -> MENOS .

    ID              reduce using rule 100 (factor2 -> MENOS .)
    INTNUM          reduce using rule 100 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 100 (factor2 -> MENOS .)
    TRUE            reduce using rule 100 (factor2 -> MENOS .)
    FALSE           reduce using rule 100 (factor2 -> MENOS .)
    STRINGVAL       reduce using rule 100 (factor2 -> MENOS .)


state 140

    (63) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 197


state 141

    (101) factor2 -> empty .

    ID              reduce using rule 101 (factor2 -> empty .)
    INTNUM          reduce using rule 101 (factor2 -> empty .)
    FLOATNUM        reduce using rule 101 (factor2 -> empty .)
    TRUE            reduce using rule 101 (factor2 -> empty .)
    FALSE           reduce using rule 101 (factor2 -> empty .)
    STRINGVAL       reduce using rule 101 (factor2 -> empty .)


state 142

    (64) asignacion3 -> PUNTO ID .

    IGUAL           reduce using rule 64 (asignacion3 -> PUNTO ID .)


state 143

    (66) condicion -> IF condicion2 estatutor .

    ID              reduce using rule 66 (condicion -> IF condicion2 estatutor .)
    IF              reduce using rule 66 (condicion -> IF condicion2 estatutor .)
    WRITE           reduce using rule 66 (condicion -> IF condicion2 estatutor .)
    FOR             reduce using rule 66 (condicion -> IF condicion2 estatutor .)
    WHILE           reduce using rule 66 (condicion -> IF condicion2 estatutor .)
    WHEN            reduce using rule 66 (condicion -> IF condicion2 estatutor .)
    LLAVEDER        reduce using rule 66 (condicion -> IF condicion2 estatutor .)
    RETURN          reduce using rule 66 (condicion -> IF condicion2 estatutor .)


state 144

    (75) estatutor -> ELSE . bloque
    (70) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 199

    bloque                         shift and go to state 198

state 145

    (76) estatutor -> empty .

    ID              reduce using rule 76 (estatutor -> empty .)
    IF              reduce using rule 76 (estatutor -> empty .)
    WRITE           reduce using rule 76 (estatutor -> empty .)
    FOR             reduce using rule 76 (estatutor -> empty .)
    WHILE           reduce using rule 76 (estatutor -> empty .)
    WHEN            reduce using rule 76 (estatutor -> empty .)
    LLAVEDER        reduce using rule 76 (estatutor -> empty .)
    RETURN          reduce using rule 76 (estatutor -> empty .)


state 146

    (67) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 200


state 147

    (77) escritura -> WRITE PARIZQ esc1 . esc2 PARDER COLON
    (80) esc2 -> . COMA esc1 esc2
    (81) esc2 -> . empty
    (141) empty -> .

    COMA            shift and go to state 202
    PARDER          reduce using rule 141 (empty -> .)

    esc2                           shift and go to state 201
    empty                          shift and go to state 203

state 148

    (78) esc1 -> expresion .

    COMA            reduce using rule 78 (esc1 -> expresion .)
    PARDER          reduce using rule 78 (esc1 -> expresion .)


state 149

    (79) esc1 -> STRING .

    COMA            reduce using rule 79 (esc1 -> STRING .)
    PARDER          reduce using rule 79 (esc1 -> STRING .)


state 150

    (102) for -> FOR PARIZQ ID . IN for2 PARDER bloque

    IN              shift and go to state 204


state 151

    (109) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 205


state 152

    (110) when -> WHEN LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 206


state 153

    (111) when2 -> expresion . FLECHITA bloque when2

    FLECHITA        shift and go to state 207


state 154

    (112) when2 -> ELSE . FLECHITA bloque

    FLECHITA        shift and go to state 208


state 155

    (113) when2 -> empty .
    (101) factor2 -> empty .

    LLAVEDER        reduce using rule 113 (when2 -> empty .)
    ID              reduce using rule 101 (factor2 -> empty .)
    INTNUM          reduce using rule 101 (factor2 -> empty .)
    FLOATNUM        reduce using rule 101 (factor2 -> empty .)
    TRUE            reduce using rule 101 (factor2 -> empty .)
    FALSE           reduce using rule 101 (factor2 -> empty .)
    STRINGVAL       reduce using rule 101 (factor2 -> empty .)


state 156

    (121) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (124) opc2 -> . estatuto
    (125) opc2 -> . empty
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (141) empty -> .
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    opc2                           shift and go to state 209
    estatuto                       shift and go to state 210
    empty                          shift and go to state 211
    asignacion                     shift and go to state 84
    condicion                      shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    while                          shift and go to state 88
    when                           shift and go to state 89
    llamada                        shift and go to state 90

state 157

    (122) opc1 -> vars . multvarsdecl
    (133) multvarsdecl -> . vars
    (134) multvarsdecl -> . empty
    (39) vars -> . vars3 tipo vars2 COLON
    (40) vars -> . vars3 tipo LIST vars2 COLON
    (141) empty -> .
    (44) vars3 -> . PRIVATE
    (45) vars3 -> . empty

    ID              reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    WHEN            reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)
    INT             reduce using rule 141 (empty -> .)
    FLOAT           reduce using rule 141 (empty -> .)
    BOOL            reduce using rule 141 (empty -> .)
    STRING          reduce using rule 141 (empty -> .)
    CID             reduce using rule 141 (empty -> .)
    PRIVATE         shift and go to state 18

    vars                           shift and go to state 40
    multvarsdecl                   shift and go to state 212
    empty                          shift and go to state 42
    vars3                          shift and go to state 33

state 158

    (123) opc1 -> empty .
    (45) vars3 -> empty .

    ID              reduce using rule 123 (opc1 -> empty .)
    IF              reduce using rule 123 (opc1 -> empty .)
    WRITE           reduce using rule 123 (opc1 -> empty .)
    FOR             reduce using rule 123 (opc1 -> empty .)
    WHILE           reduce using rule 123 (opc1 -> empty .)
    WHEN            reduce using rule 123 (opc1 -> empty .)
    RETURN          reduce using rule 123 (opc1 -> empty .)
    LLAVEDER        reduce using rule 123 (opc1 -> empty .)
    INT             reduce using rule 45 (vars3 -> empty .)
    FLOAT           reduce using rule 45 (vars3 -> empty .)
    BOOL            reduce using rule 45 (vars3 -> empty .)
    STRING          reduce using rule 45 (vars3 -> empty .)
    CID             reduce using rule 45 (vars3 -> empty .)


state 159

    (117) funparamr -> COMA tipo ID . funparamr
    (117) funparamr -> . COMA tipo ID funparamr
    (118) funparamr -> . empty
    (141) empty -> .

    COMA            shift and go to state 102
    PARDER          reduce using rule 141 (empty -> .)

    funparamr                      shift and go to state 213
    empty                          shift and go to state 103

state 160

    (54) asignacion -> ID asignacion3 IGUAL asignacion2 . COLON

    COLON           shift and go to state 214


state 161

    (55) asignacion2 -> expresion .

    COLON           reduce using rule 55 (asignacion2 -> expresion .)


state 162

    (56) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    expresion                      shift and go to state 215
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 163

    (57) asignacion2 -> READ . PARIZQ assign_read PARDER

    PARIZQ          shift and go to state 216


state 164

    (58) asignacion2 -> CID . PARIZQ expresion expresionr PARDER

    PARIZQ          shift and go to state 217


state 165

    (87) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 218


state 166

    (137) llamada -> ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 219


state 167

    (139) llamada_param -> expresion expresionr .

    PARDER          reduce using rule 139 (llamada_param -> expresion expresionr .)


state 168

    (23) expresionr -> COMA . expresion expresionr
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    expresion                      shift and go to state 220
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 169

    (24) expresionr -> empty .

    PARDER          reduce using rule 24 (expresionr -> empty .)


state 170

    (35) megaexp -> superexp megaexpr .

    COMA            reduce using rule 35 (megaexp -> superexp megaexpr .)
    PARDER          reduce using rule 35 (megaexp -> superexp megaexpr .)
    CORCHDER        reduce using rule 35 (megaexp -> superexp megaexpr .)
    FLECHITA        reduce using rule 35 (megaexp -> superexp megaexpr .)
    COLON           reduce using rule 35 (megaexp -> superexp megaexpr .)
    CORCHIZQ        reduce using rule 35 (megaexp -> superexp megaexpr .)


state 171

    (36) megaexpr -> AND . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    superexp                       shift and go to state 221
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 172

    (37) megaexpr -> OR . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    superexp                       shift and go to state 222
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 173

    (38) megaexpr -> empty .

    COMA            reduce using rule 38 (megaexpr -> empty .)
    PARDER          reduce using rule 38 (megaexpr -> empty .)
    CORCHDER        reduce using rule 38 (megaexpr -> empty .)
    FLECHITA        reduce using rule 38 (megaexpr -> empty .)
    COLON           reduce using rule 38 (megaexpr -> empty .)
    CORCHIZQ        reduce using rule 38 (megaexpr -> empty .)


state 174

    (27) superexp -> exp oplog .

    AND             reduce using rule 27 (superexp -> exp oplog .)
    OR              reduce using rule 27 (superexp -> exp oplog .)
    COMA            reduce using rule 27 (superexp -> exp oplog .)
    PARDER          reduce using rule 27 (superexp -> exp oplog .)
    CORCHDER        reduce using rule 27 (superexp -> exp oplog .)
    FLECHITA        reduce using rule 27 (superexp -> exp oplog .)
    COLON           reduce using rule 27 (superexp -> exp oplog .)
    CORCHIZQ        reduce using rule 27 (superexp -> exp oplog .)


state 175

    (28) oplog -> MAYORQUE . exp
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    exp                            shift and go to state 223
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 176

    (29) oplog -> MENORQUE . exp
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    exp                            shift and go to state 224
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 177

    (30) oplog -> DIFERENTE . exp
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    exp                            shift and go to state 225
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 178

    (31) oplog -> MAYOROIGUAL . exp
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    exp                            shift and go to state 226
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 179

    (32) oplog -> MENOROIGUAL . exp
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    exp                            shift and go to state 227
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 180

    (33) oplog -> IGUALIGUAL . exp
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    exp                            shift and go to state 228
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 181

    (34) oplog -> empty .

    AND             reduce using rule 34 (oplog -> empty .)
    OR              reduce using rule 34 (oplog -> empty .)
    COMA            reduce using rule 34 (oplog -> empty .)
    PARDER          reduce using rule 34 (oplog -> empty .)
    CORCHDER        reduce using rule 34 (oplog -> empty .)
    FLECHITA        reduce using rule 34 (oplog -> empty .)
    COLON           reduce using rule 34 (oplog -> empty .)
    CORCHIZQ        reduce using rule 34 (oplog -> empty .)


state 182

    (93) exp -> termino expr .

    MAYORQUE        reduce using rule 93 (exp -> termino expr .)
    MENORQUE        reduce using rule 93 (exp -> termino expr .)
    DIFERENTE       reduce using rule 93 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 93 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 93 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 93 (exp -> termino expr .)
    AND             reduce using rule 93 (exp -> termino expr .)
    OR              reduce using rule 93 (exp -> termino expr .)
    COMA            reduce using rule 93 (exp -> termino expr .)
    PARDER          reduce using rule 93 (exp -> termino expr .)
    CORCHDER        reduce using rule 93 (exp -> termino expr .)
    FLECHITA        reduce using rule 93 (exp -> termino expr .)
    COLON           reduce using rule 93 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 93 (exp -> termino expr .)


state 183

    (94) expr -> MAS . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    termino                        shift and go to state 229
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 184

    (95) expr -> MENOS . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    termino                        shift and go to state 230
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 185

    (96) expr -> empty .

    MAYORQUE        reduce using rule 96 (expr -> empty .)
    MENORQUE        reduce using rule 96 (expr -> empty .)
    DIFERENTE       reduce using rule 96 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 96 (expr -> empty .)
    MENOROIGUAL     reduce using rule 96 (expr -> empty .)
    IGUALIGUAL      reduce using rule 96 (expr -> empty .)
    AND             reduce using rule 96 (expr -> empty .)
    OR              reduce using rule 96 (expr -> empty .)
    COMA            reduce using rule 96 (expr -> empty .)
    PARDER          reduce using rule 96 (expr -> empty .)
    CORCHDER        reduce using rule 96 (expr -> empty .)
    FLECHITA        reduce using rule 96 (expr -> empty .)
    COLON           reduce using rule 96 (expr -> empty .)
    CORCHIZQ        reduce using rule 96 (expr -> empty .)


state 186

    (92) termino -> factor terminor .

    MAS             reduce using rule 92 (termino -> factor terminor .)
    MENOS           reduce using rule 92 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 92 (termino -> factor terminor .)
    MENORQUE        reduce using rule 92 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 92 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 92 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 92 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 92 (termino -> factor terminor .)
    AND             reduce using rule 92 (termino -> factor terminor .)
    OR              reduce using rule 92 (termino -> factor terminor .)
    COMA            reduce using rule 92 (termino -> factor terminor .)
    PARDER          reduce using rule 92 (termino -> factor terminor .)
    CORCHDER        reduce using rule 92 (termino -> factor terminor .)
    FLECHITA        reduce using rule 92 (termino -> factor terminor .)
    COLON           reduce using rule 92 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 92 (termino -> factor terminor .)


state 187

    (89) terminor -> POR . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    factor                         shift and go to state 231
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 188

    (90) terminor -> SOBRE . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    factor                         shift and go to state 232
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 189

    (91) terminor -> empty .

    MAS             reduce using rule 91 (terminor -> empty .)
    MENOS           reduce using rule 91 (terminor -> empty .)
    MAYORQUE        reduce using rule 91 (terminor -> empty .)
    MENORQUE        reduce using rule 91 (terminor -> empty .)
    DIFERENTE       reduce using rule 91 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 91 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 91 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 91 (terminor -> empty .)
    AND             reduce using rule 91 (terminor -> empty .)
    OR              reduce using rule 91 (terminor -> empty .)
    COMA            reduce using rule 91 (terminor -> empty .)
    PARDER          reduce using rule 91 (terminor -> empty .)
    CORCHDER        reduce using rule 91 (terminor -> empty .)
    FLECHITA        reduce using rule 91 (terminor -> empty .)
    COLON           reduce using rule 91 (terminor -> empty .)
    CORCHIZQ        reduce using rule 91 (terminor -> empty .)


state 190

    (88) factor -> factor2 varcte .

    POR             reduce using rule 88 (factor -> factor2 varcte .)
    SOBRE           reduce using rule 88 (factor -> factor2 varcte .)
    MAS             reduce using rule 88 (factor -> factor2 varcte .)
    MENOS           reduce using rule 88 (factor -> factor2 varcte .)
    MAYORQUE        reduce using rule 88 (factor -> factor2 varcte .)
    MENORQUE        reduce using rule 88 (factor -> factor2 varcte .)
    DIFERENTE       reduce using rule 88 (factor -> factor2 varcte .)
    MAYOROIGUAL     reduce using rule 88 (factor -> factor2 varcte .)
    MENOROIGUAL     reduce using rule 88 (factor -> factor2 varcte .)
    IGUALIGUAL      reduce using rule 88 (factor -> factor2 varcte .)
    AND             reduce using rule 88 (factor -> factor2 varcte .)
    OR              reduce using rule 88 (factor -> factor2 varcte .)
    COMA            reduce using rule 88 (factor -> factor2 varcte .)
    PARDER          reduce using rule 88 (factor -> factor2 varcte .)
    CORCHDER        reduce using rule 88 (factor -> factor2 varcte .)
    FLECHITA        reduce using rule 88 (factor -> factor2 varcte .)
    COLON           reduce using rule 88 (factor -> factor2 varcte .)
    CORCHIZQ        reduce using rule 88 (factor -> factor2 varcte .)


state 191

    (13) varcte -> ID .
    (19) varcte -> ID . CORCHIZQ varcte CORCHDER
    (20) varcte -> ID . PUNTO ID
    (21) varcte -> ID . PARIZQ llamada_param PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    POR             reduce using rule 13 (varcte -> ID .)
    SOBRE           reduce using rule 13 (varcte -> ID .)
    MAS             reduce using rule 13 (varcte -> ID .)
    MENOS           reduce using rule 13 (varcte -> ID .)
    MAYORQUE        reduce using rule 13 (varcte -> ID .)
    MENORQUE        reduce using rule 13 (varcte -> ID .)
    DIFERENTE       reduce using rule 13 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 13 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 13 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 13 (varcte -> ID .)
    AND             reduce using rule 13 (varcte -> ID .)
    OR              reduce using rule 13 (varcte -> ID .)
    COMA            reduce using rule 13 (varcte -> ID .)
    PARDER          reduce using rule 13 (varcte -> ID .)
    CORCHDER        reduce using rule 13 (varcte -> ID .)
    FLECHITA        reduce using rule 13 (varcte -> ID .)
    COLON           reduce using rule 13 (varcte -> ID .)
    CORCHIZQ        shift and go to state 233
    PUNTO           shift and go to state 234
    PARIZQ          shift and go to state 235

  ! CORCHIZQ        [ reduce using rule 13 (varcte -> ID .) ]


state 192

    (14) varcte -> INTNUM .

    POR             reduce using rule 14 (varcte -> INTNUM .)
    SOBRE           reduce using rule 14 (varcte -> INTNUM .)
    MAS             reduce using rule 14 (varcte -> INTNUM .)
    MENOS           reduce using rule 14 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 14 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 14 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 14 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 14 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 14 (varcte -> INTNUM .)
    AND             reduce using rule 14 (varcte -> INTNUM .)
    OR              reduce using rule 14 (varcte -> INTNUM .)
    COMA            reduce using rule 14 (varcte -> INTNUM .)
    PARDER          reduce using rule 14 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 14 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 14 (varcte -> INTNUM .)
    COLON           reduce using rule 14 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 14 (varcte -> INTNUM .)


state 193

    (15) varcte -> FLOATNUM .

    POR             reduce using rule 15 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 15 (varcte -> FLOATNUM .)
    MAS             reduce using rule 15 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 15 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 15 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 15 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 15 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 15 (varcte -> FLOATNUM .)
    AND             reduce using rule 15 (varcte -> FLOATNUM .)
    OR              reduce using rule 15 (varcte -> FLOATNUM .)
    COMA            reduce using rule 15 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 15 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 15 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 15 (varcte -> FLOATNUM .)
    COLON           reduce using rule 15 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 15 (varcte -> FLOATNUM .)


state 194

    (16) varcte -> TRUE .

    POR             reduce using rule 16 (varcte -> TRUE .)
    SOBRE           reduce using rule 16 (varcte -> TRUE .)
    MAS             reduce using rule 16 (varcte -> TRUE .)
    MENOS           reduce using rule 16 (varcte -> TRUE .)
    MAYORQUE        reduce using rule 16 (varcte -> TRUE .)
    MENORQUE        reduce using rule 16 (varcte -> TRUE .)
    DIFERENTE       reduce using rule 16 (varcte -> TRUE .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> TRUE .)
    MENOROIGUAL     reduce using rule 16 (varcte -> TRUE .)
    IGUALIGUAL      reduce using rule 16 (varcte -> TRUE .)
    AND             reduce using rule 16 (varcte -> TRUE .)
    OR              reduce using rule 16 (varcte -> TRUE .)
    COMA            reduce using rule 16 (varcte -> TRUE .)
    PARDER          reduce using rule 16 (varcte -> TRUE .)
    CORCHDER        reduce using rule 16 (varcte -> TRUE .)
    FLECHITA        reduce using rule 16 (varcte -> TRUE .)
    COLON           reduce using rule 16 (varcte -> TRUE .)
    CORCHIZQ        reduce using rule 16 (varcte -> TRUE .)


state 195

    (17) varcte -> FALSE .

    POR             reduce using rule 17 (varcte -> FALSE .)
    SOBRE           reduce using rule 17 (varcte -> FALSE .)
    MAS             reduce using rule 17 (varcte -> FALSE .)
    MENOS           reduce using rule 17 (varcte -> FALSE .)
    MAYORQUE        reduce using rule 17 (varcte -> FALSE .)
    MENORQUE        reduce using rule 17 (varcte -> FALSE .)
    DIFERENTE       reduce using rule 17 (varcte -> FALSE .)
    MAYOROIGUAL     reduce using rule 17 (varcte -> FALSE .)
    MENOROIGUAL     reduce using rule 17 (varcte -> FALSE .)
    IGUALIGUAL      reduce using rule 17 (varcte -> FALSE .)
    AND             reduce using rule 17 (varcte -> FALSE .)
    OR              reduce using rule 17 (varcte -> FALSE .)
    COMA            reduce using rule 17 (varcte -> FALSE .)
    PARDER          reduce using rule 17 (varcte -> FALSE .)
    CORCHDER        reduce using rule 17 (varcte -> FALSE .)
    FLECHITA        reduce using rule 17 (varcte -> FALSE .)
    COLON           reduce using rule 17 (varcte -> FALSE .)
    CORCHIZQ        reduce using rule 17 (varcte -> FALSE .)


state 196

    (18) varcte -> STRINGVAL .

    POR             reduce using rule 18 (varcte -> STRINGVAL .)
    SOBRE           reduce using rule 18 (varcte -> STRINGVAL .)
    MAS             reduce using rule 18 (varcte -> STRINGVAL .)
    MENOS           reduce using rule 18 (varcte -> STRINGVAL .)
    MAYORQUE        reduce using rule 18 (varcte -> STRINGVAL .)
    MENORQUE        reduce using rule 18 (varcte -> STRINGVAL .)
    DIFERENTE       reduce using rule 18 (varcte -> STRINGVAL .)
    MAYOROIGUAL     reduce using rule 18 (varcte -> STRINGVAL .)
    MENOROIGUAL     reduce using rule 18 (varcte -> STRINGVAL .)
    IGUALIGUAL      reduce using rule 18 (varcte -> STRINGVAL .)
    AND             reduce using rule 18 (varcte -> STRINGVAL .)
    OR              reduce using rule 18 (varcte -> STRINGVAL .)
    COMA            reduce using rule 18 (varcte -> STRINGVAL .)
    PARDER          reduce using rule 18 (varcte -> STRINGVAL .)
    CORCHDER        reduce using rule 18 (varcte -> STRINGVAL .)
    FLECHITA        reduce using rule 18 (varcte -> STRINGVAL .)
    COLON           reduce using rule 18 (varcte -> STRINGVAL .)
    CORCHIZQ        reduce using rule 18 (varcte -> STRINGVAL .)


state 197

    (63) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 63 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 198

    (75) estatutor -> ELSE bloque .

    ID              reduce using rule 75 (estatutor -> ELSE bloque .)
    IF              reduce using rule 75 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 75 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 75 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 75 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 75 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 75 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 75 (estatutor -> ELSE bloque .)


state 199

    (70) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (46) estatuto -> . asignacion estatuto
    (47) estatuto -> . condicion estatuto
    (48) estatuto -> . escritura estatuto
    (49) estatuto -> . for estatuto
    (50) estatuto -> . while estatuto
    (51) estatuto -> . when estatuto
    (52) estatuto -> . llamada estatuto
    (53) estatuto -> . empty
    (54) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (66) condicion -> . IF condicion2 estatutor
    (77) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (102) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (109) while -> . WHILE PARIZQ expresion PARDER bloque
    (110) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (137) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (138) llamada -> . empty
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 92
    IF              shift and go to state 93
    WRITE           shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    WHEN            shift and go to state 97
    RETURN          reduce using rule 141 (empty -> .)
    LLAVEDER        reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! WHEN            [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 236
    asignacion                     shift and go to state 84
    condicion                      shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    while                          shift and go to state 88
    when                           shift and go to state 89
    llamada                        shift and go to state 90
    empty                          shift and go to state 91

state 200

    (67) condicion2 -> PARIZQ expresion PARDER . bloque
    (70) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 199

    bloque                         shift and go to state 237

state 201

    (77) escritura -> WRITE PARIZQ esc1 esc2 . PARDER COLON

    PARDER          shift and go to state 238


state 202

    (80) esc2 -> COMA . esc1 esc2
    (78) esc1 -> . expresion
    (79) esc1 -> . STRING
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    STRING          shift and go to state 149
    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    esc1                           shift and go to state 239
    expresion                      shift and go to state 148
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 203

    (81) esc2 -> empty .

    PARDER          reduce using rule 81 (esc2 -> empty .)


state 204

    (102) for -> FOR PARIZQ ID IN . for2 PARDER bloque
    (103) for2 -> . ID
    (104) for2 -> . range
    (105) range -> . INTNUM PUNTOSRANGO INTNUM
    (106) range -> . ID PUNTOSRANGO ID
    (107) range -> . ID PUNTOSRANGO INTNUM
    (108) range -> . INTNUM PUNTOSRANGO ID

    ID              shift and go to state 240
    INTNUM          shift and go to state 243

    for2                           shift and go to state 241
    range                          shift and go to state 242

state 205

    (109) while -> WHILE PARIZQ expresion PARDER . bloque
    (70) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 199

    bloque                         shift and go to state 244

state 206

    (110) when -> WHEN LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 110 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 110 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 110 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 110 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 110 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 110 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 110 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 110 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)


state 207

    (111) when2 -> expresion FLECHITA . bloque when2
    (70) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 199

    bloque                         shift and go to state 245

state 208

    (112) when2 -> ELSE FLECHITA . bloque
    (70) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 199

    bloque                         shift and go to state 246

state 209

    (121) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (71) bloque2 -> . RETURN bloque3
    (72) bloque2 -> . empty
    (141) empty -> .

    RETURN          shift and go to state 248
    LLAVEDER        reduce using rule 141 (empty -> .)

    bloque2                        shift and go to state 247
    empty                          shift and go to state 249

state 210

    (124) opc2 -> estatuto .

    RETURN          reduce using rule 124 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 124 (opc2 -> estatuto .)


state 211

    (125) opc2 -> empty .
    (53) estatuto -> empty .
    (138) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 53 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 53 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 53 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 53 (estatuto -> empty .)
    RETURN          reduce using rule 53 (estatuto -> empty .)
    LLAVEDER        reduce using rule 53 (estatuto -> empty .)
    ID              reduce using rule 138 (llamada -> empty .)
    IF              reduce using rule 138 (llamada -> empty .)
    WRITE           reduce using rule 138 (llamada -> empty .)
    FOR             reduce using rule 138 (llamada -> empty .)
    WHILE           reduce using rule 138 (llamada -> empty .)
    WHEN            reduce using rule 138 (llamada -> empty .)

  ! RETURN          [ reduce using rule 125 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 125 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 138 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 138 (llamada -> empty .) ]


state 212

    (122) opc1 -> vars multvarsdecl .

    ID              reduce using rule 122 (opc1 -> vars multvarsdecl .)
    IF              reduce using rule 122 (opc1 -> vars multvarsdecl .)
    WRITE           reduce using rule 122 (opc1 -> vars multvarsdecl .)
    FOR             reduce using rule 122 (opc1 -> vars multvarsdecl .)
    WHILE           reduce using rule 122 (opc1 -> vars multvarsdecl .)
    WHEN            reduce using rule 122 (opc1 -> vars multvarsdecl .)
    RETURN          reduce using rule 122 (opc1 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 122 (opc1 -> vars multvarsdecl .)


state 213

    (117) funparamr -> COMA tipo ID funparamr .

    PARDER          reduce using rule 117 (funparamr -> COMA tipo ID funparamr .)


state 214

    (54) asignacion -> ID asignacion3 IGUAL asignacion2 COLON .

    ID              reduce using rule 54 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    IF              reduce using rule 54 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WRITE           reduce using rule 54 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    FOR             reduce using rule 54 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHILE           reduce using rule 54 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHEN            reduce using rule 54 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    LLAVEDER        reduce using rule 54 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    RETURN          reduce using rule 54 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)


state 215

    (56) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (61) asignacion2r -> . COMA expresion asignacion2r
    (62) asignacion2r -> . empty
    (141) empty -> .

    COMA            shift and go to state 251
    CORCHIZQ        reduce using rule 141 (empty -> .)

    asignacion2r                   shift and go to state 250
    empty                          shift and go to state 252

state 216

    (57) asignacion2 -> READ PARIZQ . assign_read PARDER
    (59) assign_read -> . STRINGVAL
    (60) assign_read -> . empty
    (141) empty -> .

    STRINGVAL       shift and go to state 254
    PARDER          reduce using rule 141 (empty -> .)

    assign_read                    shift and go to state 253
    empty                          shift and go to state 255

state 217

    (58) asignacion2 -> CID PARIZQ . expresion expresionr PARDER
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    expresion                      shift and go to state 256
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 218

    (87) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    FLECHITA        reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    COLON           reduce using rule 87 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 87 (factor -> PARIZQ expresion PARDER .)


state 219

    (137) llamada -> ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 137 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 137 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 137 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 137 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 137 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 137 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 137 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 137 (llamada -> ID PARIZQ llamada_param PARDER COLON .)


state 220

    (23) expresionr -> COMA expresion . expresionr
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (141) empty -> .

    COMA            shift and go to state 168
    PARDER          reduce using rule 141 (empty -> .)

    expresionr                     shift and go to state 257
    empty                          shift and go to state 169

state 221

    (36) megaexpr -> AND superexp . megaexpr
    (36) megaexpr -> . AND superexp megaexpr
    (37) megaexpr -> . OR superexp megaexpr
    (38) megaexpr -> . empty
    (141) empty -> .

    AND             shift and go to state 171
    OR              shift and go to state 172
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    megaexpr                       shift and go to state 258
    empty                          shift and go to state 173

state 222

    (37) megaexpr -> OR superexp . megaexpr
    (36) megaexpr -> . AND superexp megaexpr
    (37) megaexpr -> . OR superexp megaexpr
    (38) megaexpr -> . empty
    (141) empty -> .

    AND             shift and go to state 171
    OR              shift and go to state 172
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    megaexpr                       shift and go to state 259
    empty                          shift and go to state 173

state 223

    (28) oplog -> MAYORQUE exp .

    AND             reduce using rule 28 (oplog -> MAYORQUE exp .)
    OR              reduce using rule 28 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 28 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 28 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 28 (oplog -> MAYORQUE exp .)
    FLECHITA        reduce using rule 28 (oplog -> MAYORQUE exp .)
    COLON           reduce using rule 28 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 28 (oplog -> MAYORQUE exp .)


state 224

    (29) oplog -> MENORQUE exp .

    AND             reduce using rule 29 (oplog -> MENORQUE exp .)
    OR              reduce using rule 29 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 29 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 29 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 29 (oplog -> MENORQUE exp .)
    FLECHITA        reduce using rule 29 (oplog -> MENORQUE exp .)
    COLON           reduce using rule 29 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 29 (oplog -> MENORQUE exp .)


state 225

    (30) oplog -> DIFERENTE exp .

    AND             reduce using rule 30 (oplog -> DIFERENTE exp .)
    OR              reduce using rule 30 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 30 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 30 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 30 (oplog -> DIFERENTE exp .)
    FLECHITA        reduce using rule 30 (oplog -> DIFERENTE exp .)
    COLON           reduce using rule 30 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 30 (oplog -> DIFERENTE exp .)


state 226

    (31) oplog -> MAYOROIGUAL exp .

    AND             reduce using rule 31 (oplog -> MAYOROIGUAL exp .)
    OR              reduce using rule 31 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 31 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 31 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 31 (oplog -> MAYOROIGUAL exp .)
    FLECHITA        reduce using rule 31 (oplog -> MAYOROIGUAL exp .)
    COLON           reduce using rule 31 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 31 (oplog -> MAYOROIGUAL exp .)


state 227

    (32) oplog -> MENOROIGUAL exp .

    AND             reduce using rule 32 (oplog -> MENOROIGUAL exp .)
    OR              reduce using rule 32 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 32 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 32 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 32 (oplog -> MENOROIGUAL exp .)
    FLECHITA        reduce using rule 32 (oplog -> MENOROIGUAL exp .)
    COLON           reduce using rule 32 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 32 (oplog -> MENOROIGUAL exp .)


state 228

    (33) oplog -> IGUALIGUAL exp .

    AND             reduce using rule 33 (oplog -> IGUALIGUAL exp .)
    OR              reduce using rule 33 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 33 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 33 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 33 (oplog -> IGUALIGUAL exp .)
    FLECHITA        reduce using rule 33 (oplog -> IGUALIGUAL exp .)
    COLON           reduce using rule 33 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 33 (oplog -> IGUALIGUAL exp .)


state 229

    (94) expr -> MAS termino . expr
    (94) expr -> . MAS termino expr
    (95) expr -> . MENOS termino expr
    (96) expr -> . empty
    (141) empty -> .

    MAS             shift and go to state 183
    MENOS           shift and go to state 184
    MAYORQUE        reduce using rule 141 (empty -> .)
    MENORQUE        reduce using rule 141 (empty -> .)
    DIFERENTE       reduce using rule 141 (empty -> .)
    MAYOROIGUAL     reduce using rule 141 (empty -> .)
    MENOROIGUAL     reduce using rule 141 (empty -> .)
    IGUALIGUAL      reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    expr                           shift and go to state 260
    empty                          shift and go to state 185

state 230

    (95) expr -> MENOS termino . expr
    (94) expr -> . MAS termino expr
    (95) expr -> . MENOS termino expr
    (96) expr -> . empty
    (141) empty -> .

    MAS             shift and go to state 183
    MENOS           shift and go to state 184
    MAYORQUE        reduce using rule 141 (empty -> .)
    MENORQUE        reduce using rule 141 (empty -> .)
    DIFERENTE       reduce using rule 141 (empty -> .)
    MAYOROIGUAL     reduce using rule 141 (empty -> .)
    MENOROIGUAL     reduce using rule 141 (empty -> .)
    IGUALIGUAL      reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    expr                           shift and go to state 261
    empty                          shift and go to state 185

state 231

    (89) terminor -> POR factor . terminor
    (89) terminor -> . POR factor terminor
    (90) terminor -> . SOBRE factor terminor
    (91) terminor -> . empty
    (141) empty -> .

    POR             shift and go to state 187
    SOBRE           shift and go to state 188
    MAS             reduce using rule 141 (empty -> .)
    MENOS           reduce using rule 141 (empty -> .)
    MAYORQUE        reduce using rule 141 (empty -> .)
    MENORQUE        reduce using rule 141 (empty -> .)
    DIFERENTE       reduce using rule 141 (empty -> .)
    MAYOROIGUAL     reduce using rule 141 (empty -> .)
    MENOROIGUAL     reduce using rule 141 (empty -> .)
    IGUALIGUAL      reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    terminor                       shift and go to state 262
    empty                          shift and go to state 189

state 232

    (90) terminor -> SOBRE factor . terminor
    (89) terminor -> . POR factor terminor
    (90) terminor -> . SOBRE factor terminor
    (91) terminor -> . empty
    (141) empty -> .

    POR             shift and go to state 187
    SOBRE           shift and go to state 188
    MAS             reduce using rule 141 (empty -> .)
    MENOS           reduce using rule 141 (empty -> .)
    MAYORQUE        reduce using rule 141 (empty -> .)
    MENORQUE        reduce using rule 141 (empty -> .)
    DIFERENTE       reduce using rule 141 (empty -> .)
    MAYOROIGUAL     reduce using rule 141 (empty -> .)
    MENOROIGUAL     reduce using rule 141 (empty -> .)
    IGUALIGUAL      reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    PARDER          reduce using rule 141 (empty -> .)
    CORCHDER        reduce using rule 141 (empty -> .)
    FLECHITA        reduce using rule 141 (empty -> .)
    COLON           reduce using rule 141 (empty -> .)
    CORCHIZQ        reduce using rule 141 (empty -> .)

    terminor                       shift and go to state 263
    empty                          shift and go to state 189

state 233

    (19) varcte -> ID CORCHIZQ . varcte CORCHDER
    (13) varcte -> . ID
    (14) varcte -> . INTNUM
    (15) varcte -> . FLOATNUM
    (16) varcte -> . TRUE
    (17) varcte -> . FALSE
    (18) varcte -> . STRINGVAL
    (19) varcte -> . ID CORCHIZQ varcte CORCHDER
    (20) varcte -> . ID PUNTO ID
    (21) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 191
    INTNUM          shift and go to state 192
    FLOATNUM        shift and go to state 193
    TRUE            shift and go to state 194
    FALSE           shift and go to state 195
    STRINGVAL       shift and go to state 196

    varcte                         shift and go to state 264

state 234

    (20) varcte -> ID PUNTO . ID

    ID              shift and go to state 265


state 235

    (21) varcte -> ID PARIZQ . llamada_param PARDER
    (139) llamada_param -> . expresion expresionr
    (140) llamada_param -> . empty
    (22) expresion -> . megaexp
    (141) empty -> .
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty

    PARDER          reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)
    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139

    llamada_param                  shift and go to state 266
    expresion                      shift and go to state 130
    empty                          shift and go to state 131
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137

state 236

    (70) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (71) bloque2 -> . RETURN bloque3
    (72) bloque2 -> . empty
    (141) empty -> .

    RETURN          shift and go to state 248
    LLAVEDER        reduce using rule 141 (empty -> .)

    bloque2                        shift and go to state 267
    empty                          shift and go to state 249

state 237

    (67) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 67 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 67 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 67 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 67 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 67 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 67 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 67 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 67 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 67 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 238

    (77) escritura -> WRITE PARIZQ esc1 esc2 PARDER . COLON

    COLON           shift and go to state 268


state 239

    (80) esc2 -> COMA esc1 . esc2
    (80) esc2 -> . COMA esc1 esc2
    (81) esc2 -> . empty
    (141) empty -> .

    COMA            shift and go to state 202
    PARDER          reduce using rule 141 (empty -> .)

    esc2                           shift and go to state 269
    empty                          shift and go to state 203

state 240

    (103) for2 -> ID .
    (106) range -> ID . PUNTOSRANGO ID
    (107) range -> ID . PUNTOSRANGO INTNUM

    PARDER          reduce using rule 103 (for2 -> ID .)
    PUNTOSRANGO     shift and go to state 270


state 241

    (102) for -> FOR PARIZQ ID IN for2 . PARDER bloque

    PARDER          shift and go to state 271


state 242

    (104) for2 -> range .

    PARDER          reduce using rule 104 (for2 -> range .)


state 243

    (105) range -> INTNUM . PUNTOSRANGO INTNUM
    (108) range -> INTNUM . PUNTOSRANGO ID

    PUNTOSRANGO     shift and go to state 272


state 244

    (109) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 109 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 109 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 109 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 109 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 109 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 109 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 109 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 109 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 245

    (111) when2 -> expresion FLECHITA bloque . when2
    (111) when2 -> . expresion FLECHITA bloque when2
    (112) when2 -> . ELSE FLECHITA bloque
    (113) when2 -> . empty
    (22) expresion -> . megaexp
    (141) empty -> .
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty

    ELSE            shift and go to state 154
    LLAVEDER        reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)
    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139

    expresion                      shift and go to state 153
    when2                          shift and go to state 273
    empty                          shift and go to state 155
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137

state 246

    (112) when2 -> ELSE FLECHITA bloque .

    LLAVEDER        reduce using rule 112 (when2 -> ELSE FLECHITA bloque .)


state 247

    (121) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 274


state 248

    (71) bloque2 -> RETURN . bloque3
    (73) bloque3 -> . expresion COLON
    (74) bloque3 -> . empty
    (22) expresion -> . megaexp
    (141) empty -> .
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty

    LLAVEDER        reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)
    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139

    bloque3                        shift and go to state 275
    expresion                      shift and go to state 276
    empty                          shift and go to state 277
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137

state 249

    (72) bloque2 -> empty .

    LLAVEDER        reduce using rule 72 (bloque2 -> empty .)


state 250

    (56) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 278


state 251

    (61) asignacion2r -> COMA . expresion asignacion2r
    (22) expresion -> . megaexp
    (35) megaexp -> . superexp megaexpr
    (27) superexp -> . exp oplog
    (93) exp -> . termino expr
    (92) termino -> . factor terminor
    (87) factor -> . PARIZQ expresion PARDER
    (88) factor -> . factor2 varcte
    (99) factor2 -> . MAS
    (100) factor2 -> . MENOS
    (101) factor2 -> . empty
    (141) empty -> .

    PARIZQ          shift and go to state 128
    MAS             shift and go to state 138
    MENOS           shift and go to state 139
    ID              reduce using rule 141 (empty -> .)
    INTNUM          reduce using rule 141 (empty -> .)
    FLOATNUM        reduce using rule 141 (empty -> .)
    TRUE            reduce using rule 141 (empty -> .)
    FALSE           reduce using rule 141 (empty -> .)
    STRINGVAL       reduce using rule 141 (empty -> .)

    expresion                      shift and go to state 279
    megaexp                        shift and go to state 132
    superexp                       shift and go to state 133
    exp                            shift and go to state 134
    termino                        shift and go to state 135
    factor                         shift and go to state 136
    factor2                        shift and go to state 137
    empty                          shift and go to state 141

state 252

    (62) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 62 (asignacion2r -> empty .)


state 253

    (57) asignacion2 -> READ PARIZQ assign_read . PARDER

    PARDER          shift and go to state 280


state 254

    (59) assign_read -> STRINGVAL .

    PARDER          reduce using rule 59 (assign_read -> STRINGVAL .)


state 255

    (60) assign_read -> empty .

    PARDER          reduce using rule 60 (assign_read -> empty .)


state 256

    (58) asignacion2 -> CID PARIZQ expresion . expresionr PARDER
    (23) expresionr -> . COMA expresion expresionr
    (24) expresionr -> . empty
    (141) empty -> .

    COMA            shift and go to state 168
    PARDER          reduce using rule 141 (empty -> .)

    expresionr                     shift and go to state 281
    empty                          shift and go to state 169

state 257

    (23) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 23 (expresionr -> COMA expresion expresionr .)


state 258

    (36) megaexpr -> AND superexp megaexpr .

    COMA            reduce using rule 36 (megaexpr -> AND superexp megaexpr .)
    PARDER          reduce using rule 36 (megaexpr -> AND superexp megaexpr .)
    CORCHDER        reduce using rule 36 (megaexpr -> AND superexp megaexpr .)
    FLECHITA        reduce using rule 36 (megaexpr -> AND superexp megaexpr .)
    COLON           reduce using rule 36 (megaexpr -> AND superexp megaexpr .)
    CORCHIZQ        reduce using rule 36 (megaexpr -> AND superexp megaexpr .)


state 259

    (37) megaexpr -> OR superexp megaexpr .

    COMA            reduce using rule 37 (megaexpr -> OR superexp megaexpr .)
    PARDER          reduce using rule 37 (megaexpr -> OR superexp megaexpr .)
    CORCHDER        reduce using rule 37 (megaexpr -> OR superexp megaexpr .)
    FLECHITA        reduce using rule 37 (megaexpr -> OR superexp megaexpr .)
    COLON           reduce using rule 37 (megaexpr -> OR superexp megaexpr .)
    CORCHIZQ        reduce using rule 37 (megaexpr -> OR superexp megaexpr .)


state 260

    (94) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 94 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 94 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 94 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 94 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 94 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 94 (expr -> MAS termino expr .)
    AND             reduce using rule 94 (expr -> MAS termino expr .)
    OR              reduce using rule 94 (expr -> MAS termino expr .)
    COMA            reduce using rule 94 (expr -> MAS termino expr .)
    PARDER          reduce using rule 94 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 94 (expr -> MAS termino expr .)
    FLECHITA        reduce using rule 94 (expr -> MAS termino expr .)
    COLON           reduce using rule 94 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 94 (expr -> MAS termino expr .)


state 261

    (95) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 95 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 95 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 95 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 95 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 95 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 95 (expr -> MENOS termino expr .)
    AND             reduce using rule 95 (expr -> MENOS termino expr .)
    OR              reduce using rule 95 (expr -> MENOS termino expr .)
    COMA            reduce using rule 95 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 95 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 95 (expr -> MENOS termino expr .)
    FLECHITA        reduce using rule 95 (expr -> MENOS termino expr .)
    COLON           reduce using rule 95 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 95 (expr -> MENOS termino expr .)


state 262

    (89) terminor -> POR factor terminor .

    MAS             reduce using rule 89 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 89 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 89 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 89 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 89 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 89 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 89 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 89 (terminor -> POR factor terminor .)
    AND             reduce using rule 89 (terminor -> POR factor terminor .)
    OR              reduce using rule 89 (terminor -> POR factor terminor .)
    COMA            reduce using rule 89 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 89 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 89 (terminor -> POR factor terminor .)
    FLECHITA        reduce using rule 89 (terminor -> POR factor terminor .)
    COLON           reduce using rule 89 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 89 (terminor -> POR factor terminor .)


state 263

    (90) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 90 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 90 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 90 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 90 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 90 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 90 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 90 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 90 (terminor -> SOBRE factor terminor .)
    AND             reduce using rule 90 (terminor -> SOBRE factor terminor .)
    OR              reduce using rule 90 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 90 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 90 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 90 (terminor -> SOBRE factor terminor .)
    FLECHITA        reduce using rule 90 (terminor -> SOBRE factor terminor .)
    COLON           reduce using rule 90 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 90 (terminor -> SOBRE factor terminor .)


state 264

    (19) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 282


state 265

    (20) varcte -> ID PUNTO ID .

    POR             reduce using rule 20 (varcte -> ID PUNTO ID .)
    SOBRE           reduce using rule 20 (varcte -> ID PUNTO ID .)
    MAS             reduce using rule 20 (varcte -> ID PUNTO ID .)
    MENOS           reduce using rule 20 (varcte -> ID PUNTO ID .)
    MAYORQUE        reduce using rule 20 (varcte -> ID PUNTO ID .)
    MENORQUE        reduce using rule 20 (varcte -> ID PUNTO ID .)
    DIFERENTE       reduce using rule 20 (varcte -> ID PUNTO ID .)
    MAYOROIGUAL     reduce using rule 20 (varcte -> ID PUNTO ID .)
    MENOROIGUAL     reduce using rule 20 (varcte -> ID PUNTO ID .)
    IGUALIGUAL      reduce using rule 20 (varcte -> ID PUNTO ID .)
    AND             reduce using rule 20 (varcte -> ID PUNTO ID .)
    OR              reduce using rule 20 (varcte -> ID PUNTO ID .)
    COMA            reduce using rule 20 (varcte -> ID PUNTO ID .)
    PARDER          reduce using rule 20 (varcte -> ID PUNTO ID .)
    CORCHDER        reduce using rule 20 (varcte -> ID PUNTO ID .)
    FLECHITA        reduce using rule 20 (varcte -> ID PUNTO ID .)
    COLON           reduce using rule 20 (varcte -> ID PUNTO ID .)
    CORCHIZQ        reduce using rule 20 (varcte -> ID PUNTO ID .)


state 266

    (21) varcte -> ID PARIZQ llamada_param . PARDER

    PARDER          shift and go to state 283


state 267

    (70) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 284


state 268

    (77) escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .

    ID              reduce using rule 77 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    IF              reduce using rule 77 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WRITE           reduce using rule 77 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    FOR             reduce using rule 77 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHILE           reduce using rule 77 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHEN            reduce using rule 77 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    LLAVEDER        reduce using rule 77 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    RETURN          reduce using rule 77 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)


state 269

    (80) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 80 (esc2 -> COMA esc1 esc2 .)


state 270

    (106) range -> ID PUNTOSRANGO . ID
    (107) range -> ID PUNTOSRANGO . INTNUM

    ID              shift and go to state 285
    INTNUM          shift and go to state 286


state 271

    (102) for -> FOR PARIZQ ID IN for2 PARDER . bloque
    (70) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 199

    bloque                         shift and go to state 287

state 272

    (105) range -> INTNUM PUNTOSRANGO . INTNUM
    (108) range -> INTNUM PUNTOSRANGO . ID

    INTNUM          shift and go to state 288
    ID              shift and go to state 289


state 273

    (111) when2 -> expresion FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 111 (when2 -> expresion FLECHITA bloque when2 .)


state 274

    (121) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    PRIVATE         reduce using rule 121 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    FUN             reduce using rule 121 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    MAIN            reduce using rule 121 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 121 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 275

    (71) bloque2 -> RETURN bloque3 .

    LLAVEDER        reduce using rule 71 (bloque2 -> RETURN bloque3 .)


state 276

    (73) bloque3 -> expresion . COLON

    COLON           shift and go to state 290


state 277

    (74) bloque3 -> empty .
    (101) factor2 -> empty .

    LLAVEDER        reduce using rule 74 (bloque3 -> empty .)
    ID              reduce using rule 101 (factor2 -> empty .)
    INTNUM          reduce using rule 101 (factor2 -> empty .)
    FLOATNUM        reduce using rule 101 (factor2 -> empty .)
    TRUE            reduce using rule 101 (factor2 -> empty .)
    FALSE           reduce using rule 101 (factor2 -> empty .)
    STRINGVAL       reduce using rule 101 (factor2 -> empty .)


state 278

    (56) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    COLON           reduce using rule 56 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 279

    (61) asignacion2r -> COMA expresion . asignacion2r
    (61) asignacion2r -> . COMA expresion asignacion2r
    (62) asignacion2r -> . empty
    (141) empty -> .

    COMA            shift and go to state 251
    CORCHIZQ        reduce using rule 141 (empty -> .)

    asignacion2r                   shift and go to state 291
    empty                          shift and go to state 252

state 280

    (57) asignacion2 -> READ PARIZQ assign_read PARDER .

    COLON           reduce using rule 57 (asignacion2 -> READ PARIZQ assign_read PARDER .)


state 281

    (58) asignacion2 -> CID PARIZQ expresion expresionr . PARDER

    PARDER          shift and go to state 292


state 282

    (19) varcte -> ID CORCHIZQ varcte CORCHDER .

    POR             reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    AND             reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    OR              reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COMA            reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COLON           reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 19 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 283

    (21) varcte -> ID PARIZQ llamada_param PARDER .

    POR             reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    SOBRE           reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAS             reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOS           reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYORQUE        reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENORQUE        reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    DIFERENTE       reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYOROIGUAL     reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOROIGUAL     reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    IGUALIGUAL      reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    AND             reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    OR              reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    COMA            reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    PARDER          reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHDER        reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    FLECHITA        reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    COLON           reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHIZQ        reduce using rule 21 (varcte -> ID PARIZQ llamada_param PARDER .)


state 284

    (70) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    ID              reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    PARIZQ          reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MAS             reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MENOS           reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    TRUE            reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FALSE           reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRINGVAL       reduce using rule 70 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 285

    (106) range -> ID PUNTOSRANGO ID .

    PARDER          reduce using rule 106 (range -> ID PUNTOSRANGO ID .)


state 286

    (107) range -> ID PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 107 (range -> ID PUNTOSRANGO INTNUM .)


state 287

    (102) for -> FOR PARIZQ ID IN for2 PARDER bloque .

    ID              reduce using rule 102 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    IF              reduce using rule 102 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WRITE           reduce using rule 102 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    FOR             reduce using rule 102 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHILE           reduce using rule 102 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHEN            reduce using rule 102 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    LLAVEDER        reduce using rule 102 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    RETURN          reduce using rule 102 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)


state 288

    (105) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 105 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 289

    (108) range -> INTNUM PUNTOSRANGO ID .

    PARDER          reduce using rule 108 (range -> INTNUM PUNTOSRANGO ID .)


state 290

    (73) bloque3 -> expresion COLON .

    LLAVEDER        reduce using rule 73 (bloque3 -> expresion COLON .)


state 291

    (61) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 61 (asignacion2r -> COMA expresion asignacion2r .)


state 292

    (58) asignacion2 -> CID PARIZQ expresion expresionr PARDER .

    COLON           reduce using rule 58 (asignacion2 -> CID PARIZQ expresion expresionr PARDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 20 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 31 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 85 resolved as shift
WARNING: shift/reduce conflict for FOR in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 86 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 86 resolved as shift
WARNING: shift/reduce conflict for FOR in state 86 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 86 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 86 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for IF in state 87 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 87 resolved as shift
WARNING: shift/reduce conflict for FOR in state 87 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 87 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 156 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 156 resolved as shift
WARNING: shift/reduce conflict for FOR in state 156 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 156 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 156 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 191 resolved as shift
WARNING: shift/reduce conflict for ID in state 199 resolved as shift
WARNING: shift/reduce conflict for IF in state 199 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 199 resolved as shift
WARNING: shift/reduce conflict for FOR in state 199 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 199 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 199 resolved as shift
WARNING: reduce/reduce conflict in state 91 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 91
WARNING: reduce/reduce conflict in state 211 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 211
WARNING: reduce/reduce conflict in state 211 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 211
WARNING: Rule (opc2 -> empty) is never reduced
