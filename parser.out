Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    RANGE
    STRINGVAL

Grammar

Rule 0     S' -> class
Rule 1     resultado -> class
Rule 2     class -> CLASS CID classparams class2 body
Rule 3     class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER
Rule 4     class2 -> empty
Rule 5     classparams -> PARIZQ classparams2 PARDER
Rule 6     classparams2 -> vars
Rule 7     classparams2 -> empty
Rule 8     varcte -> ID
Rule 9     varcte -> INTNUM
Rule 10    varcte -> FLOATNUM
Rule 11    varcte -> TRUE
Rule 12    varcte -> FALSE
Rule 13    varcte -> STRING
Rule 14    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 15    varcte -> ID PUNTO ID
Rule 16    varcte -> ID PARIZQ expresion2 PARDER
Rule 17    expresion -> megaexp
Rule 18    expresionr -> COMA expresion expresionr
Rule 19    expresionr -> empty
Rule 20    expresion2 -> expresion expresionr
Rule 21    expresion2 -> empty
Rule 22    superexp -> exp oplog
Rule 23    oplog -> MAYORQUE exp
Rule 24    oplog -> MENORQUE exp
Rule 25    oplog -> DIFERENTE exp
Rule 26    oplog -> MAYOROIGUAL exp
Rule 27    oplog -> MENOROIGUAL exp
Rule 28    oplog -> IGUALIGUAL exp
Rule 29    oplog -> empty
Rule 30    megaexp -> superexp megaexpr
Rule 31    megaexpr -> AND superexp megaexpr
Rule 32    megaexpr -> OR superexp megaexpr
Rule 33    megaexpr -> empty
Rule 34    vars -> vars3 tipo vars2 COLON
Rule 35    vars -> vars3 tipo LIST vars2 COLON
Rule 36    varsr -> COMA ID varsr
Rule 37    varsr -> empty
Rule 38    vars2 -> ID varsr
Rule 39    vars3 -> PRIVATE
Rule 40    vars3 -> empty
Rule 41    estatuto -> asignacion estatuto
Rule 42    estatuto -> condicion estatuto
Rule 43    estatuto -> escritura estatuto
Rule 44    estatuto -> for estatuto
Rule 45    estatuto -> while estatuto
Rule 46    estatuto -> when estatuto
Rule 47    estatuto -> llamada estatuto
Rule 48    estatuto -> empty
Rule 49    asignacion -> ID asignacion3 IGUAL asignacion2 COLON
Rule 50    asignacion2 -> expresion
Rule 51    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 52    asignacion2 -> READ PARIZQ STRING PARDER
Rule 53    asignacion2r -> COMA expresion asignacion2r
Rule 54    asignacion2r -> empty
Rule 55    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 56    asignacion3 -> PUNTO ID
Rule 57    asignacion3 -> empty
Rule 58    condicion -> IF condicion2 estatutor
Rule 59    condicion2 -> PARIZQ expresion PARDER bloque
Rule 60    condicionr -> ELSE IF condicion2
Rule 61    condicionr -> empty
Rule 62    bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 63    bloque2 -> RETURN bloque3
Rule 64    bloque2 -> empty
Rule 65    bloque3 -> expresion COLON
Rule 66    bloque3 -> empty
Rule 67    estatutor -> ELSE bloque
Rule 68    estatutor -> empty
Rule 69    escritura -> WRITE PARIZQ esc1 esc2 PARDER
Rule 70    esc1 -> expresion
Rule 71    esc1 -> STRING
Rule 72    esc2 -> COMA esc1 esc2
Rule 73    esc2 -> empty
Rule 74    tipo -> INT
Rule 75    tipo -> FLOAT
Rule 76    tipo -> BOOL
Rule 77    tipo -> STRING
Rule 78    tipo -> CID
Rule 79    factor -> PARIZQ expresion PARDER
Rule 80    factor -> factor2 varcte
Rule 81    terminor -> POR factor terminor
Rule 82    terminor -> SOBRE factor terminor
Rule 83    terminor -> empty
Rule 84    termino -> factor terminor
Rule 85    exp -> termino expr
Rule 86    expr -> MAS termino expr
Rule 87    expr -> MENOS termino expr
Rule 88    expr -> empty
Rule 89    varcter -> COMA varcte varcter
Rule 90    varcter -> empty
Rule 91    factor2 -> MAS
Rule 92    factor2 -> MENOS
Rule 93    factor2 -> empty
Rule 94    for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 95    for2 -> ID
Rule 96    for2 -> range
Rule 97    range -> INTNUM PUNTOSRANGO INTNUM
Rule 98    range -> ID PUNTOSRANGO ID
Rule 99    while -> WHILE PARIZQ expresion PARDER bloque
Rule 100   when -> WHEN LLAVEIZQ when2 LLAVEDER
Rule 101   when2 -> expresion FLECHITA bloque when2
Rule 102   when2 -> ELSE FLECHITA bloque
Rule 103   when2 -> empty
Rule 104   fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 105   fun2 -> tipo ID funparamr
Rule 106   fun2 -> empty
Rule 107   funparamr -> COMA tipo ID funparamr
Rule 108   funparamr -> empty
Rule 109   fun3 -> DOSPUNTOS tipo
Rule 110   fun3 -> empty
Rule 111   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 112   opc1 -> vars multvarsdecl
Rule 113   opc1 -> empty
Rule 114   opc2 -> estatuto
Rule 115   opc2 -> empty
Rule 116   body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER
Rule 117   body2 -> vars multvarsdecl
Rule 118   body2 -> empty
Rule 119   multvarsdecl -> vars
Rule 120   multvarsdecl -> empty
Rule 121   funr -> fun funr
Rule 122   funr -> empty
Rule 123   llamada -> ID PARIZQ llamada_param PARDER COLON
Rule 124   llamada -> empty
Rule 125   llamada_param -> expresion expresionr
Rule 126   llamada_param -> empty
Rule 127   empty -> <empty>

Terminals, with rules where they appear

AND                  : 31
BOOL                 : 76
CID                  : 2 78
CLASS                : 2
COLON                : 34 35 49 65 123
COMA                 : 18 36 53 72 89 107
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 14 51 55
CORCHIZQ             : 14 51 55
DIFERENTE            : 25
DOSPUNTOS            : 3 109
ELSE                 : 60 67 102
EOL                  : 
FALSE                : 12
FLECHITA             : 101 102
FLOAT                : 75
FLOATNUM             : 10
FOR                  : 94
FUN                  : 104
GLOBAL               : 
ID                   : 3 8 14 15 15 16 36 38 49 56 94 95 98 98 104 105 107 123
IF                   : 58 60
IGUAL                : 49
IGUALIGUAL           : 28
IN                   : 94
INT                  : 74
INTNUM               : 9 97 97
LIST                 : 35
LLAVEDER             : 62 100 111 116
LLAVEIZQ             : 62 100 111 116
MAIN                 : 116
MAS                  : 86 91
MAYOROIGUAL          : 26
MAYORQUE             : 23
MENOROIGUAL          : 27
MENORQUE             : 24
MENOS                : 87 92
OR                   : 32
PARDER               : 3 5 16 52 59 69 79 94 99 104 116 123
PARIZQ               : 3 5 16 52 59 69 79 94 99 104 116 123
POR                  : 81
PRIVATE              : 39
PUNTO                : 15 56
PUNTOSRANGO          : 97 98
RANGE                : 
READ                 : 52
RETURN               : 63
SOBRE                : 82
STRING               : 13 52 71 77
STRINGVAL            : 
TRUE                 : 11
WHEN                 : 100
WHILE                : 99
WRITE                : 69
error                : 

Nonterminals, with rules where they appear

asignacion           : 41
asignacion2          : 49
asignacion2r         : 51 53
asignacion3          : 49
bloque               : 59 67 94 99 101 102 116
bloque2              : 62 111
bloque3              : 63
body                 : 2
body2                : 116
class                : 1 0
class2               : 2
classparams          : 2
classparams2         : 5
condicion            : 42
condicion2           : 58 60
condicionr           : 
empty                : 4 7 19 21 29 33 37 40 48 54 57 61 64 66 68 73 83 88 90 93 103 106 108 110 113 115 118 120 122 124 126
esc1                 : 69 72
esc2                 : 69 72
escritura            : 43
estatuto             : 41 42 43 44 45 46 47 62 114
estatutor            : 58
exp                  : 22 23 24 25 26 27 28
expr                 : 85 86 87
expresion            : 18 20 50 51 53 55 59 65 70 79 99 101 125
expresion2           : 16
expresionr           : 18 20 125
factor               : 81 82 84
factor2              : 80
for                  : 44
for2                 : 94
fun                  : 121
fun2                 : 104
fun3                 : 104
funbody              : 104
funparamr            : 105 107
funr                 : 116 121
llamada              : 47
llamada_param        : 123
megaexp              : 17
megaexpr             : 30 31 32
multvarsdecl         : 112 117
opc1                 : 111
opc2                 : 111
oplog                : 22
range                : 96
resultado            : 
superexp             : 30 31 32
termino              : 85 86 87
terminor             : 81 82 84
tipo                 : 34 35 105 107 109
varcte               : 14 80 89
varcter              : 89
vars                 : 6 112 117 119
vars2                : 3 34 35
vars3                : 34 35 104
varsr                : 36 38
when                 : 46
when2                : 100 101
while                : 45

Parsing method: LALR

state 0

    (0) S' -> . class
    (2) class -> . CLASS CID classparams class2 body

    CLASS           shift and go to state 2

    class                          shift and go to state 1

state 1

    (0) S' -> class .



state 2

    (2) class -> CLASS . CID classparams class2 body

    CID             shift and go to state 3


state 3

    (2) class -> CLASS CID . classparams class2 body
    (5) classparams -> . PARIZQ classparams2 PARDER

    PARIZQ          shift and go to state 5

    classparams                    shift and go to state 4

state 4

    (2) class -> CLASS CID classparams . class2 body
    (3) class2 -> . DOSPUNTOS ID PARIZQ vars2 PARDER
    (4) class2 -> . empty
    (127) empty -> .

    DOSPUNTOS       shift and go to state 7
    LLAVEIZQ        reduce using rule 127 (empty -> .)

    class2                         shift and go to state 6
    empty                          shift and go to state 8

state 5

    (5) classparams -> PARIZQ . classparams2 PARDER
    (6) classparams2 -> . vars
    (7) classparams2 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (127) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    PARDER          reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    BOOL            reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    CID             reduce using rule 127 (empty -> .)
    PRIVATE         shift and go to state 13

    classparams2                   shift and go to state 9
    vars                           shift and go to state 10
    empty                          shift and go to state 11
    vars3                          shift and go to state 12

state 6

    (2) class -> CLASS CID classparams class2 . body
    (116) body -> . LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER

    LLAVEIZQ        shift and go to state 15

    body                           shift and go to state 14

state 7

    (3) class2 -> DOSPUNTOS . ID PARIZQ vars2 PARDER

    ID              shift and go to state 16


state 8

    (4) class2 -> empty .

    LLAVEIZQ        reduce using rule 4 (class2 -> empty .)


state 9

    (5) classparams -> PARIZQ classparams2 . PARDER

    PARDER          shift and go to state 17


state 10

    (6) classparams2 -> vars .

    PARDER          reduce using rule 6 (classparams2 -> vars .)


state 11

    (7) classparams2 -> empty .
    (40) vars3 -> empty .

    PARDER          reduce using rule 7 (classparams2 -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 12

    (34) vars -> vars3 . tipo vars2 COLON
    (35) vars -> vars3 . tipo LIST vars2 COLON
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . STRING
    (78) tipo -> . CID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23

    tipo                           shift and go to state 18

state 13

    (39) vars3 -> PRIVATE .

    INT             reduce using rule 39 (vars3 -> PRIVATE .)
    FLOAT           reduce using rule 39 (vars3 -> PRIVATE .)
    BOOL            reduce using rule 39 (vars3 -> PRIVATE .)
    STRING          reduce using rule 39 (vars3 -> PRIVATE .)
    CID             reduce using rule 39 (vars3 -> PRIVATE .)
    FUN             reduce using rule 39 (vars3 -> PRIVATE .)


state 14

    (2) class -> CLASS CID classparams class2 body .

    $end            reduce using rule 2 (class -> CLASS CID classparams class2 body .)


state 15

    (116) body -> LLAVEIZQ . body2 funr MAIN PARIZQ PARDER bloque LLAVEDER
    (117) body2 -> . vars multvarsdecl
    (118) body2 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (127) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 127 (empty -> .)
    FUN             reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    BOOL            reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    CID             reduce using rule 127 (empty -> .)
    PRIVATE         shift and go to state 13

  ! PRIVATE         [ reduce using rule 127 (empty -> .) ]

    body2                          shift and go to state 24
    vars                           shift and go to state 25
    empty                          shift and go to state 26
    vars3                          shift and go to state 12

state 16

    (3) class2 -> DOSPUNTOS ID . PARIZQ vars2 PARDER

    PARIZQ          shift and go to state 27


state 17

    (5) classparams -> PARIZQ classparams2 PARDER .

    DOSPUNTOS       reduce using rule 5 (classparams -> PARIZQ classparams2 PARDER .)
    LLAVEIZQ        reduce using rule 5 (classparams -> PARIZQ classparams2 PARDER .)


state 18

    (34) vars -> vars3 tipo . vars2 COLON
    (35) vars -> vars3 tipo . LIST vars2 COLON
    (38) vars2 -> . ID varsr

    LIST            shift and go to state 29
    ID              shift and go to state 30

    vars2                          shift and go to state 28

state 19

    (74) tipo -> INT .

    LIST            reduce using rule 74 (tipo -> INT .)
    ID              reduce using rule 74 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 74 (tipo -> INT .)


state 20

    (75) tipo -> FLOAT .

    LIST            reduce using rule 75 (tipo -> FLOAT .)
    ID              reduce using rule 75 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 75 (tipo -> FLOAT .)


state 21

    (76) tipo -> BOOL .

    LIST            reduce using rule 76 (tipo -> BOOL .)
    ID              reduce using rule 76 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 76 (tipo -> BOOL .)


state 22

    (77) tipo -> STRING .

    LIST            reduce using rule 77 (tipo -> STRING .)
    ID              reduce using rule 77 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 77 (tipo -> STRING .)


state 23

    (78) tipo -> CID .

    LIST            reduce using rule 78 (tipo -> CID .)
    ID              reduce using rule 78 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 78 (tipo -> CID .)


state 24

    (116) body -> LLAVEIZQ body2 . funr MAIN PARIZQ PARDER bloque LLAVEDER
    (121) funr -> . fun funr
    (122) funr -> . empty
    (104) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (127) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    MAIN            reduce using rule 127 (empty -> .)
    FUN             reduce using rule 127 (empty -> .)
    PRIVATE         shift and go to state 13

    funr                           shift and go to state 31
    fun                            shift and go to state 32
    empty                          shift and go to state 33
    vars3                          shift and go to state 34

state 25

    (117) body2 -> vars . multvarsdecl
    (119) multvarsdecl -> . vars
    (120) multvarsdecl -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (127) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 127 (empty -> .)
    FUN             reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    BOOL            reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    CID             reduce using rule 127 (empty -> .)
    PRIVATE         shift and go to state 13

  ! PRIVATE         [ reduce using rule 127 (empty -> .) ]

    vars                           shift and go to state 35
    multvarsdecl                   shift and go to state 36
    empty                          shift and go to state 37
    vars3                          shift and go to state 12

state 26

    (118) body2 -> empty .
    (40) vars3 -> empty .

    PRIVATE         reduce using rule 118 (body2 -> empty .)
    MAIN            reduce using rule 118 (body2 -> empty .)
    FUN             reduce using rule 118 (body2 -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 27

    (3) class2 -> DOSPUNTOS ID PARIZQ . vars2 PARDER
    (38) vars2 -> . ID varsr

    ID              shift and go to state 30

    vars2                          shift and go to state 38

state 28

    (34) vars -> vars3 tipo vars2 . COLON

    COLON           shift and go to state 39


state 29

    (35) vars -> vars3 tipo LIST . vars2 COLON
    (38) vars2 -> . ID varsr

    ID              shift and go to state 30

    vars2                          shift and go to state 40

state 30

    (38) vars2 -> ID . varsr
    (36) varsr -> . COMA ID varsr
    (37) varsr -> . empty
    (127) empty -> .

    COMA            shift and go to state 42
    COLON           reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)

    varsr                          shift and go to state 41
    empty                          shift and go to state 43

state 31

    (116) body -> LLAVEIZQ body2 funr . MAIN PARIZQ PARDER bloque LLAVEDER

    MAIN            shift and go to state 44


state 32

    (121) funr -> fun . funr
    (121) funr -> . fun funr
    (122) funr -> . empty
    (104) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (127) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    MAIN            reduce using rule 127 (empty -> .)
    FUN             reduce using rule 127 (empty -> .)
    PRIVATE         shift and go to state 13

    fun                            shift and go to state 32
    funr                           shift and go to state 45
    empty                          shift and go to state 33
    vars3                          shift and go to state 34

state 33

    (122) funr -> empty .
    (40) vars3 -> empty .

    MAIN            reduce using rule 122 (funr -> empty .)
    FUN             reduce using rule 40 (vars3 -> empty .)


state 34

    (104) fun -> vars3 . FUN ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 46


state 35

    (119) multvarsdecl -> vars .

    PRIVATE         reduce using rule 119 (multvarsdecl -> vars .)
    MAIN            reduce using rule 119 (multvarsdecl -> vars .)
    FUN             reduce using rule 119 (multvarsdecl -> vars .)
    ID              reduce using rule 119 (multvarsdecl -> vars .)
    IF              reduce using rule 119 (multvarsdecl -> vars .)
    WRITE           reduce using rule 119 (multvarsdecl -> vars .)
    FOR             reduce using rule 119 (multvarsdecl -> vars .)
    WHILE           reduce using rule 119 (multvarsdecl -> vars .)
    WHEN            reduce using rule 119 (multvarsdecl -> vars .)
    RETURN          reduce using rule 119 (multvarsdecl -> vars .)
    LLAVEDER        reduce using rule 119 (multvarsdecl -> vars .)


state 36

    (117) body2 -> vars multvarsdecl .

    PRIVATE         reduce using rule 117 (body2 -> vars multvarsdecl .)
    MAIN            reduce using rule 117 (body2 -> vars multvarsdecl .)
    FUN             reduce using rule 117 (body2 -> vars multvarsdecl .)


state 37

    (120) multvarsdecl -> empty .
    (40) vars3 -> empty .

    PRIVATE         reduce using rule 120 (multvarsdecl -> empty .)
    MAIN            reduce using rule 120 (multvarsdecl -> empty .)
    FUN             reduce using rule 120 (multvarsdecl -> empty .)
    ID              reduce using rule 120 (multvarsdecl -> empty .)
    IF              reduce using rule 120 (multvarsdecl -> empty .)
    WRITE           reduce using rule 120 (multvarsdecl -> empty .)
    FOR             reduce using rule 120 (multvarsdecl -> empty .)
    WHILE           reduce using rule 120 (multvarsdecl -> empty .)
    WHEN            reduce using rule 120 (multvarsdecl -> empty .)
    RETURN          reduce using rule 120 (multvarsdecl -> empty .)
    LLAVEDER        reduce using rule 120 (multvarsdecl -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 38

    (3) class2 -> DOSPUNTOS ID PARIZQ vars2 . PARDER

    PARDER          shift and go to state 47


state 39

    (34) vars -> vars3 tipo vars2 COLON .

    PARDER          reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    PRIVATE         reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    INT             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    FLOAT           reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    BOOL            reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    STRING          reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    CID             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    MAIN            reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    FUN             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    ID              reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    IF              reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    WRITE           reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    FOR             reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    WHILE           reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    WHEN            reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    RETURN          reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)
    LLAVEDER        reduce using rule 34 (vars -> vars3 tipo vars2 COLON .)


state 40

    (35) vars -> vars3 tipo LIST vars2 . COLON

    COLON           shift and go to state 48


state 41

    (38) vars2 -> ID varsr .

    COLON           reduce using rule 38 (vars2 -> ID varsr .)
    PARDER          reduce using rule 38 (vars2 -> ID varsr .)


state 42

    (36) varsr -> COMA . ID varsr

    ID              shift and go to state 49


state 43

    (37) varsr -> empty .

    COLON           reduce using rule 37 (varsr -> empty .)
    PARDER          reduce using rule 37 (varsr -> empty .)


state 44

    (116) body -> LLAVEIZQ body2 funr MAIN . PARIZQ PARDER bloque LLAVEDER

    PARIZQ          shift and go to state 50


state 45

    (121) funr -> fun funr .

    MAIN            reduce using rule 121 (funr -> fun funr .)


state 46

    (104) fun -> vars3 FUN . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 51


state 47

    (3) class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .

    LLAVEIZQ        reduce using rule 3 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)


state 48

    (35) vars -> vars3 tipo LIST vars2 COLON .

    PARDER          reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    PRIVATE         reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    INT             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    FLOAT           reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    BOOL            reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    STRING          reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    CID             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    MAIN            reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    FUN             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    ID              reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    IF              reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    WRITE           reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    FOR             reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    WHILE           reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    WHEN            reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    RETURN          reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)
    LLAVEDER        reduce using rule 35 (vars -> vars3 tipo LIST vars2 COLON .)


state 49

    (36) varsr -> COMA ID . varsr
    (36) varsr -> . COMA ID varsr
    (37) varsr -> . empty
    (127) empty -> .

    COMA            shift and go to state 42
    COLON           reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)

    varsr                          shift and go to state 52
    empty                          shift and go to state 43

state 50

    (116) body -> LLAVEIZQ body2 funr MAIN PARIZQ . PARDER bloque LLAVEDER

    PARDER          shift and go to state 53


state 51

    (104) fun -> vars3 FUN ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 54


state 52

    (36) varsr -> COMA ID varsr .

    COLON           reduce using rule 36 (varsr -> COMA ID varsr .)
    PARDER          reduce using rule 36 (varsr -> COMA ID varsr .)


state 53

    (116) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER . bloque LLAVEDER
    (62) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 56

state 54

    (104) fun -> vars3 FUN ID PARIZQ . fun2 PARDER fun3 funbody
    (105) fun2 -> . tipo ID funparamr
    (106) fun2 -> . empty
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . STRING
    (78) tipo -> . CID
    (127) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23
    PARDER          reduce using rule 127 (empty -> .)

    fun2                           shift and go to state 57
    tipo                           shift and go to state 58
    empty                          shift and go to state 59

state 55

    (62) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (58) condicion -> . IF condicion2 estatutor
    (69) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (94) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (99) while -> . WHILE PARIZQ expresion PARDER bloque
    (100) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (123) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (124) llamada -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WRITE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! WHEN            [ reduce using rule 127 (empty -> .) ]

    estatuto                       shift and go to state 60
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 56

    (116) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque . LLAVEDER

    LLAVEDER        shift and go to state 75


state 57

    (104) fun -> vars3 FUN ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 76


state 58

    (105) fun2 -> tipo . ID funparamr

    ID              shift and go to state 77


state 59

    (106) fun2 -> empty .

    PARDER          reduce using rule 106 (fun2 -> empty .)


state 60

    (62) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (63) bloque2 -> . RETURN bloque3
    (64) bloque2 -> . empty
    (127) empty -> .

    RETURN          shift and go to state 79
    LLAVEDER        reduce using rule 127 (empty -> .)

    bloque2                        shift and go to state 78
    empty                          shift and go to state 80

state 61

    (41) estatuto -> asignacion . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (58) condicion -> . IF condicion2 estatutor
    (69) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (94) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (99) while -> . WHILE PARIZQ expresion PARDER bloque
    (100) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (123) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (124) llamada -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WRITE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! WHEN            [ reduce using rule 127 (empty -> .) ]

    asignacion                     shift and go to state 61
    estatuto                       shift and go to state 81
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 62

    (42) estatuto -> condicion . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (58) condicion -> . IF condicion2 estatutor
    (69) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (94) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (99) while -> . WHILE PARIZQ expresion PARDER bloque
    (100) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (123) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (124) llamada -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WRITE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! WHEN            [ reduce using rule 127 (empty -> .) ]

    condicion                      shift and go to state 62
    estatuto                       shift and go to state 82
    asignacion                     shift and go to state 61
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 63

    (43) estatuto -> escritura . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (58) condicion -> . IF condicion2 estatutor
    (69) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (94) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (99) while -> . WHILE PARIZQ expresion PARDER bloque
    (100) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (123) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (124) llamada -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WRITE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! WHEN            [ reduce using rule 127 (empty -> .) ]

    escritura                      shift and go to state 63
    estatuto                       shift and go to state 83
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 64

    (44) estatuto -> for . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (58) condicion -> . IF condicion2 estatutor
    (69) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (94) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (99) while -> . WHILE PARIZQ expresion PARDER bloque
    (100) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (123) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (124) llamada -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WRITE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! WHEN            [ reduce using rule 127 (empty -> .) ]

    for                            shift and go to state 64
    estatuto                       shift and go to state 84
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 65

    (45) estatuto -> while . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (58) condicion -> . IF condicion2 estatutor
    (69) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (94) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (99) while -> . WHILE PARIZQ expresion PARDER bloque
    (100) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (123) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (124) llamada -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WRITE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! WHEN            [ reduce using rule 127 (empty -> .) ]

    while                          shift and go to state 65
    estatuto                       shift and go to state 85
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    when                           shift and go to state 66
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 66

    (46) estatuto -> when . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (58) condicion -> . IF condicion2 estatutor
    (69) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (94) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (99) while -> . WHILE PARIZQ expresion PARDER bloque
    (100) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (123) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (124) llamada -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WRITE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! WHEN            [ reduce using rule 127 (empty -> .) ]

    when                           shift and go to state 66
    estatuto                       shift and go to state 86
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    llamada                        shift and go to state 67
    empty                          shift and go to state 68

state 67

    (47) estatuto -> llamada . estatuto
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (58) condicion -> . IF condicion2 estatutor
    (69) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (94) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (99) while -> . WHILE PARIZQ expresion PARDER bloque
    (100) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (123) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (124) llamada -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WRITE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! WHEN            [ reduce using rule 127 (empty -> .) ]

    llamada                        shift and go to state 67
    estatuto                       shift and go to state 87
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    empty                          shift and go to state 68

state 68

    (48) estatuto -> empty .
    (124) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 48 (estatuto -> empty .)
    RETURN          reduce using rule 48 (estatuto -> empty .)
    LLAVEDER        reduce using rule 48 (estatuto -> empty .)
    ID              reduce using rule 124 (llamada -> empty .)
    IF              reduce using rule 124 (llamada -> empty .)
    WRITE           reduce using rule 124 (llamada -> empty .)
    FOR             reduce using rule 124 (llamada -> empty .)
    WHILE           reduce using rule 124 (llamada -> empty .)
    WHEN            reduce using rule 124 (llamada -> empty .)

  ! RETURN          [ reduce using rule 124 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 124 (llamada -> empty .) ]


state 69

    (49) asignacion -> ID . asignacion3 IGUAL asignacion2 COLON
    (123) llamada -> ID . PARIZQ llamada_param PARDER COLON
    (55) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (56) asignacion3 -> . PUNTO ID
    (57) asignacion3 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 89
    CORCHIZQ        shift and go to state 90
    PUNTO           shift and go to state 91
    IGUAL           reduce using rule 127 (empty -> .)

    asignacion3                    shift and go to state 88
    empty                          shift and go to state 92

state 70

    (58) condicion -> IF . condicion2 estatutor
    (59) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 94

    condicion2                     shift and go to state 93

state 71

    (69) escritura -> WRITE . PARIZQ esc1 esc2 PARDER

    PARIZQ          shift and go to state 95


state 72

    (94) for -> FOR . PARIZQ ID IN for2 PARDER bloque

    PARIZQ          shift and go to state 96


state 73

    (99) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 97


state 74

    (100) when -> WHEN . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 98


state 75

    (116) body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER .

    $end            reduce using rule 116 (body -> LLAVEIZQ body2 funr MAIN PARIZQ PARDER bloque LLAVEDER .)


state 76

    (104) fun -> vars3 FUN ID PARIZQ fun2 PARDER . fun3 funbody
    (109) fun3 -> . DOSPUNTOS tipo
    (110) fun3 -> . empty
    (127) empty -> .

    DOSPUNTOS       shift and go to state 100
    LLAVEIZQ        reduce using rule 127 (empty -> .)

    fun3                           shift and go to state 99
    empty                          shift and go to state 101

state 77

    (105) fun2 -> tipo ID . funparamr
    (107) funparamr -> . COMA tipo ID funparamr
    (108) funparamr -> . empty
    (127) empty -> .

    COMA            shift and go to state 103
    PARDER          reduce using rule 127 (empty -> .)

    funparamr                      shift and go to state 102
    empty                          shift and go to state 104

state 78

    (62) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 105


state 79

    (63) bloque2 -> RETURN . bloque3
    (65) bloque3 -> . expresion COLON
    (66) bloque3 -> . empty
    (17) expresion -> . megaexp
    (127) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty

    LLAVEDER        reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117

    bloque3                        shift and go to state 106
    expresion                      shift and go to state 107
    empty                          shift and go to state 108
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115

state 80

    (64) bloque2 -> empty .

    LLAVEDER        reduce using rule 64 (bloque2 -> empty .)


state 81

    (41) estatuto -> asignacion estatuto .

    RETURN          reduce using rule 41 (estatuto -> asignacion estatuto .)
    LLAVEDER        reduce using rule 41 (estatuto -> asignacion estatuto .)


state 82

    (42) estatuto -> condicion estatuto .

    RETURN          reduce using rule 42 (estatuto -> condicion estatuto .)
    LLAVEDER        reduce using rule 42 (estatuto -> condicion estatuto .)


state 83

    (43) estatuto -> escritura estatuto .

    RETURN          reduce using rule 43 (estatuto -> escritura estatuto .)
    LLAVEDER        reduce using rule 43 (estatuto -> escritura estatuto .)


state 84

    (44) estatuto -> for estatuto .

    RETURN          reduce using rule 44 (estatuto -> for estatuto .)
    LLAVEDER        reduce using rule 44 (estatuto -> for estatuto .)


state 85

    (45) estatuto -> while estatuto .

    RETURN          reduce using rule 45 (estatuto -> while estatuto .)
    LLAVEDER        reduce using rule 45 (estatuto -> while estatuto .)


state 86

    (46) estatuto -> when estatuto .

    RETURN          reduce using rule 46 (estatuto -> when estatuto .)
    LLAVEDER        reduce using rule 46 (estatuto -> when estatuto .)


state 87

    (47) estatuto -> llamada estatuto .

    RETURN          reduce using rule 47 (estatuto -> llamada estatuto .)
    LLAVEDER        reduce using rule 47 (estatuto -> llamada estatuto .)


state 88

    (49) asignacion -> ID asignacion3 . IGUAL asignacion2 COLON

    IGUAL           shift and go to state 118


state 89

    (123) llamada -> ID PARIZQ . llamada_param PARDER COLON
    (125) llamada_param -> . expresion expresionr
    (126) llamada_param -> . empty
    (17) expresion -> . megaexp
    (127) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty

    PARDER          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117

    llamada_param                  shift and go to state 119
    expresion                      shift and go to state 120
    empty                          shift and go to state 121
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115

state 90

    (55) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    expresion                      shift and go to state 122
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 91

    (56) asignacion3 -> PUNTO . ID

    ID              shift and go to state 124


state 92

    (57) asignacion3 -> empty .

    IGUAL           reduce using rule 57 (asignacion3 -> empty .)


state 93

    (58) condicion -> IF condicion2 . estatutor
    (67) estatutor -> . ELSE bloque
    (68) estatutor -> . empty
    (127) empty -> .

    ELSE            shift and go to state 126
    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WRITE           reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    WHEN            reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)

    estatutor                      shift and go to state 125
    empty                          shift and go to state 127

state 94

    (59) condicion2 -> PARIZQ . expresion PARDER bloque
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    expresion                      shift and go to state 128
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 95

    (69) escritura -> WRITE PARIZQ . esc1 esc2 PARDER
    (70) esc1 -> . expresion
    (71) esc1 -> . STRING
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 131
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)

  ! STRING          [ reduce using rule 127 (empty -> .) ]

    esc1                           shift and go to state 129
    expresion                      shift and go to state 130
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 96

    (94) for -> FOR PARIZQ . ID IN for2 PARDER bloque

    ID              shift and go to state 132


state 97

    (99) while -> WHILE PARIZQ . expresion PARDER bloque
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    expresion                      shift and go to state 133
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 98

    (100) when -> WHEN LLAVEIZQ . when2 LLAVEDER
    (101) when2 -> . expresion FLECHITA bloque when2
    (102) when2 -> . ELSE FLECHITA bloque
    (103) when2 -> . empty
    (17) expresion -> . megaexp
    (127) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty

    ELSE            shift and go to state 136
    LLAVEDER        reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117

    when2                          shift and go to state 134
    expresion                      shift and go to state 135
    empty                          shift and go to state 137
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115

state 99

    (104) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 . funbody
    (111) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 139

    funbody                        shift and go to state 138

state 100

    (109) fun3 -> DOSPUNTOS . tipo
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . STRING
    (78) tipo -> . CID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23

    tipo                           shift and go to state 140

state 101

    (110) fun3 -> empty .

    LLAVEIZQ        reduce using rule 110 (fun3 -> empty .)


state 102

    (105) fun2 -> tipo ID funparamr .

    PARDER          reduce using rule 105 (fun2 -> tipo ID funparamr .)


state 103

    (107) funparamr -> COMA . tipo ID funparamr
    (74) tipo -> . INT
    (75) tipo -> . FLOAT
    (76) tipo -> . BOOL
    (77) tipo -> . STRING
    (78) tipo -> . CID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    BOOL            shift and go to state 21
    STRING          shift and go to state 22
    CID             shift and go to state 23

    tipo                           shift and go to state 141

state 104

    (108) funparamr -> empty .

    PARDER          reduce using rule 108 (funparamr -> empty .)


state 105

    (62) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    LLAVEDER        reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ID              reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    PARIZQ          reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MAS             reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MENOS           reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    TRUE            reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FALSE           reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRING          reduce using rule 62 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 106

    (63) bloque2 -> RETURN bloque3 .

    LLAVEDER        reduce using rule 63 (bloque2 -> RETURN bloque3 .)


state 107

    (65) bloque3 -> expresion . COLON

    COLON           shift and go to state 142


state 108

    (66) bloque3 -> empty .
    (93) factor2 -> empty .

    LLAVEDER        reduce using rule 66 (bloque3 -> empty .)
    ID              reduce using rule 93 (factor2 -> empty .)
    INTNUM          reduce using rule 93 (factor2 -> empty .)
    FLOATNUM        reduce using rule 93 (factor2 -> empty .)
    TRUE            reduce using rule 93 (factor2 -> empty .)
    FALSE           reduce using rule 93 (factor2 -> empty .)
    STRING          reduce using rule 93 (factor2 -> empty .)


state 109

    (17) expresion -> megaexp .

    COLON           reduce using rule 17 (expresion -> megaexp .)
    COMA            reduce using rule 17 (expresion -> megaexp .)
    PARDER          reduce using rule 17 (expresion -> megaexp .)
    CORCHDER        reduce using rule 17 (expresion -> megaexp .)
    FLECHITA        reduce using rule 17 (expresion -> megaexp .)
    CORCHIZQ        reduce using rule 17 (expresion -> megaexp .)


state 110

    (30) megaexp -> superexp . megaexpr
    (31) megaexpr -> . AND superexp megaexpr
    (32) megaexpr -> . OR superexp megaexpr
    (33) megaexpr -> . empty
    (127) empty -> .

    AND             shift and go to state 144
    OR              shift and go to state 145
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    megaexpr                       shift and go to state 143
    empty                          shift and go to state 146

state 111

    (22) superexp -> exp . oplog
    (23) oplog -> . MAYORQUE exp
    (24) oplog -> . MENORQUE exp
    (25) oplog -> . DIFERENTE exp
    (26) oplog -> . MAYOROIGUAL exp
    (27) oplog -> . MENOROIGUAL exp
    (28) oplog -> . IGUALIGUAL exp
    (29) oplog -> . empty
    (127) empty -> .

    MAYORQUE        shift and go to state 148
    MENORQUE        shift and go to state 149
    DIFERENTE       shift and go to state 150
    MAYOROIGUAL     shift and go to state 151
    MENOROIGUAL     shift and go to state 152
    IGUALIGUAL      shift and go to state 153
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    oplog                          shift and go to state 147
    empty                          shift and go to state 154

state 112

    (85) exp -> termino . expr
    (86) expr -> . MAS termino expr
    (87) expr -> . MENOS termino expr
    (88) expr -> . empty
    (127) empty -> .

    MAS             shift and go to state 156
    MENOS           shift and go to state 157
    MAYORQUE        reduce using rule 127 (empty -> .)
    MENORQUE        reduce using rule 127 (empty -> .)
    DIFERENTE       reduce using rule 127 (empty -> .)
    MAYOROIGUAL     reduce using rule 127 (empty -> .)
    MENOROIGUAL     reduce using rule 127 (empty -> .)
    IGUALIGUAL      reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    expr                           shift and go to state 155
    empty                          shift and go to state 158

state 113

    (84) termino -> factor . terminor
    (81) terminor -> . POR factor terminor
    (82) terminor -> . SOBRE factor terminor
    (83) terminor -> . empty
    (127) empty -> .

    POR             shift and go to state 160
    SOBRE           shift and go to state 161
    MAS             reduce using rule 127 (empty -> .)
    MENOS           reduce using rule 127 (empty -> .)
    MAYORQUE        reduce using rule 127 (empty -> .)
    MENORQUE        reduce using rule 127 (empty -> .)
    DIFERENTE       reduce using rule 127 (empty -> .)
    MAYOROIGUAL     reduce using rule 127 (empty -> .)
    MENOROIGUAL     reduce using rule 127 (empty -> .)
    IGUALIGUAL      reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    terminor                       shift and go to state 159
    empty                          shift and go to state 162

state 114

    (79) factor -> PARIZQ . expresion PARDER
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    expresion                      shift and go to state 163
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 115

    (80) factor -> factor2 . varcte
    (8) varcte -> . ID
    (9) varcte -> . INTNUM
    (10) varcte -> . FLOATNUM
    (11) varcte -> . TRUE
    (12) varcte -> . FALSE
    (13) varcte -> . STRING
    (14) varcte -> . ID CORCHIZQ varcte CORCHDER
    (15) varcte -> . ID PUNTO ID
    (16) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 165
    INTNUM          shift and go to state 166
    FLOATNUM        shift and go to state 167
    TRUE            shift and go to state 168
    FALSE           shift and go to state 169
    STRING          shift and go to state 170

    varcte                         shift and go to state 164

state 116

    (91) factor2 -> MAS .

    ID              reduce using rule 91 (factor2 -> MAS .)
    INTNUM          reduce using rule 91 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 91 (factor2 -> MAS .)
    TRUE            reduce using rule 91 (factor2 -> MAS .)
    FALSE           reduce using rule 91 (factor2 -> MAS .)
    STRING          reduce using rule 91 (factor2 -> MAS .)


state 117

    (92) factor2 -> MENOS .

    ID              reduce using rule 92 (factor2 -> MENOS .)
    INTNUM          reduce using rule 92 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 92 (factor2 -> MENOS .)
    TRUE            reduce using rule 92 (factor2 -> MENOS .)
    FALSE           reduce using rule 92 (factor2 -> MENOS .)
    STRING          reduce using rule 92 (factor2 -> MENOS .)


state 118

    (49) asignacion -> ID asignacion3 IGUAL . asignacion2 COLON
    (50) asignacion2 -> . expresion
    (51) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (52) asignacion2 -> . READ PARIZQ STRING PARDER
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    CORCHDER        shift and go to state 173
    READ            shift and go to state 174
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    asignacion2                    shift and go to state 171
    expresion                      shift and go to state 172
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 119

    (123) llamada -> ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 175


state 120

    (125) llamada_param -> expresion . expresionr
    (18) expresionr -> . COMA expresion expresionr
    (19) expresionr -> . empty
    (127) empty -> .

    COMA            shift and go to state 177
    PARDER          reduce using rule 127 (empty -> .)

    expresionr                     shift and go to state 176
    empty                          shift and go to state 178

state 121

    (126) llamada_param -> empty .
    (93) factor2 -> empty .

    PARDER          reduce using rule 126 (llamada_param -> empty .)
    ID              reduce using rule 93 (factor2 -> empty .)
    INTNUM          reduce using rule 93 (factor2 -> empty .)
    FLOATNUM        reduce using rule 93 (factor2 -> empty .)
    TRUE            reduce using rule 93 (factor2 -> empty .)
    FALSE           reduce using rule 93 (factor2 -> empty .)
    STRING          reduce using rule 93 (factor2 -> empty .)


state 122

    (55) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 179


state 123

    (93) factor2 -> empty .

    ID              reduce using rule 93 (factor2 -> empty .)
    INTNUM          reduce using rule 93 (factor2 -> empty .)
    FLOATNUM        reduce using rule 93 (factor2 -> empty .)
    TRUE            reduce using rule 93 (factor2 -> empty .)
    FALSE           reduce using rule 93 (factor2 -> empty .)
    STRING          reduce using rule 93 (factor2 -> empty .)


state 124

    (56) asignacion3 -> PUNTO ID .

    IGUAL           reduce using rule 56 (asignacion3 -> PUNTO ID .)


state 125

    (58) condicion -> IF condicion2 estatutor .

    ID              reduce using rule 58 (condicion -> IF condicion2 estatutor .)
    IF              reduce using rule 58 (condicion -> IF condicion2 estatutor .)
    WRITE           reduce using rule 58 (condicion -> IF condicion2 estatutor .)
    FOR             reduce using rule 58 (condicion -> IF condicion2 estatutor .)
    WHILE           reduce using rule 58 (condicion -> IF condicion2 estatutor .)
    WHEN            reduce using rule 58 (condicion -> IF condicion2 estatutor .)
    RETURN          reduce using rule 58 (condicion -> IF condicion2 estatutor .)
    LLAVEDER        reduce using rule 58 (condicion -> IF condicion2 estatutor .)


state 126

    (67) estatutor -> ELSE . bloque
    (62) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 180

state 127

    (68) estatutor -> empty .

    ID              reduce using rule 68 (estatutor -> empty .)
    IF              reduce using rule 68 (estatutor -> empty .)
    WRITE           reduce using rule 68 (estatutor -> empty .)
    FOR             reduce using rule 68 (estatutor -> empty .)
    WHILE           reduce using rule 68 (estatutor -> empty .)
    WHEN            reduce using rule 68 (estatutor -> empty .)
    RETURN          reduce using rule 68 (estatutor -> empty .)
    LLAVEDER        reduce using rule 68 (estatutor -> empty .)


state 128

    (59) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 181


state 129

    (69) escritura -> WRITE PARIZQ esc1 . esc2 PARDER
    (72) esc2 -> . COMA esc1 esc2
    (73) esc2 -> . empty
    (127) empty -> .

    COMA            shift and go to state 183
    PARDER          reduce using rule 127 (empty -> .)

    esc2                           shift and go to state 182
    empty                          shift and go to state 184

state 130

    (70) esc1 -> expresion .

    COMA            reduce using rule 70 (esc1 -> expresion .)
    PARDER          reduce using rule 70 (esc1 -> expresion .)


state 131

    (71) esc1 -> STRING .

    COMA            reduce using rule 71 (esc1 -> STRING .)
    PARDER          reduce using rule 71 (esc1 -> STRING .)


state 132

    (94) for -> FOR PARIZQ ID . IN for2 PARDER bloque

    IN              shift and go to state 185


state 133

    (99) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 186


state 134

    (100) when -> WHEN LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 187


state 135

    (101) when2 -> expresion . FLECHITA bloque when2

    FLECHITA        shift and go to state 188


state 136

    (102) when2 -> ELSE . FLECHITA bloque

    FLECHITA        shift and go to state 189


state 137

    (103) when2 -> empty .
    (93) factor2 -> empty .

    LLAVEDER        reduce using rule 103 (when2 -> empty .)
    ID              reduce using rule 93 (factor2 -> empty .)
    INTNUM          reduce using rule 93 (factor2 -> empty .)
    FLOATNUM        reduce using rule 93 (factor2 -> empty .)
    TRUE            reduce using rule 93 (factor2 -> empty .)
    FALSE           reduce using rule 93 (factor2 -> empty .)
    STRING          reduce using rule 93 (factor2 -> empty .)


state 138

    (104) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .

    PRIVATE         reduce using rule 104 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    FUN             reduce using rule 104 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    MAIN            reduce using rule 104 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)


state 139

    (111) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (112) opc1 -> . vars multvarsdecl
    (113) opc1 -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (127) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WRITE           reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    WHEN            reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    BOOL            reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    CID             reduce using rule 127 (empty -> .)
    PRIVATE         shift and go to state 13

    opc1                           shift and go to state 190
    vars                           shift and go to state 191
    empty                          shift and go to state 192
    vars3                          shift and go to state 12

state 140

    (109) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 109 (fun3 -> DOSPUNTOS tipo .)


state 141

    (107) funparamr -> COMA tipo . ID funparamr

    ID              shift and go to state 193


state 142

    (65) bloque3 -> expresion COLON .

    LLAVEDER        reduce using rule 65 (bloque3 -> expresion COLON .)


state 143

    (30) megaexp -> superexp megaexpr .

    COLON           reduce using rule 30 (megaexp -> superexp megaexpr .)
    COMA            reduce using rule 30 (megaexp -> superexp megaexpr .)
    PARDER          reduce using rule 30 (megaexp -> superexp megaexpr .)
    CORCHDER        reduce using rule 30 (megaexp -> superexp megaexpr .)
    FLECHITA        reduce using rule 30 (megaexp -> superexp megaexpr .)
    CORCHIZQ        reduce using rule 30 (megaexp -> superexp megaexpr .)


state 144

    (31) megaexpr -> AND . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    superexp                       shift and go to state 194
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 145

    (32) megaexpr -> OR . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    superexp                       shift and go to state 195
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 146

    (33) megaexpr -> empty .

    COLON           reduce using rule 33 (megaexpr -> empty .)
    COMA            reduce using rule 33 (megaexpr -> empty .)
    PARDER          reduce using rule 33 (megaexpr -> empty .)
    CORCHDER        reduce using rule 33 (megaexpr -> empty .)
    FLECHITA        reduce using rule 33 (megaexpr -> empty .)
    CORCHIZQ        reduce using rule 33 (megaexpr -> empty .)


state 147

    (22) superexp -> exp oplog .

    AND             reduce using rule 22 (superexp -> exp oplog .)
    OR              reduce using rule 22 (superexp -> exp oplog .)
    COLON           reduce using rule 22 (superexp -> exp oplog .)
    COMA            reduce using rule 22 (superexp -> exp oplog .)
    PARDER          reduce using rule 22 (superexp -> exp oplog .)
    CORCHDER        reduce using rule 22 (superexp -> exp oplog .)
    FLECHITA        reduce using rule 22 (superexp -> exp oplog .)
    CORCHIZQ        reduce using rule 22 (superexp -> exp oplog .)


state 148

    (23) oplog -> MAYORQUE . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 196
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 149

    (24) oplog -> MENORQUE . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 197
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 150

    (25) oplog -> DIFERENTE . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 198
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 151

    (26) oplog -> MAYOROIGUAL . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 199
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 152

    (27) oplog -> MENOROIGUAL . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 200
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 153

    (28) oplog -> IGUALIGUAL . exp
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 201
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 154

    (29) oplog -> empty .

    AND             reduce using rule 29 (oplog -> empty .)
    OR              reduce using rule 29 (oplog -> empty .)
    COLON           reduce using rule 29 (oplog -> empty .)
    COMA            reduce using rule 29 (oplog -> empty .)
    PARDER          reduce using rule 29 (oplog -> empty .)
    CORCHDER        reduce using rule 29 (oplog -> empty .)
    FLECHITA        reduce using rule 29 (oplog -> empty .)
    CORCHIZQ        reduce using rule 29 (oplog -> empty .)


state 155

    (85) exp -> termino expr .

    MAYORQUE        reduce using rule 85 (exp -> termino expr .)
    MENORQUE        reduce using rule 85 (exp -> termino expr .)
    DIFERENTE       reduce using rule 85 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 85 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 85 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 85 (exp -> termino expr .)
    AND             reduce using rule 85 (exp -> termino expr .)
    OR              reduce using rule 85 (exp -> termino expr .)
    COLON           reduce using rule 85 (exp -> termino expr .)
    COMA            reduce using rule 85 (exp -> termino expr .)
    PARDER          reduce using rule 85 (exp -> termino expr .)
    CORCHDER        reduce using rule 85 (exp -> termino expr .)
    FLECHITA        reduce using rule 85 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 85 (exp -> termino expr .)


state 156

    (86) expr -> MAS . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    termino                        shift and go to state 202
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 157

    (87) expr -> MENOS . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    termino                        shift and go to state 203
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 158

    (88) expr -> empty .

    MAYORQUE        reduce using rule 88 (expr -> empty .)
    MENORQUE        reduce using rule 88 (expr -> empty .)
    DIFERENTE       reduce using rule 88 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 88 (expr -> empty .)
    MENOROIGUAL     reduce using rule 88 (expr -> empty .)
    IGUALIGUAL      reduce using rule 88 (expr -> empty .)
    AND             reduce using rule 88 (expr -> empty .)
    OR              reduce using rule 88 (expr -> empty .)
    COLON           reduce using rule 88 (expr -> empty .)
    COMA            reduce using rule 88 (expr -> empty .)
    PARDER          reduce using rule 88 (expr -> empty .)
    CORCHDER        reduce using rule 88 (expr -> empty .)
    FLECHITA        reduce using rule 88 (expr -> empty .)
    CORCHIZQ        reduce using rule 88 (expr -> empty .)


state 159

    (84) termino -> factor terminor .

    MAS             reduce using rule 84 (termino -> factor terminor .)
    MENOS           reduce using rule 84 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 84 (termino -> factor terminor .)
    MENORQUE        reduce using rule 84 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 84 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 84 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 84 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 84 (termino -> factor terminor .)
    AND             reduce using rule 84 (termino -> factor terminor .)
    OR              reduce using rule 84 (termino -> factor terminor .)
    COLON           reduce using rule 84 (termino -> factor terminor .)
    COMA            reduce using rule 84 (termino -> factor terminor .)
    PARDER          reduce using rule 84 (termino -> factor terminor .)
    CORCHDER        reduce using rule 84 (termino -> factor terminor .)
    FLECHITA        reduce using rule 84 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 84 (termino -> factor terminor .)


state 160

    (81) terminor -> POR . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    factor                         shift and go to state 204
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 161

    (82) terminor -> SOBRE . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    factor                         shift and go to state 205
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 162

    (83) terminor -> empty .

    MAS             reduce using rule 83 (terminor -> empty .)
    MENOS           reduce using rule 83 (terminor -> empty .)
    MAYORQUE        reduce using rule 83 (terminor -> empty .)
    MENORQUE        reduce using rule 83 (terminor -> empty .)
    DIFERENTE       reduce using rule 83 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 83 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 83 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 83 (terminor -> empty .)
    AND             reduce using rule 83 (terminor -> empty .)
    OR              reduce using rule 83 (terminor -> empty .)
    COLON           reduce using rule 83 (terminor -> empty .)
    COMA            reduce using rule 83 (terminor -> empty .)
    PARDER          reduce using rule 83 (terminor -> empty .)
    CORCHDER        reduce using rule 83 (terminor -> empty .)
    FLECHITA        reduce using rule 83 (terminor -> empty .)
    CORCHIZQ        reduce using rule 83 (terminor -> empty .)


state 163

    (79) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 206


state 164

    (80) factor -> factor2 varcte .

    POR             reduce using rule 80 (factor -> factor2 varcte .)
    SOBRE           reduce using rule 80 (factor -> factor2 varcte .)
    MAS             reduce using rule 80 (factor -> factor2 varcte .)
    MENOS           reduce using rule 80 (factor -> factor2 varcte .)
    MAYORQUE        reduce using rule 80 (factor -> factor2 varcte .)
    MENORQUE        reduce using rule 80 (factor -> factor2 varcte .)
    DIFERENTE       reduce using rule 80 (factor -> factor2 varcte .)
    MAYOROIGUAL     reduce using rule 80 (factor -> factor2 varcte .)
    MENOROIGUAL     reduce using rule 80 (factor -> factor2 varcte .)
    IGUALIGUAL      reduce using rule 80 (factor -> factor2 varcte .)
    AND             reduce using rule 80 (factor -> factor2 varcte .)
    OR              reduce using rule 80 (factor -> factor2 varcte .)
    COLON           reduce using rule 80 (factor -> factor2 varcte .)
    COMA            reduce using rule 80 (factor -> factor2 varcte .)
    PARDER          reduce using rule 80 (factor -> factor2 varcte .)
    CORCHDER        reduce using rule 80 (factor -> factor2 varcte .)
    FLECHITA        reduce using rule 80 (factor -> factor2 varcte .)
    CORCHIZQ        reduce using rule 80 (factor -> factor2 varcte .)


state 165

    (8) varcte -> ID .
    (14) varcte -> ID . CORCHIZQ varcte CORCHDER
    (15) varcte -> ID . PUNTO ID
    (16) varcte -> ID . PARIZQ expresion2 PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    POR             reduce using rule 8 (varcte -> ID .)
    SOBRE           reduce using rule 8 (varcte -> ID .)
    MAS             reduce using rule 8 (varcte -> ID .)
    MENOS           reduce using rule 8 (varcte -> ID .)
    MAYORQUE        reduce using rule 8 (varcte -> ID .)
    MENORQUE        reduce using rule 8 (varcte -> ID .)
    DIFERENTE       reduce using rule 8 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 8 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 8 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 8 (varcte -> ID .)
    AND             reduce using rule 8 (varcte -> ID .)
    OR              reduce using rule 8 (varcte -> ID .)
    COLON           reduce using rule 8 (varcte -> ID .)
    COMA            reduce using rule 8 (varcte -> ID .)
    PARDER          reduce using rule 8 (varcte -> ID .)
    CORCHDER        reduce using rule 8 (varcte -> ID .)
    FLECHITA        reduce using rule 8 (varcte -> ID .)
    CORCHIZQ        shift and go to state 207
    PUNTO           shift and go to state 208
    PARIZQ          shift and go to state 209

  ! CORCHIZQ        [ reduce using rule 8 (varcte -> ID .) ]


state 166

    (9) varcte -> INTNUM .

    POR             reduce using rule 9 (varcte -> INTNUM .)
    SOBRE           reduce using rule 9 (varcte -> INTNUM .)
    MAS             reduce using rule 9 (varcte -> INTNUM .)
    MENOS           reduce using rule 9 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 9 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 9 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 9 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 9 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 9 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 9 (varcte -> INTNUM .)
    AND             reduce using rule 9 (varcte -> INTNUM .)
    OR              reduce using rule 9 (varcte -> INTNUM .)
    COLON           reduce using rule 9 (varcte -> INTNUM .)
    COMA            reduce using rule 9 (varcte -> INTNUM .)
    PARDER          reduce using rule 9 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 9 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 9 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 9 (varcte -> INTNUM .)


state 167

    (10) varcte -> FLOATNUM .

    POR             reduce using rule 10 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 10 (varcte -> FLOATNUM .)
    MAS             reduce using rule 10 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 10 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 10 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 10 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 10 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 10 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 10 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 10 (varcte -> FLOATNUM .)
    AND             reduce using rule 10 (varcte -> FLOATNUM .)
    OR              reduce using rule 10 (varcte -> FLOATNUM .)
    COLON           reduce using rule 10 (varcte -> FLOATNUM .)
    COMA            reduce using rule 10 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 10 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 10 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 10 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 10 (varcte -> FLOATNUM .)


state 168

    (11) varcte -> TRUE .

    POR             reduce using rule 11 (varcte -> TRUE .)
    SOBRE           reduce using rule 11 (varcte -> TRUE .)
    MAS             reduce using rule 11 (varcte -> TRUE .)
    MENOS           reduce using rule 11 (varcte -> TRUE .)
    MAYORQUE        reduce using rule 11 (varcte -> TRUE .)
    MENORQUE        reduce using rule 11 (varcte -> TRUE .)
    DIFERENTE       reduce using rule 11 (varcte -> TRUE .)
    MAYOROIGUAL     reduce using rule 11 (varcte -> TRUE .)
    MENOROIGUAL     reduce using rule 11 (varcte -> TRUE .)
    IGUALIGUAL      reduce using rule 11 (varcte -> TRUE .)
    AND             reduce using rule 11 (varcte -> TRUE .)
    OR              reduce using rule 11 (varcte -> TRUE .)
    COLON           reduce using rule 11 (varcte -> TRUE .)
    COMA            reduce using rule 11 (varcte -> TRUE .)
    PARDER          reduce using rule 11 (varcte -> TRUE .)
    CORCHDER        reduce using rule 11 (varcte -> TRUE .)
    FLECHITA        reduce using rule 11 (varcte -> TRUE .)
    CORCHIZQ        reduce using rule 11 (varcte -> TRUE .)


state 169

    (12) varcte -> FALSE .

    POR             reduce using rule 12 (varcte -> FALSE .)
    SOBRE           reduce using rule 12 (varcte -> FALSE .)
    MAS             reduce using rule 12 (varcte -> FALSE .)
    MENOS           reduce using rule 12 (varcte -> FALSE .)
    MAYORQUE        reduce using rule 12 (varcte -> FALSE .)
    MENORQUE        reduce using rule 12 (varcte -> FALSE .)
    DIFERENTE       reduce using rule 12 (varcte -> FALSE .)
    MAYOROIGUAL     reduce using rule 12 (varcte -> FALSE .)
    MENOROIGUAL     reduce using rule 12 (varcte -> FALSE .)
    IGUALIGUAL      reduce using rule 12 (varcte -> FALSE .)
    AND             reduce using rule 12 (varcte -> FALSE .)
    OR              reduce using rule 12 (varcte -> FALSE .)
    COLON           reduce using rule 12 (varcte -> FALSE .)
    COMA            reduce using rule 12 (varcte -> FALSE .)
    PARDER          reduce using rule 12 (varcte -> FALSE .)
    CORCHDER        reduce using rule 12 (varcte -> FALSE .)
    FLECHITA        reduce using rule 12 (varcte -> FALSE .)
    CORCHIZQ        reduce using rule 12 (varcte -> FALSE .)


state 170

    (13) varcte -> STRING .

    POR             reduce using rule 13 (varcte -> STRING .)
    SOBRE           reduce using rule 13 (varcte -> STRING .)
    MAS             reduce using rule 13 (varcte -> STRING .)
    MENOS           reduce using rule 13 (varcte -> STRING .)
    MAYORQUE        reduce using rule 13 (varcte -> STRING .)
    MENORQUE        reduce using rule 13 (varcte -> STRING .)
    DIFERENTE       reduce using rule 13 (varcte -> STRING .)
    MAYOROIGUAL     reduce using rule 13 (varcte -> STRING .)
    MENOROIGUAL     reduce using rule 13 (varcte -> STRING .)
    IGUALIGUAL      reduce using rule 13 (varcte -> STRING .)
    AND             reduce using rule 13 (varcte -> STRING .)
    OR              reduce using rule 13 (varcte -> STRING .)
    COLON           reduce using rule 13 (varcte -> STRING .)
    COMA            reduce using rule 13 (varcte -> STRING .)
    PARDER          reduce using rule 13 (varcte -> STRING .)
    CORCHDER        reduce using rule 13 (varcte -> STRING .)
    FLECHITA        reduce using rule 13 (varcte -> STRING .)
    CORCHIZQ        reduce using rule 13 (varcte -> STRING .)


state 171

    (49) asignacion -> ID asignacion3 IGUAL asignacion2 . COLON

    COLON           shift and go to state 210


state 172

    (50) asignacion2 -> expresion .

    COLON           reduce using rule 50 (asignacion2 -> expresion .)


state 173

    (51) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    expresion                      shift and go to state 211
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 174

    (52) asignacion2 -> READ . PARIZQ STRING PARDER

    PARIZQ          shift and go to state 212


state 175

    (123) llamada -> ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 213


state 176

    (125) llamada_param -> expresion expresionr .

    PARDER          reduce using rule 125 (llamada_param -> expresion expresionr .)


state 177

    (18) expresionr -> COMA . expresion expresionr
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    expresion                      shift and go to state 214
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 178

    (19) expresionr -> empty .

    PARDER          reduce using rule 19 (expresionr -> empty .)


state 179

    (55) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 55 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 180

    (67) estatutor -> ELSE bloque .

    ID              reduce using rule 67 (estatutor -> ELSE bloque .)
    IF              reduce using rule 67 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 67 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 67 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 67 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 67 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 67 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 67 (estatutor -> ELSE bloque .)


state 181

    (59) condicion2 -> PARIZQ expresion PARDER . bloque
    (62) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 215

state 182

    (69) escritura -> WRITE PARIZQ esc1 esc2 . PARDER

    PARDER          shift and go to state 216


state 183

    (72) esc2 -> COMA . esc1 esc2
    (70) esc1 -> . expresion
    (71) esc1 -> . STRING
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 131
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)

  ! STRING          [ reduce using rule 127 (empty -> .) ]

    esc1                           shift and go to state 217
    expresion                      shift and go to state 130
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 184

    (73) esc2 -> empty .

    PARDER          reduce using rule 73 (esc2 -> empty .)


state 185

    (94) for -> FOR PARIZQ ID IN . for2 PARDER bloque
    (95) for2 -> . ID
    (96) for2 -> . range
    (97) range -> . INTNUM PUNTOSRANGO INTNUM
    (98) range -> . ID PUNTOSRANGO ID

    ID              shift and go to state 218
    INTNUM          shift and go to state 221

    for2                           shift and go to state 219
    range                          shift and go to state 220

state 186

    (99) while -> WHILE PARIZQ expresion PARDER . bloque
    (62) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 222

state 187

    (100) when -> WHEN LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 100 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 100 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 100 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 100 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 100 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 100 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 100 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 100 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)


state 188

    (101) when2 -> expresion FLECHITA . bloque when2
    (62) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 223

state 189

    (102) when2 -> ELSE FLECHITA . bloque
    (62) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 224

state 190

    (111) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (114) opc2 -> . estatuto
    (115) opc2 -> . empty
    (41) estatuto -> . asignacion estatuto
    (42) estatuto -> . condicion estatuto
    (43) estatuto -> . escritura estatuto
    (44) estatuto -> . for estatuto
    (45) estatuto -> . while estatuto
    (46) estatuto -> . when estatuto
    (47) estatuto -> . llamada estatuto
    (48) estatuto -> . empty
    (127) empty -> .
    (49) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (58) condicion -> . IF condicion2 estatutor
    (69) escritura -> . WRITE PARIZQ esc1 esc2 PARDER
    (94) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (99) while -> . WHILE PARIZQ expresion PARDER bloque
    (100) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (123) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (124) llamada -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 70
    WRITE           shift and go to state 71
    FOR             shift and go to state 72
    WHILE           shift and go to state 73
    WHEN            shift and go to state 74

  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WRITE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! WHEN            [ reduce using rule 127 (empty -> .) ]

    opc2                           shift and go to state 225
    estatuto                       shift and go to state 226
    empty                          shift and go to state 227
    asignacion                     shift and go to state 61
    condicion                      shift and go to state 62
    escritura                      shift and go to state 63
    for                            shift and go to state 64
    while                          shift and go to state 65
    when                           shift and go to state 66
    llamada                        shift and go to state 67

state 191

    (112) opc1 -> vars . multvarsdecl
    (119) multvarsdecl -> . vars
    (120) multvarsdecl -> . empty
    (34) vars -> . vars3 tipo vars2 COLON
    (35) vars -> . vars3 tipo LIST vars2 COLON
    (127) empty -> .
    (39) vars3 -> . PRIVATE
    (40) vars3 -> . empty

    ID              reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WRITE           reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    WHEN            reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    LLAVEDER        reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    BOOL            reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    CID             reduce using rule 127 (empty -> .)
    PRIVATE         shift and go to state 13

    vars                           shift and go to state 35
    multvarsdecl                   shift and go to state 228
    empty                          shift and go to state 37
    vars3                          shift and go to state 12

state 192

    (113) opc1 -> empty .
    (40) vars3 -> empty .

    ID              reduce using rule 113 (opc1 -> empty .)
    IF              reduce using rule 113 (opc1 -> empty .)
    WRITE           reduce using rule 113 (opc1 -> empty .)
    FOR             reduce using rule 113 (opc1 -> empty .)
    WHILE           reduce using rule 113 (opc1 -> empty .)
    WHEN            reduce using rule 113 (opc1 -> empty .)
    RETURN          reduce using rule 113 (opc1 -> empty .)
    LLAVEDER        reduce using rule 113 (opc1 -> empty .)
    INT             reduce using rule 40 (vars3 -> empty .)
    FLOAT           reduce using rule 40 (vars3 -> empty .)
    BOOL            reduce using rule 40 (vars3 -> empty .)
    STRING          reduce using rule 40 (vars3 -> empty .)
    CID             reduce using rule 40 (vars3 -> empty .)


state 193

    (107) funparamr -> COMA tipo ID . funparamr
    (107) funparamr -> . COMA tipo ID funparamr
    (108) funparamr -> . empty
    (127) empty -> .

    COMA            shift and go to state 103
    PARDER          reduce using rule 127 (empty -> .)

    funparamr                      shift and go to state 229
    empty                          shift and go to state 104

state 194

    (31) megaexpr -> AND superexp . megaexpr
    (31) megaexpr -> . AND superexp megaexpr
    (32) megaexpr -> . OR superexp megaexpr
    (33) megaexpr -> . empty
    (127) empty -> .

    AND             shift and go to state 144
    OR              shift and go to state 145
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    megaexpr                       shift and go to state 230
    empty                          shift and go to state 146

state 195

    (32) megaexpr -> OR superexp . megaexpr
    (31) megaexpr -> . AND superexp megaexpr
    (32) megaexpr -> . OR superexp megaexpr
    (33) megaexpr -> . empty
    (127) empty -> .

    AND             shift and go to state 144
    OR              shift and go to state 145
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    megaexpr                       shift and go to state 231
    empty                          shift and go to state 146

state 196

    (23) oplog -> MAYORQUE exp .

    AND             reduce using rule 23 (oplog -> MAYORQUE exp .)
    OR              reduce using rule 23 (oplog -> MAYORQUE exp .)
    COLON           reduce using rule 23 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 23 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 23 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 23 (oplog -> MAYORQUE exp .)
    FLECHITA        reduce using rule 23 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 23 (oplog -> MAYORQUE exp .)


state 197

    (24) oplog -> MENORQUE exp .

    AND             reduce using rule 24 (oplog -> MENORQUE exp .)
    OR              reduce using rule 24 (oplog -> MENORQUE exp .)
    COLON           reduce using rule 24 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 24 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 24 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 24 (oplog -> MENORQUE exp .)
    FLECHITA        reduce using rule 24 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 24 (oplog -> MENORQUE exp .)


state 198

    (25) oplog -> DIFERENTE exp .

    AND             reduce using rule 25 (oplog -> DIFERENTE exp .)
    OR              reduce using rule 25 (oplog -> DIFERENTE exp .)
    COLON           reduce using rule 25 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 25 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 25 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 25 (oplog -> DIFERENTE exp .)
    FLECHITA        reduce using rule 25 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 25 (oplog -> DIFERENTE exp .)


state 199

    (26) oplog -> MAYOROIGUAL exp .

    AND             reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    OR              reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    COLON           reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    FLECHITA        reduce using rule 26 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 26 (oplog -> MAYOROIGUAL exp .)


state 200

    (27) oplog -> MENOROIGUAL exp .

    AND             reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    OR              reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    COLON           reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    FLECHITA        reduce using rule 27 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 27 (oplog -> MENOROIGUAL exp .)


state 201

    (28) oplog -> IGUALIGUAL exp .

    AND             reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    OR              reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    COLON           reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    FLECHITA        reduce using rule 28 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 28 (oplog -> IGUALIGUAL exp .)


state 202

    (86) expr -> MAS termino . expr
    (86) expr -> . MAS termino expr
    (87) expr -> . MENOS termino expr
    (88) expr -> . empty
    (127) empty -> .

    MAS             shift and go to state 156
    MENOS           shift and go to state 157
    MAYORQUE        reduce using rule 127 (empty -> .)
    MENORQUE        reduce using rule 127 (empty -> .)
    DIFERENTE       reduce using rule 127 (empty -> .)
    MAYOROIGUAL     reduce using rule 127 (empty -> .)
    MENOROIGUAL     reduce using rule 127 (empty -> .)
    IGUALIGUAL      reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    expr                           shift and go to state 232
    empty                          shift and go to state 158

state 203

    (87) expr -> MENOS termino . expr
    (86) expr -> . MAS termino expr
    (87) expr -> . MENOS termino expr
    (88) expr -> . empty
    (127) empty -> .

    MAS             shift and go to state 156
    MENOS           shift and go to state 157
    MAYORQUE        reduce using rule 127 (empty -> .)
    MENORQUE        reduce using rule 127 (empty -> .)
    DIFERENTE       reduce using rule 127 (empty -> .)
    MAYOROIGUAL     reduce using rule 127 (empty -> .)
    MENOROIGUAL     reduce using rule 127 (empty -> .)
    IGUALIGUAL      reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    expr                           shift and go to state 233
    empty                          shift and go to state 158

state 204

    (81) terminor -> POR factor . terminor
    (81) terminor -> . POR factor terminor
    (82) terminor -> . SOBRE factor terminor
    (83) terminor -> . empty
    (127) empty -> .

    POR             shift and go to state 160
    SOBRE           shift and go to state 161
    MAS             reduce using rule 127 (empty -> .)
    MENOS           reduce using rule 127 (empty -> .)
    MAYORQUE        reduce using rule 127 (empty -> .)
    MENORQUE        reduce using rule 127 (empty -> .)
    DIFERENTE       reduce using rule 127 (empty -> .)
    MAYOROIGUAL     reduce using rule 127 (empty -> .)
    MENOROIGUAL     reduce using rule 127 (empty -> .)
    IGUALIGUAL      reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    terminor                       shift and go to state 234
    empty                          shift and go to state 162

state 205

    (82) terminor -> SOBRE factor . terminor
    (81) terminor -> . POR factor terminor
    (82) terminor -> . SOBRE factor terminor
    (83) terminor -> . empty
    (127) empty -> .

    POR             shift and go to state 160
    SOBRE           shift and go to state 161
    MAS             reduce using rule 127 (empty -> .)
    MENOS           reduce using rule 127 (empty -> .)
    MAYORQUE        reduce using rule 127 (empty -> .)
    MENORQUE        reduce using rule 127 (empty -> .)
    DIFERENTE       reduce using rule 127 (empty -> .)
    MAYOROIGUAL     reduce using rule 127 (empty -> .)
    MENOROIGUAL     reduce using rule 127 (empty -> .)
    IGUALIGUAL      reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    COLON           reduce using rule 127 (empty -> .)
    COMA            reduce using rule 127 (empty -> .)
    PARDER          reduce using rule 127 (empty -> .)
    CORCHDER        reduce using rule 127 (empty -> .)
    FLECHITA        reduce using rule 127 (empty -> .)
    CORCHIZQ        reduce using rule 127 (empty -> .)

    terminor                       shift and go to state 235
    empty                          shift and go to state 162

state 206

    (79) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    COLON           reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    FLECHITA        reduce using rule 79 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 79 (factor -> PARIZQ expresion PARDER .)


state 207

    (14) varcte -> ID CORCHIZQ . varcte CORCHDER
    (8) varcte -> . ID
    (9) varcte -> . INTNUM
    (10) varcte -> . FLOATNUM
    (11) varcte -> . TRUE
    (12) varcte -> . FALSE
    (13) varcte -> . STRING
    (14) varcte -> . ID CORCHIZQ varcte CORCHDER
    (15) varcte -> . ID PUNTO ID
    (16) varcte -> . ID PARIZQ expresion2 PARDER

    ID              shift and go to state 165
    INTNUM          shift and go to state 166
    FLOATNUM        shift and go to state 167
    TRUE            shift and go to state 168
    FALSE           shift and go to state 169
    STRING          shift and go to state 170

    varcte                         shift and go to state 236

state 208

    (15) varcte -> ID PUNTO . ID

    ID              shift and go to state 237


state 209

    (16) varcte -> ID PARIZQ . expresion2 PARDER
    (20) expresion2 -> . expresion expresionr
    (21) expresion2 -> . empty
    (17) expresion -> . megaexp
    (127) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty

    PARDER          reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117

    expresion2                     shift and go to state 238
    expresion                      shift and go to state 239
    empty                          shift and go to state 240
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115

state 210

    (49) asignacion -> ID asignacion3 IGUAL asignacion2 COLON .

    ID              reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    IF              reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WRITE           reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    FOR             reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHILE           reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHEN            reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    RETURN          reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    LLAVEDER        reduce using rule 49 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)


state 211

    (51) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (53) asignacion2r -> . COMA expresion asignacion2r
    (54) asignacion2r -> . empty
    (127) empty -> .

    COMA            shift and go to state 242
    CORCHIZQ        reduce using rule 127 (empty -> .)

    asignacion2r                   shift and go to state 241
    empty                          shift and go to state 243

state 212

    (52) asignacion2 -> READ PARIZQ . STRING PARDER

    STRING          shift and go to state 244


state 213

    (123) llamada -> ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 123 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 123 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 123 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 123 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 123 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 123 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 123 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 123 (llamada -> ID PARIZQ llamada_param PARDER COLON .)


state 214

    (18) expresionr -> COMA expresion . expresionr
    (18) expresionr -> . COMA expresion expresionr
    (19) expresionr -> . empty
    (127) empty -> .

    COMA            shift and go to state 177
    PARDER          reduce using rule 127 (empty -> .)

    expresionr                     shift and go to state 245
    empty                          shift and go to state 178

state 215

    (59) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 59 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 216

    (69) escritura -> WRITE PARIZQ esc1 esc2 PARDER .

    ID              reduce using rule 69 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    IF              reduce using rule 69 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WRITE           reduce using rule 69 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    FOR             reduce using rule 69 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WHILE           reduce using rule 69 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    WHEN            reduce using rule 69 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    RETURN          reduce using rule 69 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)
    LLAVEDER        reduce using rule 69 (escritura -> WRITE PARIZQ esc1 esc2 PARDER .)


state 217

    (72) esc2 -> COMA esc1 . esc2
    (72) esc2 -> . COMA esc1 esc2
    (73) esc2 -> . empty
    (127) empty -> .

    COMA            shift and go to state 183
    PARDER          reduce using rule 127 (empty -> .)

    esc2                           shift and go to state 246
    empty                          shift and go to state 184

state 218

    (95) for2 -> ID .
    (98) range -> ID . PUNTOSRANGO ID

    PARDER          reduce using rule 95 (for2 -> ID .)
    PUNTOSRANGO     shift and go to state 247


state 219

    (94) for -> FOR PARIZQ ID IN for2 . PARDER bloque

    PARDER          shift and go to state 248


state 220

    (96) for2 -> range .

    PARDER          reduce using rule 96 (for2 -> range .)


state 221

    (97) range -> INTNUM . PUNTOSRANGO INTNUM

    PUNTOSRANGO     shift and go to state 249


state 222

    (99) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 99 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 99 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 99 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 99 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 99 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 99 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 99 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 99 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 223

    (101) when2 -> expresion FLECHITA bloque . when2
    (101) when2 -> . expresion FLECHITA bloque when2
    (102) when2 -> . ELSE FLECHITA bloque
    (103) when2 -> . empty
    (17) expresion -> . megaexp
    (127) empty -> .
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty

    ELSE            shift and go to state 136
    LLAVEDER        reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)
    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117

    expresion                      shift and go to state 135
    when2                          shift and go to state 250
    empty                          shift and go to state 137
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115

state 224

    (102) when2 -> ELSE FLECHITA bloque .

    LLAVEDER        reduce using rule 102 (when2 -> ELSE FLECHITA bloque .)


state 225

    (111) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (63) bloque2 -> . RETURN bloque3
    (64) bloque2 -> . empty
    (127) empty -> .

    RETURN          shift and go to state 79
    LLAVEDER        reduce using rule 127 (empty -> .)

    bloque2                        shift and go to state 251
    empty                          shift and go to state 80

state 226

    (114) opc2 -> estatuto .

    RETURN          reduce using rule 114 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 114 (opc2 -> estatuto .)


state 227

    (115) opc2 -> empty .
    (48) estatuto -> empty .
    (124) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 48 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 48 (estatuto -> empty .)
    RETURN          reduce using rule 48 (estatuto -> empty .)
    LLAVEDER        reduce using rule 48 (estatuto -> empty .)
    ID              reduce using rule 124 (llamada -> empty .)
    IF              reduce using rule 124 (llamada -> empty .)
    WRITE           reduce using rule 124 (llamada -> empty .)
    FOR             reduce using rule 124 (llamada -> empty .)
    WHILE           reduce using rule 124 (llamada -> empty .)
    WHEN            reduce using rule 124 (llamada -> empty .)

  ! RETURN          [ reduce using rule 115 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 115 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 124 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 124 (llamada -> empty .) ]


state 228

    (112) opc1 -> vars multvarsdecl .

    ID              reduce using rule 112 (opc1 -> vars multvarsdecl .)
    IF              reduce using rule 112 (opc1 -> vars multvarsdecl .)
    WRITE           reduce using rule 112 (opc1 -> vars multvarsdecl .)
    FOR             reduce using rule 112 (opc1 -> vars multvarsdecl .)
    WHILE           reduce using rule 112 (opc1 -> vars multvarsdecl .)
    WHEN            reduce using rule 112 (opc1 -> vars multvarsdecl .)
    RETURN          reduce using rule 112 (opc1 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 112 (opc1 -> vars multvarsdecl .)


state 229

    (107) funparamr -> COMA tipo ID funparamr .

    PARDER          reduce using rule 107 (funparamr -> COMA tipo ID funparamr .)


state 230

    (31) megaexpr -> AND superexp megaexpr .

    COLON           reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    COMA            reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    PARDER          reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    CORCHDER        reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    FLECHITA        reduce using rule 31 (megaexpr -> AND superexp megaexpr .)
    CORCHIZQ        reduce using rule 31 (megaexpr -> AND superexp megaexpr .)


state 231

    (32) megaexpr -> OR superexp megaexpr .

    COLON           reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    COMA            reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    PARDER          reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    CORCHDER        reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    FLECHITA        reduce using rule 32 (megaexpr -> OR superexp megaexpr .)
    CORCHIZQ        reduce using rule 32 (megaexpr -> OR superexp megaexpr .)


state 232

    (86) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 86 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 86 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 86 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 86 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 86 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 86 (expr -> MAS termino expr .)
    AND             reduce using rule 86 (expr -> MAS termino expr .)
    OR              reduce using rule 86 (expr -> MAS termino expr .)
    COLON           reduce using rule 86 (expr -> MAS termino expr .)
    COMA            reduce using rule 86 (expr -> MAS termino expr .)
    PARDER          reduce using rule 86 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 86 (expr -> MAS termino expr .)
    FLECHITA        reduce using rule 86 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 86 (expr -> MAS termino expr .)


state 233

    (87) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 87 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 87 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 87 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 87 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 87 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 87 (expr -> MENOS termino expr .)
    AND             reduce using rule 87 (expr -> MENOS termino expr .)
    OR              reduce using rule 87 (expr -> MENOS termino expr .)
    COLON           reduce using rule 87 (expr -> MENOS termino expr .)
    COMA            reduce using rule 87 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 87 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 87 (expr -> MENOS termino expr .)
    FLECHITA        reduce using rule 87 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 87 (expr -> MENOS termino expr .)


state 234

    (81) terminor -> POR factor terminor .

    MAS             reduce using rule 81 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 81 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 81 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 81 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 81 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 81 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 81 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 81 (terminor -> POR factor terminor .)
    AND             reduce using rule 81 (terminor -> POR factor terminor .)
    OR              reduce using rule 81 (terminor -> POR factor terminor .)
    COLON           reduce using rule 81 (terminor -> POR factor terminor .)
    COMA            reduce using rule 81 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 81 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 81 (terminor -> POR factor terminor .)
    FLECHITA        reduce using rule 81 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 81 (terminor -> POR factor terminor .)


state 235

    (82) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 82 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 82 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 82 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 82 (terminor -> SOBRE factor terminor .)
    AND             reduce using rule 82 (terminor -> SOBRE factor terminor .)
    OR              reduce using rule 82 (terminor -> SOBRE factor terminor .)
    COLON           reduce using rule 82 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 82 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 82 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 82 (terminor -> SOBRE factor terminor .)
    FLECHITA        reduce using rule 82 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 82 (terminor -> SOBRE factor terminor .)


state 236

    (14) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 252


state 237

    (15) varcte -> ID PUNTO ID .

    POR             reduce using rule 15 (varcte -> ID PUNTO ID .)
    SOBRE           reduce using rule 15 (varcte -> ID PUNTO ID .)
    MAS             reduce using rule 15 (varcte -> ID PUNTO ID .)
    MENOS           reduce using rule 15 (varcte -> ID PUNTO ID .)
    MAYORQUE        reduce using rule 15 (varcte -> ID PUNTO ID .)
    MENORQUE        reduce using rule 15 (varcte -> ID PUNTO ID .)
    DIFERENTE       reduce using rule 15 (varcte -> ID PUNTO ID .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> ID PUNTO ID .)
    MENOROIGUAL     reduce using rule 15 (varcte -> ID PUNTO ID .)
    IGUALIGUAL      reduce using rule 15 (varcte -> ID PUNTO ID .)
    AND             reduce using rule 15 (varcte -> ID PUNTO ID .)
    OR              reduce using rule 15 (varcte -> ID PUNTO ID .)
    COLON           reduce using rule 15 (varcte -> ID PUNTO ID .)
    COMA            reduce using rule 15 (varcte -> ID PUNTO ID .)
    PARDER          reduce using rule 15 (varcte -> ID PUNTO ID .)
    CORCHDER        reduce using rule 15 (varcte -> ID PUNTO ID .)
    FLECHITA        reduce using rule 15 (varcte -> ID PUNTO ID .)
    CORCHIZQ        reduce using rule 15 (varcte -> ID PUNTO ID .)


state 238

    (16) varcte -> ID PARIZQ expresion2 . PARDER

    PARDER          shift and go to state 253


state 239

    (20) expresion2 -> expresion . expresionr
    (18) expresionr -> . COMA expresion expresionr
    (19) expresionr -> . empty
    (127) empty -> .

    COMA            shift and go to state 177
    PARDER          reduce using rule 127 (empty -> .)

    expresionr                     shift and go to state 254
    empty                          shift and go to state 178

state 240

    (21) expresion2 -> empty .
    (93) factor2 -> empty .

    PARDER          reduce using rule 21 (expresion2 -> empty .)
    ID              reduce using rule 93 (factor2 -> empty .)
    INTNUM          reduce using rule 93 (factor2 -> empty .)
    FLOATNUM        reduce using rule 93 (factor2 -> empty .)
    TRUE            reduce using rule 93 (factor2 -> empty .)
    FALSE           reduce using rule 93 (factor2 -> empty .)
    STRING          reduce using rule 93 (factor2 -> empty .)


state 241

    (51) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 255


state 242

    (53) asignacion2r -> COMA . expresion asignacion2r
    (17) expresion -> . megaexp
    (30) megaexp -> . superexp megaexpr
    (22) superexp -> . exp oplog
    (85) exp -> . termino expr
    (84) termino -> . factor terminor
    (79) factor -> . PARIZQ expresion PARDER
    (80) factor -> . factor2 varcte
    (91) factor2 -> . MAS
    (92) factor2 -> . MENOS
    (93) factor2 -> . empty
    (127) empty -> .

    PARIZQ          shift and go to state 114
    MAS             shift and go to state 116
    MENOS           shift and go to state 117
    ID              reduce using rule 127 (empty -> .)
    INTNUM          reduce using rule 127 (empty -> .)
    FLOATNUM        reduce using rule 127 (empty -> .)
    TRUE            reduce using rule 127 (empty -> .)
    FALSE           reduce using rule 127 (empty -> .)
    STRING          reduce using rule 127 (empty -> .)

    expresion                      shift and go to state 256
    megaexp                        shift and go to state 109
    superexp                       shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 112
    factor                         shift and go to state 113
    factor2                        shift and go to state 115
    empty                          shift and go to state 123

state 243

    (54) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 54 (asignacion2r -> empty .)


state 244

    (52) asignacion2 -> READ PARIZQ STRING . PARDER

    PARDER          shift and go to state 257


state 245

    (18) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 18 (expresionr -> COMA expresion expresionr .)


state 246

    (72) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 72 (esc2 -> COMA esc1 esc2 .)


state 247

    (98) range -> ID PUNTOSRANGO . ID

    ID              shift and go to state 258


state 248

    (94) for -> FOR PARIZQ ID IN for2 PARDER . bloque
    (62) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 55

    bloque                         shift and go to state 259

state 249

    (97) range -> INTNUM PUNTOSRANGO . INTNUM

    INTNUM          shift and go to state 260


state 250

    (101) when2 -> expresion FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 101 (when2 -> expresion FLECHITA bloque when2 .)


state 251

    (111) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 261


state 252

    (14) varcte -> ID CORCHIZQ varcte CORCHDER .

    POR             reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    AND             reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    OR              reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COLON           reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COMA            reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 14 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 253

    (16) varcte -> ID PARIZQ expresion2 PARDER .

    POR             reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    SOBRE           reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAS             reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOS           reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYORQUE        reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENORQUE        reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    DIFERENTE       reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    MENOROIGUAL     reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    IGUALIGUAL      reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    AND             reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    OR              reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    COLON           reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    COMA            reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    PARDER          reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    CORCHDER        reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    FLECHITA        reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)
    CORCHIZQ        reduce using rule 16 (varcte -> ID PARIZQ expresion2 PARDER .)


state 254

    (20) expresion2 -> expresion expresionr .

    PARDER          reduce using rule 20 (expresion2 -> expresion expresionr .)


state 255

    (51) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    COLON           reduce using rule 51 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 256

    (53) asignacion2r -> COMA expresion . asignacion2r
    (53) asignacion2r -> . COMA expresion asignacion2r
    (54) asignacion2r -> . empty
    (127) empty -> .

    COMA            shift and go to state 242
    CORCHIZQ        reduce using rule 127 (empty -> .)

    asignacion2r                   shift and go to state 262
    empty                          shift and go to state 243

state 257

    (52) asignacion2 -> READ PARIZQ STRING PARDER .

    COLON           reduce using rule 52 (asignacion2 -> READ PARIZQ STRING PARDER .)


state 258

    (98) range -> ID PUNTOSRANGO ID .

    PARDER          reduce using rule 98 (range -> ID PUNTOSRANGO ID .)


state 259

    (94) for -> FOR PARIZQ ID IN for2 PARDER bloque .

    ID              reduce using rule 94 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    IF              reduce using rule 94 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WRITE           reduce using rule 94 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    FOR             reduce using rule 94 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHILE           reduce using rule 94 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHEN            reduce using rule 94 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    RETURN          reduce using rule 94 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    LLAVEDER        reduce using rule 94 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)


state 260

    (97) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 97 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 261

    (111) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    PRIVATE         reduce using rule 111 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    FUN             reduce using rule 111 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    MAIN            reduce using rule 111 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 262

    (53) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 53 (asignacion2r -> COMA expresion asignacion2r .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 15 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for IF in state 55 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 55 resolved as shift
WARNING: shift/reduce conflict for FOR in state 55 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 55 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 61 resolved as shift
WARNING: shift/reduce conflict for IF in state 61 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 61 resolved as shift
WARNING: shift/reduce conflict for FOR in state 61 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 61 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 62 resolved as shift
WARNING: shift/reduce conflict for FOR in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for IF in state 63 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 63 resolved as shift
WARNING: shift/reduce conflict for FOR in state 63 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 63 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for IF in state 64 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 64 resolved as shift
WARNING: shift/reduce conflict for FOR in state 64 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 64 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 65 resolved as shift
WARNING: shift/reduce conflict for FOR in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 67 resolved as shift
WARNING: shift/reduce conflict for IF in state 67 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 67 resolved as shift
WARNING: shift/reduce conflict for FOR in state 67 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 67 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 67 resolved as shift
WARNING: shift/reduce conflict for STRING in state 95 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 165 resolved as shift
WARNING: shift/reduce conflict for STRING in state 183 resolved as shift
WARNING: shift/reduce conflict for ID in state 190 resolved as shift
WARNING: shift/reduce conflict for IF in state 190 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 190 resolved as shift
WARNING: shift/reduce conflict for FOR in state 190 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 190 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 190 resolved as shift
WARNING: reduce/reduce conflict in state 68 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 68
WARNING: reduce/reduce conflict in state 227 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 227
WARNING: reduce/reduce conflict in state 227 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 227
WARNING: Rule (opc2 -> empty) is never reduced
