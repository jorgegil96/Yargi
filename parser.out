Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIOS
    COMILLAS
    EOL
    GLOBAL
    RANGE

Grammar

Rule 0     S' -> file
Rule 1     file -> class classr
Rule 2     classr -> class classr
Rule 3     classr -> empty
Rule 4     class -> CLASS CID classparams class2 body
Rule 5     class -> DATA CLASS CID classparams
Rule 6     class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER
Rule 7     class2 -> empty
Rule 8     classparams -> PARIZQ classparams2 PARDER
Rule 9     classparams -> empty
Rule 10    classparams2 -> vars3 tipo ID classparams3
Rule 11    classparams2 -> empty
Rule 12    classparams3 -> COMA vars3 tipo ID classparams3
Rule 13    classparams3 -> empty
Rule 14    varcte -> ID
Rule 15    varcte -> INTNUM
Rule 16    varcte -> FLOATNUM
Rule 17    varcte -> TRUE
Rule 18    varcte -> FALSE
Rule 19    varcte -> STRINGVAL
Rule 20    varcte -> ID CORCHIZQ varcte CORCHDER
Rule 21    varcte -> ID PUNTO ID
Rule 22    varcte -> ID PARIZQ llamada_param PARDER
Rule 23    expresion -> megaexp
Rule 24    expresionr -> COMA expresion expresionr
Rule 25    expresionr -> empty
Rule 26    expresion2 -> expresion expresionr
Rule 27    expresion2 -> empty
Rule 28    superexp -> exp oplog
Rule 29    oplog -> MAYORQUE exp
Rule 30    oplog -> MENORQUE exp
Rule 31    oplog -> DIFERENTE exp
Rule 32    oplog -> MAYOROIGUAL exp
Rule 33    oplog -> MENOROIGUAL exp
Rule 34    oplog -> IGUALIGUAL exp
Rule 35    oplog -> empty
Rule 36    megaexp -> superexp megaexpr
Rule 37    megaexpr -> AND superexp megaexpr
Rule 38    megaexpr -> OR superexp megaexpr
Rule 39    megaexpr -> empty
Rule 40    vars -> vars3 tipo vars2 COLON
Rule 41    vars -> vars3 tipo LIST vars2 COLON
Rule 42    varsr -> COMA ID varsr
Rule 43    varsr -> empty
Rule 44    vars2 -> ID varsr
Rule 45    vars3 -> PRIVATE
Rule 46    vars3 -> empty
Rule 47    estatuto -> asignacion estatuto
Rule 48    estatuto -> condicion estatuto
Rule 49    estatuto -> escritura estatuto
Rule 50    estatuto -> for estatuto
Rule 51    estatuto -> while estatuto
Rule 52    estatuto -> when estatuto
Rule 53    estatuto -> llamada estatuto
Rule 54    estatuto -> empty
Rule 55    asignacion -> ID asignacion3 IGUAL asignacion2 COLON
Rule 56    asignacion2 -> expresion
Rule 57    asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ
Rule 58    asignacion2 -> READ PARIZQ assign_read PARDER
Rule 59    asignacion2 -> CID PARIZQ expresion expresionr PARDER
Rule 60    assign_read -> STRINGVAL
Rule 61    assign_read -> empty
Rule 62    asignacion2r -> COMA expresion asignacion2r
Rule 63    asignacion2r -> empty
Rule 64    asignacion3 -> CORCHIZQ expresion CORCHDER
Rule 65    asignacion3 -> PUNTO ID
Rule 66    asignacion3 -> empty
Rule 67    condicion -> IF condicion2 estatutor
Rule 68    condicion2 -> PARIZQ expresion PARDER bloque
Rule 69    condicionr -> ELSE IF condicion2
Rule 70    condicionr -> empty
Rule 71    bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER
Rule 72    bloque2 -> RETURN bloque3
Rule 73    bloque2 -> empty
Rule 74    bloque3 -> expresion COLON
Rule 75    bloque3 -> empty
Rule 76    estatutor -> ELSE bloque
Rule 77    estatutor -> empty
Rule 78    escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON
Rule 79    esc1 -> expresion
Rule 80    esc1 -> STRING
Rule 81    esc2 -> COMA esc1 esc2
Rule 82    esc2 -> empty
Rule 83    tipo -> INT
Rule 84    tipo -> FLOAT
Rule 85    tipo -> BOOL
Rule 86    tipo -> STRING
Rule 87    tipo -> CID
Rule 88    factor -> PARIZQ expresion PARDER
Rule 89    factor -> factor2 varcte
Rule 90    terminor -> POR factor terminor
Rule 91    terminor -> SOBRE factor terminor
Rule 92    terminor -> empty
Rule 93    termino -> factor terminor
Rule 94    exp -> termino expr
Rule 95    expr -> MAS termino expr
Rule 96    expr -> MENOS termino expr
Rule 97    expr -> empty
Rule 98    varcter -> COMA varcte varcter
Rule 99    varcter -> empty
Rule 100   factor2 -> MAS
Rule 101   factor2 -> MENOS
Rule 102   factor2 -> empty
Rule 103   for -> FOR PARIZQ ID IN for2 PARDER bloque
Rule 104   for2 -> ID
Rule 105   for2 -> range
Rule 106   range -> INTNUM PUNTOSRANGO INTNUM
Rule 107   range -> ID PUNTOSRANGO ID
Rule 108   range -> ID PUNTOSRANGO INTNUM
Rule 109   range -> INTNUM PUNTOSRANGO ID
Rule 110   while -> WHILE PARIZQ expresion PARDER bloque
Rule 111   when -> WHEN LLAVEIZQ when2 LLAVEDER
Rule 112   when2 -> expresion FLECHITA bloque when2
Rule 113   when2 -> ELSE FLECHITA bloque
Rule 114   when2 -> empty
Rule 115   fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
Rule 116   fun2 -> tipo ID funparamr
Rule 117   fun2 -> empty
Rule 118   funparamr -> COMA tipo ID funparamr
Rule 119   funparamr -> empty
Rule 120   fun3 -> DOSPUNTOS tipo
Rule 121   fun3 -> empty
Rule 122   funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER
Rule 123   opc1 -> vars multvarsdecl
Rule 124   opc1 -> empty
Rule 125   opc2 -> estatuto
Rule 126   opc2 -> empty
Rule 127   body -> LLAVEIZQ body2 funr body_main LLAVEDER
Rule 128   body -> empty
Rule 129   body_main -> MAIN PARIZQ PARDER mainbloque
Rule 130   body_main -> empty
Rule 131   body2 -> vars multvarsdecl
Rule 132   body2 -> empty
Rule 133   mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER
Rule 134   multvarsdecl -> vars
Rule 135   multvarsdecl -> empty
Rule 136   funr -> fun funr
Rule 137   funr -> empty
Rule 138   llamada -> ID PARIZQ llamada_param PARDER COLON
Rule 139   llamada -> empty
Rule 140   llamada_param -> expresion expresionr
Rule 141   llamada_param -> empty
Rule 142   empty -> <empty>

Terminals, with rules where they appear

AND                  : 37
BOOL                 : 85
CID                  : 4 5 59 87
CLASS                : 4 5
COLON                : 40 41 55 74 78 138
COMA                 : 12 24 42 62 81 98 118
COMENTARIOS          : 
COMILLAS             : 
CORCHDER             : 20 57 64
CORCHIZQ             : 20 57 64
DATA                 : 5
DIFERENTE            : 31
DOSPUNTOS            : 6 120
ELSE                 : 69 76 113
EOL                  : 
FALSE                : 18
FLECHITA             : 112 113
FLOAT                : 84
FLOATNUM             : 16
FOR                  : 103
FUN                  : 115
GLOBAL               : 
ID                   : 6 10 12 14 20 21 21 22 42 44 55 65 103 104 107 107 108 109 115 116 118 138
IF                   : 67 69
IGUAL                : 55
IGUALIGUAL           : 34
IN                   : 103
INT                  : 83
INTNUM               : 15 106 106 108 109
LIST                 : 41
LLAVEDER             : 71 111 122 127 133
LLAVEIZQ             : 71 111 122 127 133
MAIN                 : 129
MAS                  : 95 100
MAYOROIGUAL          : 32
MAYORQUE             : 29
MENOROIGUAL          : 33
MENORQUE             : 30
MENOS                : 96 101
OR                   : 38
PARDER               : 6 8 22 58 59 68 78 88 103 110 115 129 138
PARIZQ               : 6 8 22 58 59 68 78 88 103 110 115 129 138
POR                  : 90
PRIVATE              : 45
PUNTO                : 21 65
PUNTOSRANGO          : 106 107 108 109
RANGE                : 
READ                 : 58
RETURN               : 72
SOBRE                : 91
STRING               : 80 86
STRINGVAL            : 19 60
TRUE                 : 17
WHEN                 : 111
WHILE                : 110
WRITE                : 78
error                : 

Nonterminals, with rules where they appear

asignacion           : 47
asignacion2          : 55
asignacion2r         : 57 62
asignacion3          : 55
assign_read          : 58
bloque               : 68 76 103 110 112 113
bloque2              : 71 122
bloque3              : 72
body                 : 4
body2                : 127 133
body_main            : 127
class                : 1 2
class2               : 4
classparams          : 4 5
classparams2         : 8
classparams3         : 10 12
classr               : 1 2
condicion            : 48
condicion2           : 67 69
condicionr           : 
empty                : 3 7 9 11 13 25 27 35 39 43 46 54 61 63 66 70 73 75 77 82 92 97 99 102 114 117 119 121 124 126 128 130 132 135 137 139 141
esc1                 : 78 81
esc2                 : 78 81
escritura            : 49
estatuto             : 47 48 49 50 51 52 53 71 125 133
estatutor            : 67
exp                  : 28 29 30 31 32 33 34
expr                 : 94 95 96
expresion            : 24 26 56 57 59 62 64 68 74 79 88 110 112 140
expresion2           : 
expresionr           : 24 26 59 140
factor               : 90 91 93
factor2              : 89
file                 : 0
for                  : 50
for2                 : 103
fun                  : 136
fun2                 : 115
fun3                 : 115
funbody              : 115
funparamr            : 116 118
funr                 : 127 136
llamada              : 53
llamada_param        : 22 138
mainbloque           : 129
megaexp              : 23
megaexpr             : 36 37 38
multvarsdecl         : 123 131
opc1                 : 122
opc2                 : 122
oplog                : 28
range                : 105
superexp             : 36 37 38
termino              : 94 95 96
terminor             : 90 91 93
tipo                 : 10 12 40 41 116 118 120
varcte               : 20 89 98
varcter              : 98
vars                 : 123 131 134
vars2                : 6 40 41
vars3                : 10 12 40 41 115
varsr                : 42 44
when                 : 52
when2                : 111 112
while                : 51

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . class classr
    (4) class -> . CLASS CID classparams class2 body
    (5) class -> . DATA CLASS CID classparams

    CLASS           shift and go to state 3
    DATA            shift and go to state 4

    file                           shift and go to state 1
    class                          shift and go to state 2

state 1

    (0) S' -> file .



state 2

    (1) file -> class . classr
    (2) classr -> . class classr
    (3) classr -> . empty
    (4) class -> . CLASS CID classparams class2 body
    (5) class -> . DATA CLASS CID classparams
    (142) empty -> .

    CLASS           shift and go to state 3
    DATA            shift and go to state 4
    $end            reduce using rule 142 (empty -> .)

    class                          shift and go to state 5
    classr                         shift and go to state 6
    empty                          shift and go to state 7

state 3

    (4) class -> CLASS . CID classparams class2 body

    CID             shift and go to state 8


state 4

    (5) class -> DATA . CLASS CID classparams

    CLASS           shift and go to state 9


state 5

    (2) classr -> class . classr
    (2) classr -> . class classr
    (3) classr -> . empty
    (4) class -> . CLASS CID classparams class2 body
    (5) class -> . DATA CLASS CID classparams
    (142) empty -> .

    CLASS           shift and go to state 3
    DATA            shift and go to state 4
    $end            reduce using rule 142 (empty -> .)

    class                          shift and go to state 5
    classr                         shift and go to state 10
    empty                          shift and go to state 7

state 6

    (1) file -> class classr .

    $end            reduce using rule 1 (file -> class classr .)


state 7

    (3) classr -> empty .

    $end            reduce using rule 3 (classr -> empty .)


state 8

    (4) class -> CLASS CID . classparams class2 body
    (8) classparams -> . PARIZQ classparams2 PARDER
    (9) classparams -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 12
    DOSPUNTOS       reduce using rule 142 (empty -> .)
    LLAVEIZQ        reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    DATA            reduce using rule 142 (empty -> .)
    $end            reduce using rule 142 (empty -> .)

    classparams                    shift and go to state 11
    empty                          shift and go to state 13

state 9

    (5) class -> DATA CLASS . CID classparams

    CID             shift and go to state 14


state 10

    (2) classr -> class classr .

    $end            reduce using rule 2 (classr -> class classr .)


state 11

    (4) class -> CLASS CID classparams . class2 body
    (6) class2 -> . DOSPUNTOS ID PARIZQ vars2 PARDER
    (7) class2 -> . empty
    (142) empty -> .

    DOSPUNTOS       shift and go to state 16
    LLAVEIZQ        reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    DATA            reduce using rule 142 (empty -> .)
    $end            reduce using rule 142 (empty -> .)

    class2                         shift and go to state 15
    empty                          shift and go to state 17

state 12

    (8) classparams -> PARIZQ . classparams2 PARDER
    (10) classparams2 -> . vars3 tipo ID classparams3
    (11) classparams2 -> . empty
    (45) vars3 -> . PRIVATE
    (46) vars3 -> . empty
    (142) empty -> .

    PRIVATE         shift and go to state 21
    PARDER          reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    BOOL            reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    CID             reduce using rule 142 (empty -> .)

    classparams2                   shift and go to state 18
    vars3                          shift and go to state 19
    empty                          shift and go to state 20

state 13

    (9) classparams -> empty .

    DOSPUNTOS       reduce using rule 9 (classparams -> empty .)
    LLAVEIZQ        reduce using rule 9 (classparams -> empty .)
    CLASS           reduce using rule 9 (classparams -> empty .)
    DATA            reduce using rule 9 (classparams -> empty .)
    $end            reduce using rule 9 (classparams -> empty .)


state 14

    (5) class -> DATA CLASS CID . classparams
    (8) classparams -> . PARIZQ classparams2 PARDER
    (9) classparams -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 12
    CLASS           reduce using rule 142 (empty -> .)
    DATA            reduce using rule 142 (empty -> .)
    $end            reduce using rule 142 (empty -> .)

    classparams                    shift and go to state 22
    empty                          shift and go to state 13

state 15

    (4) class -> CLASS CID classparams class2 . body
    (127) body -> . LLAVEIZQ body2 funr body_main LLAVEDER
    (128) body -> . empty
    (142) empty -> .

    LLAVEIZQ        shift and go to state 24
    CLASS           reduce using rule 142 (empty -> .)
    DATA            reduce using rule 142 (empty -> .)
    $end            reduce using rule 142 (empty -> .)

    body                           shift and go to state 23
    empty                          shift and go to state 25

state 16

    (6) class2 -> DOSPUNTOS . ID PARIZQ vars2 PARDER

    ID              shift and go to state 26


state 17

    (7) class2 -> empty .

    LLAVEIZQ        reduce using rule 7 (class2 -> empty .)
    CLASS           reduce using rule 7 (class2 -> empty .)
    DATA            reduce using rule 7 (class2 -> empty .)
    $end            reduce using rule 7 (class2 -> empty .)


state 18

    (8) classparams -> PARIZQ classparams2 . PARDER

    PARDER          shift and go to state 27


state 19

    (10) classparams2 -> vars3 . tipo ID classparams3
    (83) tipo -> . INT
    (84) tipo -> . FLOAT
    (85) tipo -> . BOOL
    (86) tipo -> . STRING
    (87) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 28

state 20

    (11) classparams2 -> empty .
    (46) vars3 -> empty .

    PARDER          reduce using rule 11 (classparams2 -> empty .)
    INT             reduce using rule 46 (vars3 -> empty .)
    FLOAT           reduce using rule 46 (vars3 -> empty .)
    BOOL            reduce using rule 46 (vars3 -> empty .)
    STRING          reduce using rule 46 (vars3 -> empty .)
    CID             reduce using rule 46 (vars3 -> empty .)


state 21

    (45) vars3 -> PRIVATE .

    INT             reduce using rule 45 (vars3 -> PRIVATE .)
    FLOAT           reduce using rule 45 (vars3 -> PRIVATE .)
    BOOL            reduce using rule 45 (vars3 -> PRIVATE .)
    STRING          reduce using rule 45 (vars3 -> PRIVATE .)
    CID             reduce using rule 45 (vars3 -> PRIVATE .)
    FUN             reduce using rule 45 (vars3 -> PRIVATE .)


state 22

    (5) class -> DATA CLASS CID classparams .

    CLASS           reduce using rule 5 (class -> DATA CLASS CID classparams .)
    DATA            reduce using rule 5 (class -> DATA CLASS CID classparams .)
    $end            reduce using rule 5 (class -> DATA CLASS CID classparams .)


state 23

    (4) class -> CLASS CID classparams class2 body .

    CLASS           reduce using rule 4 (class -> CLASS CID classparams class2 body .)
    DATA            reduce using rule 4 (class -> CLASS CID classparams class2 body .)
    $end            reduce using rule 4 (class -> CLASS CID classparams class2 body .)


state 24

    (127) body -> LLAVEIZQ . body2 funr body_main LLAVEDER
    (131) body2 -> . vars multvarsdecl
    (132) body2 -> . empty
    (40) vars -> . vars3 tipo vars2 COLON
    (41) vars -> . vars3 tipo LIST vars2 COLON
    (142) empty -> .
    (45) vars3 -> . PRIVATE
    (46) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)
    FUN             reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    BOOL            reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    CID             reduce using rule 142 (empty -> .)
    PRIVATE         shift and go to state 21

  ! PRIVATE         [ reduce using rule 142 (empty -> .) ]

    body2                          shift and go to state 34
    vars                           shift and go to state 35
    empty                          shift and go to state 36
    vars3                          shift and go to state 37

state 25

    (128) body -> empty .

    CLASS           reduce using rule 128 (body -> empty .)
    DATA            reduce using rule 128 (body -> empty .)
    $end            reduce using rule 128 (body -> empty .)


state 26

    (6) class2 -> DOSPUNTOS ID . PARIZQ vars2 PARDER

    PARIZQ          shift and go to state 38


state 27

    (8) classparams -> PARIZQ classparams2 PARDER .

    DOSPUNTOS       reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    LLAVEIZQ        reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    CLASS           reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    DATA            reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)
    $end            reduce using rule 8 (classparams -> PARIZQ classparams2 PARDER .)


state 28

    (10) classparams2 -> vars3 tipo . ID classparams3

    ID              shift and go to state 39


state 29

    (83) tipo -> INT .

    ID              reduce using rule 83 (tipo -> INT .)
    LIST            reduce using rule 83 (tipo -> INT .)
    LLAVEIZQ        reduce using rule 83 (tipo -> INT .)


state 30

    (84) tipo -> FLOAT .

    ID              reduce using rule 84 (tipo -> FLOAT .)
    LIST            reduce using rule 84 (tipo -> FLOAT .)
    LLAVEIZQ        reduce using rule 84 (tipo -> FLOAT .)


state 31

    (85) tipo -> BOOL .

    ID              reduce using rule 85 (tipo -> BOOL .)
    LIST            reduce using rule 85 (tipo -> BOOL .)
    LLAVEIZQ        reduce using rule 85 (tipo -> BOOL .)


state 32

    (86) tipo -> STRING .

    ID              reduce using rule 86 (tipo -> STRING .)
    LIST            reduce using rule 86 (tipo -> STRING .)
    LLAVEIZQ        reduce using rule 86 (tipo -> STRING .)


state 33

    (87) tipo -> CID .

    ID              reduce using rule 87 (tipo -> CID .)
    LIST            reduce using rule 87 (tipo -> CID .)
    LLAVEIZQ        reduce using rule 87 (tipo -> CID .)


state 34

    (127) body -> LLAVEIZQ body2 . funr body_main LLAVEDER
    (136) funr -> . fun funr
    (137) funr -> . empty
    (115) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (142) empty -> .
    (45) vars3 -> . PRIVATE
    (46) vars3 -> . empty

    MAIN            reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)
    FUN             reduce using rule 142 (empty -> .)
    PRIVATE         shift and go to state 21

    funr                           shift and go to state 40
    fun                            shift and go to state 41
    empty                          shift and go to state 42
    vars3                          shift and go to state 43

state 35

    (131) body2 -> vars . multvarsdecl
    (134) multvarsdecl -> . vars
    (135) multvarsdecl -> . empty
    (40) vars -> . vars3 tipo vars2 COLON
    (41) vars -> . vars3 tipo LIST vars2 COLON
    (142) empty -> .
    (45) vars3 -> . PRIVATE
    (46) vars3 -> . empty

  ! shift/reduce conflict for PRIVATE resolved as shift
    MAIN            reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)
    FUN             reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WRITE           reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    WHEN            reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    BOOL            reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    CID             reduce using rule 142 (empty -> .)
    PRIVATE         shift and go to state 21

  ! PRIVATE         [ reduce using rule 142 (empty -> .) ]

    vars                           shift and go to state 44
    multvarsdecl                   shift and go to state 45
    empty                          shift and go to state 46
    vars3                          shift and go to state 37

state 36

    (132) body2 -> empty .
    (46) vars3 -> empty .

    PRIVATE         reduce using rule 132 (body2 -> empty .)
    MAIN            reduce using rule 132 (body2 -> empty .)
    LLAVEDER        reduce using rule 132 (body2 -> empty .)
    FUN             reduce using rule 132 (body2 -> empty .)
    ID              reduce using rule 132 (body2 -> empty .)
    IF              reduce using rule 132 (body2 -> empty .)
    WRITE           reduce using rule 132 (body2 -> empty .)
    FOR             reduce using rule 132 (body2 -> empty .)
    WHILE           reduce using rule 132 (body2 -> empty .)
    WHEN            reduce using rule 132 (body2 -> empty .)
    INT             reduce using rule 46 (vars3 -> empty .)
    FLOAT           reduce using rule 46 (vars3 -> empty .)
    BOOL            reduce using rule 46 (vars3 -> empty .)
    STRING          reduce using rule 46 (vars3 -> empty .)
    CID             reduce using rule 46 (vars3 -> empty .)


state 37

    (40) vars -> vars3 . tipo vars2 COLON
    (41) vars -> vars3 . tipo LIST vars2 COLON
    (83) tipo -> . INT
    (84) tipo -> . FLOAT
    (85) tipo -> . BOOL
    (86) tipo -> . STRING
    (87) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 47

state 38

    (6) class2 -> DOSPUNTOS ID PARIZQ . vars2 PARDER
    (44) vars2 -> . ID varsr

    ID              shift and go to state 48

    vars2                          shift and go to state 49

state 39

    (10) classparams2 -> vars3 tipo ID . classparams3
    (12) classparams3 -> . COMA vars3 tipo ID classparams3
    (13) classparams3 -> . empty
    (142) empty -> .

    COMA            shift and go to state 51
    PARDER          reduce using rule 142 (empty -> .)

    classparams3                   shift and go to state 50
    empty                          shift and go to state 52

state 40

    (127) body -> LLAVEIZQ body2 funr . body_main LLAVEDER
    (129) body_main -> . MAIN PARIZQ PARDER mainbloque
    (130) body_main -> . empty
    (142) empty -> .

    MAIN            shift and go to state 54
    LLAVEDER        reduce using rule 142 (empty -> .)

    body_main                      shift and go to state 53
    empty                          shift and go to state 55

state 41

    (136) funr -> fun . funr
    (136) funr -> . fun funr
    (137) funr -> . empty
    (115) fun -> . vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody
    (142) empty -> .
    (45) vars3 -> . PRIVATE
    (46) vars3 -> . empty

    MAIN            reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)
    FUN             reduce using rule 142 (empty -> .)
    PRIVATE         shift and go to state 21

    fun                            shift and go to state 41
    funr                           shift and go to state 56
    empty                          shift and go to state 42
    vars3                          shift and go to state 43

state 42

    (137) funr -> empty .
    (46) vars3 -> empty .

    MAIN            reduce using rule 137 (funr -> empty .)
    LLAVEDER        reduce using rule 137 (funr -> empty .)
    FUN             reduce using rule 46 (vars3 -> empty .)


state 43

    (115) fun -> vars3 . FUN ID PARIZQ fun2 PARDER fun3 funbody

    FUN             shift and go to state 57


state 44

    (134) multvarsdecl -> vars .

    PRIVATE         reduce using rule 134 (multvarsdecl -> vars .)
    MAIN            reduce using rule 134 (multvarsdecl -> vars .)
    LLAVEDER        reduce using rule 134 (multvarsdecl -> vars .)
    FUN             reduce using rule 134 (multvarsdecl -> vars .)
    ID              reduce using rule 134 (multvarsdecl -> vars .)
    IF              reduce using rule 134 (multvarsdecl -> vars .)
    WRITE           reduce using rule 134 (multvarsdecl -> vars .)
    FOR             reduce using rule 134 (multvarsdecl -> vars .)
    WHILE           reduce using rule 134 (multvarsdecl -> vars .)
    WHEN            reduce using rule 134 (multvarsdecl -> vars .)
    RETURN          reduce using rule 134 (multvarsdecl -> vars .)


state 45

    (131) body2 -> vars multvarsdecl .

    PRIVATE         reduce using rule 131 (body2 -> vars multvarsdecl .)
    MAIN            reduce using rule 131 (body2 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 131 (body2 -> vars multvarsdecl .)
    FUN             reduce using rule 131 (body2 -> vars multvarsdecl .)
    ID              reduce using rule 131 (body2 -> vars multvarsdecl .)
    IF              reduce using rule 131 (body2 -> vars multvarsdecl .)
    WRITE           reduce using rule 131 (body2 -> vars multvarsdecl .)
    FOR             reduce using rule 131 (body2 -> vars multvarsdecl .)
    WHILE           reduce using rule 131 (body2 -> vars multvarsdecl .)
    WHEN            reduce using rule 131 (body2 -> vars multvarsdecl .)


state 46

    (135) multvarsdecl -> empty .
    (46) vars3 -> empty .

    PRIVATE         reduce using rule 135 (multvarsdecl -> empty .)
    MAIN            reduce using rule 135 (multvarsdecl -> empty .)
    LLAVEDER        reduce using rule 135 (multvarsdecl -> empty .)
    FUN             reduce using rule 135 (multvarsdecl -> empty .)
    ID              reduce using rule 135 (multvarsdecl -> empty .)
    IF              reduce using rule 135 (multvarsdecl -> empty .)
    WRITE           reduce using rule 135 (multvarsdecl -> empty .)
    FOR             reduce using rule 135 (multvarsdecl -> empty .)
    WHILE           reduce using rule 135 (multvarsdecl -> empty .)
    WHEN            reduce using rule 135 (multvarsdecl -> empty .)
    RETURN          reduce using rule 135 (multvarsdecl -> empty .)
    INT             reduce using rule 46 (vars3 -> empty .)
    FLOAT           reduce using rule 46 (vars3 -> empty .)
    BOOL            reduce using rule 46 (vars3 -> empty .)
    STRING          reduce using rule 46 (vars3 -> empty .)
    CID             reduce using rule 46 (vars3 -> empty .)


state 47

    (40) vars -> vars3 tipo . vars2 COLON
    (41) vars -> vars3 tipo . LIST vars2 COLON
    (44) vars2 -> . ID varsr

    LIST            shift and go to state 59
    ID              shift and go to state 48

    vars2                          shift and go to state 58

state 48

    (44) vars2 -> ID . varsr
    (42) varsr -> . COMA ID varsr
    (43) varsr -> . empty
    (142) empty -> .

    COMA            shift and go to state 61
    PARDER          reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)

    varsr                          shift and go to state 60
    empty                          shift and go to state 62

state 49

    (6) class2 -> DOSPUNTOS ID PARIZQ vars2 . PARDER

    PARDER          shift and go to state 63


state 50

    (10) classparams2 -> vars3 tipo ID classparams3 .

    PARDER          reduce using rule 10 (classparams2 -> vars3 tipo ID classparams3 .)


state 51

    (12) classparams3 -> COMA . vars3 tipo ID classparams3
    (45) vars3 -> . PRIVATE
    (46) vars3 -> . empty
    (142) empty -> .

    PRIVATE         shift and go to state 21
    INT             reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    BOOL            reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    CID             reduce using rule 142 (empty -> .)

    vars3                          shift and go to state 64
    empty                          shift and go to state 65

state 52

    (13) classparams3 -> empty .

    PARDER          reduce using rule 13 (classparams3 -> empty .)


state 53

    (127) body -> LLAVEIZQ body2 funr body_main . LLAVEDER

    LLAVEDER        shift and go to state 66


state 54

    (129) body_main -> MAIN . PARIZQ PARDER mainbloque

    PARIZQ          shift and go to state 67


state 55

    (130) body_main -> empty .

    LLAVEDER        reduce using rule 130 (body_main -> empty .)


state 56

    (136) funr -> fun funr .

    MAIN            reduce using rule 136 (funr -> fun funr .)
    LLAVEDER        reduce using rule 136 (funr -> fun funr .)


state 57

    (115) fun -> vars3 FUN . ID PARIZQ fun2 PARDER fun3 funbody

    ID              shift and go to state 68


state 58

    (40) vars -> vars3 tipo vars2 . COLON

    COLON           shift and go to state 69


state 59

    (41) vars -> vars3 tipo LIST . vars2 COLON
    (44) vars2 -> . ID varsr

    ID              shift and go to state 48

    vars2                          shift and go to state 70

state 60

    (44) vars2 -> ID varsr .

    PARDER          reduce using rule 44 (vars2 -> ID varsr .)
    COLON           reduce using rule 44 (vars2 -> ID varsr .)


state 61

    (42) varsr -> COMA . ID varsr

    ID              shift and go to state 71


state 62

    (43) varsr -> empty .

    PARDER          reduce using rule 43 (varsr -> empty .)
    COLON           reduce using rule 43 (varsr -> empty .)


state 63

    (6) class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .

    LLAVEIZQ        reduce using rule 6 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)
    CLASS           reduce using rule 6 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)
    DATA            reduce using rule 6 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)
    $end            reduce using rule 6 (class2 -> DOSPUNTOS ID PARIZQ vars2 PARDER .)


state 64

    (12) classparams3 -> COMA vars3 . tipo ID classparams3
    (83) tipo -> . INT
    (84) tipo -> . FLOAT
    (85) tipo -> . BOOL
    (86) tipo -> . STRING
    (87) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 72

state 65

    (46) vars3 -> empty .

    INT             reduce using rule 46 (vars3 -> empty .)
    FLOAT           reduce using rule 46 (vars3 -> empty .)
    BOOL            reduce using rule 46 (vars3 -> empty .)
    STRING          reduce using rule 46 (vars3 -> empty .)
    CID             reduce using rule 46 (vars3 -> empty .)


state 66

    (127) body -> LLAVEIZQ body2 funr body_main LLAVEDER .

    CLASS           reduce using rule 127 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)
    DATA            reduce using rule 127 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)
    $end            reduce using rule 127 (body -> LLAVEIZQ body2 funr body_main LLAVEDER .)


state 67

    (129) body_main -> MAIN PARIZQ . PARDER mainbloque

    PARDER          shift and go to state 73


state 68

    (115) fun -> vars3 FUN ID . PARIZQ fun2 PARDER fun3 funbody

    PARIZQ          shift and go to state 74


state 69

    (40) vars -> vars3 tipo vars2 COLON .

    PRIVATE         reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    INT             reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    FLOAT           reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    BOOL            reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    STRING          reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    CID             reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    MAIN            reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    LLAVEDER        reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    FUN             reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    ID              reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    IF              reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    WRITE           reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    FOR             reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    WHILE           reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    WHEN            reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)
    RETURN          reduce using rule 40 (vars -> vars3 tipo vars2 COLON .)


state 70

    (41) vars -> vars3 tipo LIST vars2 . COLON

    COLON           shift and go to state 75


state 71

    (42) varsr -> COMA ID . varsr
    (42) varsr -> . COMA ID varsr
    (43) varsr -> . empty
    (142) empty -> .

    COMA            shift and go to state 61
    PARDER          reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)

    varsr                          shift and go to state 76
    empty                          shift and go to state 62

state 72

    (12) classparams3 -> COMA vars3 tipo . ID classparams3

    ID              shift and go to state 77


state 73

    (129) body_main -> MAIN PARIZQ PARDER . mainbloque
    (133) mainbloque -> . LLAVEIZQ body2 estatuto LLAVEDER

    LLAVEIZQ        shift and go to state 79

    mainbloque                     shift and go to state 78

state 74

    (115) fun -> vars3 FUN ID PARIZQ . fun2 PARDER fun3 funbody
    (116) fun2 -> . tipo ID funparamr
    (117) fun2 -> . empty
    (83) tipo -> . INT
    (84) tipo -> . FLOAT
    (85) tipo -> . BOOL
    (86) tipo -> . STRING
    (87) tipo -> . CID
    (142) empty -> .

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33
    PARDER          reduce using rule 142 (empty -> .)

    fun2                           shift and go to state 80
    tipo                           shift and go to state 81
    empty                          shift and go to state 82

state 75

    (41) vars -> vars3 tipo LIST vars2 COLON .

    PRIVATE         reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    INT             reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    FLOAT           reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    BOOL            reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    STRING          reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    CID             reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    MAIN            reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    LLAVEDER        reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    FUN             reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    ID              reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    IF              reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    WRITE           reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    FOR             reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    WHILE           reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    WHEN            reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)
    RETURN          reduce using rule 41 (vars -> vars3 tipo LIST vars2 COLON .)


state 76

    (42) varsr -> COMA ID varsr .

    PARDER          reduce using rule 42 (varsr -> COMA ID varsr .)
    COLON           reduce using rule 42 (varsr -> COMA ID varsr .)


state 77

    (12) classparams3 -> COMA vars3 tipo ID . classparams3
    (12) classparams3 -> . COMA vars3 tipo ID classparams3
    (13) classparams3 -> . empty
    (142) empty -> .

    COMA            shift and go to state 51
    PARDER          reduce using rule 142 (empty -> .)

    classparams3                   shift and go to state 83
    empty                          shift and go to state 52

state 78

    (129) body_main -> MAIN PARIZQ PARDER mainbloque .

    LLAVEDER        reduce using rule 129 (body_main -> MAIN PARIZQ PARDER mainbloque .)


state 79

    (133) mainbloque -> LLAVEIZQ . body2 estatuto LLAVEDER
    (131) body2 -> . vars multvarsdecl
    (132) body2 -> . empty
    (40) vars -> . vars3 tipo vars2 COLON
    (41) vars -> . vars3 tipo LIST vars2 COLON
    (142) empty -> .
    (45) vars3 -> . PRIVATE
    (46) vars3 -> . empty

    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WRITE           reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    WHEN            reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    BOOL            reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    CID             reduce using rule 142 (empty -> .)
    PRIVATE         shift and go to state 21

    body2                          shift and go to state 84
    vars                           shift and go to state 35
    empty                          shift and go to state 36
    vars3                          shift and go to state 37

state 80

    (115) fun -> vars3 FUN ID PARIZQ fun2 . PARDER fun3 funbody

    PARDER          shift and go to state 85


state 81

    (116) fun2 -> tipo . ID funparamr

    ID              shift and go to state 86


state 82

    (117) fun2 -> empty .

    PARDER          reduce using rule 117 (fun2 -> empty .)


state 83

    (12) classparams3 -> COMA vars3 tipo ID classparams3 .

    PARDER          reduce using rule 12 (classparams3 -> COMA vars3 tipo ID classparams3 .)


state 84

    (133) mainbloque -> LLAVEIZQ body2 . estatuto LLAVEDER
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty
    (142) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101
    LLAVEDER        reduce using rule 142 (empty -> .)

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    estatuto                       shift and go to state 87
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    empty                          shift and go to state 95

state 85

    (115) fun -> vars3 FUN ID PARIZQ fun2 PARDER . fun3 funbody
    (120) fun3 -> . DOSPUNTOS tipo
    (121) fun3 -> . empty
    (142) empty -> .

    DOSPUNTOS       shift and go to state 103
    LLAVEIZQ        reduce using rule 142 (empty -> .)

    fun3                           shift and go to state 102
    empty                          shift and go to state 104

state 86

    (116) fun2 -> tipo ID . funparamr
    (118) funparamr -> . COMA tipo ID funparamr
    (119) funparamr -> . empty
    (142) empty -> .

    COMA            shift and go to state 106
    PARDER          reduce using rule 142 (empty -> .)

    funparamr                      shift and go to state 105
    empty                          shift and go to state 107

state 87

    (133) mainbloque -> LLAVEIZQ body2 estatuto . LLAVEDER

    LLAVEDER        shift and go to state 108


state 88

    (47) estatuto -> asignacion . estatuto
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty
    (142) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101
    LLAVEDER        reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    asignacion                     shift and go to state 88
    estatuto                       shift and go to state 109
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    empty                          shift and go to state 95

state 89

    (48) estatuto -> condicion . estatuto
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty
    (142) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101
    LLAVEDER        reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    condicion                      shift and go to state 89
    estatuto                       shift and go to state 110
    asignacion                     shift and go to state 88
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    empty                          shift and go to state 95

state 90

    (49) estatuto -> escritura . estatuto
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty
    (142) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101
    LLAVEDER        reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    escritura                      shift and go to state 90
    estatuto                       shift and go to state 111
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    empty                          shift and go to state 95

state 91

    (50) estatuto -> for . estatuto
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty
    (142) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101
    LLAVEDER        reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    for                            shift and go to state 91
    estatuto                       shift and go to state 112
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    empty                          shift and go to state 95

state 92

    (51) estatuto -> while . estatuto
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty
    (142) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101
    LLAVEDER        reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    while                          shift and go to state 92
    estatuto                       shift and go to state 113
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    empty                          shift and go to state 95

state 93

    (52) estatuto -> when . estatuto
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty
    (142) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101
    LLAVEDER        reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    when                           shift and go to state 93
    estatuto                       shift and go to state 114
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    llamada                        shift and go to state 94
    empty                          shift and go to state 95

state 94

    (53) estatuto -> llamada . estatuto
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty
    (142) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101
    LLAVEDER        reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    llamada                        shift and go to state 94
    estatuto                       shift and go to state 115
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    empty                          shift and go to state 95

state 95

    (54) estatuto -> empty .
    (139) llamada -> empty .

  ! reduce/reduce conflict for LLAVEDER resolved using rule 54 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 54 (estatuto -> empty .)
    LLAVEDER        reduce using rule 54 (estatuto -> empty .)
    RETURN          reduce using rule 54 (estatuto -> empty .)
    ID              reduce using rule 139 (llamada -> empty .)
    IF              reduce using rule 139 (llamada -> empty .)
    WRITE           reduce using rule 139 (llamada -> empty .)
    FOR             reduce using rule 139 (llamada -> empty .)
    WHILE           reduce using rule 139 (llamada -> empty .)
    WHEN            reduce using rule 139 (llamada -> empty .)

  ! LLAVEDER        [ reduce using rule 139 (llamada -> empty .) ]
  ! RETURN          [ reduce using rule 139 (llamada -> empty .) ]


state 96

    (55) asignacion -> ID . asignacion3 IGUAL asignacion2 COLON
    (138) llamada -> ID . PARIZQ llamada_param PARDER COLON
    (64) asignacion3 -> . CORCHIZQ expresion CORCHDER
    (65) asignacion3 -> . PUNTO ID
    (66) asignacion3 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 117
    CORCHIZQ        shift and go to state 118
    PUNTO           shift and go to state 119
    IGUAL           reduce using rule 142 (empty -> .)

    asignacion3                    shift and go to state 116
    empty                          shift and go to state 120

state 97

    (67) condicion -> IF . condicion2 estatutor
    (68) condicion2 -> . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 122

    condicion2                     shift and go to state 121

state 98

    (78) escritura -> WRITE . PARIZQ esc1 esc2 PARDER COLON

    PARIZQ          shift and go to state 123


state 99

    (103) for -> FOR . PARIZQ ID IN for2 PARDER bloque

    PARIZQ          shift and go to state 124


state 100

    (110) while -> WHILE . PARIZQ expresion PARDER bloque

    PARIZQ          shift and go to state 125


state 101

    (111) when -> WHEN . LLAVEIZQ when2 LLAVEDER

    LLAVEIZQ        shift and go to state 126


state 102

    (115) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 . funbody
    (122) funbody -> . LLAVEIZQ opc1 opc2 bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 128

    funbody                        shift and go to state 127

state 103

    (120) fun3 -> DOSPUNTOS . tipo
    (83) tipo -> . INT
    (84) tipo -> . FLOAT
    (85) tipo -> . BOOL
    (86) tipo -> . STRING
    (87) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 129

state 104

    (121) fun3 -> empty .

    LLAVEIZQ        reduce using rule 121 (fun3 -> empty .)


state 105

    (116) fun2 -> tipo ID funparamr .

    PARDER          reduce using rule 116 (fun2 -> tipo ID funparamr .)


state 106

    (118) funparamr -> COMA . tipo ID funparamr
    (83) tipo -> . INT
    (84) tipo -> . FLOAT
    (85) tipo -> . BOOL
    (86) tipo -> . STRING
    (87) tipo -> . CID

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31
    STRING          shift and go to state 32
    CID             shift and go to state 33

    tipo                           shift and go to state 130

state 107

    (119) funparamr -> empty .

    PARDER          reduce using rule 119 (funparamr -> empty .)


state 108

    (133) mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .

    LLAVEDER        reduce using rule 133 (mainbloque -> LLAVEIZQ body2 estatuto LLAVEDER .)


state 109

    (47) estatuto -> asignacion estatuto .

    LLAVEDER        reduce using rule 47 (estatuto -> asignacion estatuto .)
    RETURN          reduce using rule 47 (estatuto -> asignacion estatuto .)


state 110

    (48) estatuto -> condicion estatuto .

    LLAVEDER        reduce using rule 48 (estatuto -> condicion estatuto .)
    RETURN          reduce using rule 48 (estatuto -> condicion estatuto .)


state 111

    (49) estatuto -> escritura estatuto .

    LLAVEDER        reduce using rule 49 (estatuto -> escritura estatuto .)
    RETURN          reduce using rule 49 (estatuto -> escritura estatuto .)


state 112

    (50) estatuto -> for estatuto .

    LLAVEDER        reduce using rule 50 (estatuto -> for estatuto .)
    RETURN          reduce using rule 50 (estatuto -> for estatuto .)


state 113

    (51) estatuto -> while estatuto .

    LLAVEDER        reduce using rule 51 (estatuto -> while estatuto .)
    RETURN          reduce using rule 51 (estatuto -> while estatuto .)


state 114

    (52) estatuto -> when estatuto .

    LLAVEDER        reduce using rule 52 (estatuto -> when estatuto .)
    RETURN          reduce using rule 52 (estatuto -> when estatuto .)


state 115

    (53) estatuto -> llamada estatuto .

    LLAVEDER        reduce using rule 53 (estatuto -> llamada estatuto .)
    RETURN          reduce using rule 53 (estatuto -> llamada estatuto .)


state 116

    (55) asignacion -> ID asignacion3 . IGUAL asignacion2 COLON

    IGUAL           shift and go to state 131


state 117

    (138) llamada -> ID PARIZQ . llamada_param PARDER COLON
    (140) llamada_param -> . expresion expresionr
    (141) llamada_param -> . empty
    (23) expresion -> . megaexp
    (142) empty -> .
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty

    PARDER          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)
    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143

    llamada_param                  shift and go to state 133
    expresion                      shift and go to state 134
    empty                          shift and go to state 135
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141

state 118

    (64) asignacion3 -> CORCHIZQ . expresion CORCHDER
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    expresion                      shift and go to state 144
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 119

    (65) asignacion3 -> PUNTO . ID

    ID              shift and go to state 146


state 120

    (66) asignacion3 -> empty .

    IGUAL           reduce using rule 66 (asignacion3 -> empty .)


state 121

    (67) condicion -> IF condicion2 . estatutor
    (76) estatutor -> . ELSE bloque
    (77) estatutor -> . empty
    (142) empty -> .

    ELSE            shift and go to state 148
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WRITE           reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    WHEN            reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

    estatutor                      shift and go to state 147
    empty                          shift and go to state 149

state 122

    (68) condicion2 -> PARIZQ . expresion PARDER bloque
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    expresion                      shift and go to state 150
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 123

    (78) escritura -> WRITE PARIZQ . esc1 esc2 PARDER COLON
    (79) esc1 -> . expresion
    (80) esc1 -> . STRING
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    STRING          shift and go to state 153
    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    esc1                           shift and go to state 151
    expresion                      shift and go to state 152
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 124

    (103) for -> FOR PARIZQ . ID IN for2 PARDER bloque

    ID              shift and go to state 154


state 125

    (110) while -> WHILE PARIZQ . expresion PARDER bloque
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    expresion                      shift and go to state 155
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 126

    (111) when -> WHEN LLAVEIZQ . when2 LLAVEDER
    (112) when2 -> . expresion FLECHITA bloque when2
    (113) when2 -> . ELSE FLECHITA bloque
    (114) when2 -> . empty
    (23) expresion -> . megaexp
    (142) empty -> .
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty

    ELSE            shift and go to state 158
    LLAVEDER        reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)
    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143

    when2                          shift and go to state 156
    expresion                      shift and go to state 157
    empty                          shift and go to state 159
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141

state 127

    (115) fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .

    PRIVATE         reduce using rule 115 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    FUN             reduce using rule 115 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    MAIN            reduce using rule 115 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)
    LLAVEDER        reduce using rule 115 (fun -> vars3 FUN ID PARIZQ fun2 PARDER fun3 funbody .)


state 128

    (122) funbody -> LLAVEIZQ . opc1 opc2 bloque2 LLAVEDER
    (123) opc1 -> . vars multvarsdecl
    (124) opc1 -> . empty
    (40) vars -> . vars3 tipo vars2 COLON
    (41) vars -> . vars3 tipo LIST vars2 COLON
    (142) empty -> .
    (45) vars3 -> . PRIVATE
    (46) vars3 -> . empty

    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WRITE           reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    WHEN            reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    BOOL            reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    CID             reduce using rule 142 (empty -> .)
    PRIVATE         shift and go to state 21

    opc1                           shift and go to state 160
    vars                           shift and go to state 161
    empty                          shift and go to state 162
    vars3                          shift and go to state 37

state 129

    (120) fun3 -> DOSPUNTOS tipo .

    LLAVEIZQ        reduce using rule 120 (fun3 -> DOSPUNTOS tipo .)


state 130

    (118) funparamr -> COMA tipo . ID funparamr

    ID              shift and go to state 163


state 131

    (55) asignacion -> ID asignacion3 IGUAL . asignacion2 COLON
    (56) asignacion2 -> . expresion
    (57) asignacion2 -> . CORCHDER expresion asignacion2r CORCHIZQ
    (58) asignacion2 -> . READ PARIZQ assign_read PARDER
    (59) asignacion2 -> . CID PARIZQ expresion expresionr PARDER
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    CORCHDER        shift and go to state 166
    READ            shift and go to state 167
    CID             shift and go to state 168
    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    asignacion2                    shift and go to state 164
    expresion                      shift and go to state 165
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 132

    (88) factor -> PARIZQ . expresion PARDER
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    expresion                      shift and go to state 169
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 133

    (138) llamada -> ID PARIZQ llamada_param . PARDER COLON

    PARDER          shift and go to state 170


state 134

    (140) llamada_param -> expresion . expresionr
    (24) expresionr -> . COMA expresion expresionr
    (25) expresionr -> . empty
    (142) empty -> .

    COMA            shift and go to state 172
    PARDER          reduce using rule 142 (empty -> .)

    expresionr                     shift and go to state 171
    empty                          shift and go to state 173

state 135

    (141) llamada_param -> empty .
    (102) factor2 -> empty .

    PARDER          reduce using rule 141 (llamada_param -> empty .)
    ID              reduce using rule 102 (factor2 -> empty .)
    INTNUM          reduce using rule 102 (factor2 -> empty .)
    FLOATNUM        reduce using rule 102 (factor2 -> empty .)
    TRUE            reduce using rule 102 (factor2 -> empty .)
    FALSE           reduce using rule 102 (factor2 -> empty .)
    STRINGVAL       reduce using rule 102 (factor2 -> empty .)


state 136

    (23) expresion -> megaexp .

    COMA            reduce using rule 23 (expresion -> megaexp .)
    PARDER          reduce using rule 23 (expresion -> megaexp .)
    CORCHDER        reduce using rule 23 (expresion -> megaexp .)
    FLECHITA        reduce using rule 23 (expresion -> megaexp .)
    COLON           reduce using rule 23 (expresion -> megaexp .)
    CORCHIZQ        reduce using rule 23 (expresion -> megaexp .)


state 137

    (36) megaexp -> superexp . megaexpr
    (37) megaexpr -> . AND superexp megaexpr
    (38) megaexpr -> . OR superexp megaexpr
    (39) megaexpr -> . empty
    (142) empty -> .

    AND             shift and go to state 175
    OR              shift and go to state 176
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    megaexpr                       shift and go to state 174
    empty                          shift and go to state 177

state 138

    (28) superexp -> exp . oplog
    (29) oplog -> . MAYORQUE exp
    (30) oplog -> . MENORQUE exp
    (31) oplog -> . DIFERENTE exp
    (32) oplog -> . MAYOROIGUAL exp
    (33) oplog -> . MENOROIGUAL exp
    (34) oplog -> . IGUALIGUAL exp
    (35) oplog -> . empty
    (142) empty -> .

    MAYORQUE        shift and go to state 179
    MENORQUE        shift and go to state 180
    DIFERENTE       shift and go to state 181
    MAYOROIGUAL     shift and go to state 182
    MENOROIGUAL     shift and go to state 183
    IGUALIGUAL      shift and go to state 184
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    oplog                          shift and go to state 178
    empty                          shift and go to state 185

state 139

    (94) exp -> termino . expr
    (95) expr -> . MAS termino expr
    (96) expr -> . MENOS termino expr
    (97) expr -> . empty
    (142) empty -> .

    MAS             shift and go to state 187
    MENOS           shift and go to state 188
    MAYORQUE        reduce using rule 142 (empty -> .)
    MENORQUE        reduce using rule 142 (empty -> .)
    DIFERENTE       reduce using rule 142 (empty -> .)
    MAYOROIGUAL     reduce using rule 142 (empty -> .)
    MENOROIGUAL     reduce using rule 142 (empty -> .)
    IGUALIGUAL      reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    expr                           shift and go to state 186
    empty                          shift and go to state 189

state 140

    (93) termino -> factor . terminor
    (90) terminor -> . POR factor terminor
    (91) terminor -> . SOBRE factor terminor
    (92) terminor -> . empty
    (142) empty -> .

    POR             shift and go to state 191
    SOBRE           shift and go to state 192
    MAS             reduce using rule 142 (empty -> .)
    MENOS           reduce using rule 142 (empty -> .)
    MAYORQUE        reduce using rule 142 (empty -> .)
    MENORQUE        reduce using rule 142 (empty -> .)
    DIFERENTE       reduce using rule 142 (empty -> .)
    MAYOROIGUAL     reduce using rule 142 (empty -> .)
    MENOROIGUAL     reduce using rule 142 (empty -> .)
    IGUALIGUAL      reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    terminor                       shift and go to state 190
    empty                          shift and go to state 193

state 141

    (89) factor -> factor2 . varcte
    (14) varcte -> . ID
    (15) varcte -> . INTNUM
    (16) varcte -> . FLOATNUM
    (17) varcte -> . TRUE
    (18) varcte -> . FALSE
    (19) varcte -> . STRINGVAL
    (20) varcte -> . ID CORCHIZQ varcte CORCHDER
    (21) varcte -> . ID PUNTO ID
    (22) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 195
    INTNUM          shift and go to state 196
    FLOATNUM        shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199
    STRINGVAL       shift and go to state 200

    varcte                         shift and go to state 194

state 142

    (100) factor2 -> MAS .

    ID              reduce using rule 100 (factor2 -> MAS .)
    INTNUM          reduce using rule 100 (factor2 -> MAS .)
    FLOATNUM        reduce using rule 100 (factor2 -> MAS .)
    TRUE            reduce using rule 100 (factor2 -> MAS .)
    FALSE           reduce using rule 100 (factor2 -> MAS .)
    STRINGVAL       reduce using rule 100 (factor2 -> MAS .)


state 143

    (101) factor2 -> MENOS .

    ID              reduce using rule 101 (factor2 -> MENOS .)
    INTNUM          reduce using rule 101 (factor2 -> MENOS .)
    FLOATNUM        reduce using rule 101 (factor2 -> MENOS .)
    TRUE            reduce using rule 101 (factor2 -> MENOS .)
    FALSE           reduce using rule 101 (factor2 -> MENOS .)
    STRINGVAL       reduce using rule 101 (factor2 -> MENOS .)


state 144

    (64) asignacion3 -> CORCHIZQ expresion . CORCHDER

    CORCHDER        shift and go to state 201


state 145

    (102) factor2 -> empty .

    ID              reduce using rule 102 (factor2 -> empty .)
    INTNUM          reduce using rule 102 (factor2 -> empty .)
    FLOATNUM        reduce using rule 102 (factor2 -> empty .)
    TRUE            reduce using rule 102 (factor2 -> empty .)
    FALSE           reduce using rule 102 (factor2 -> empty .)
    STRINGVAL       reduce using rule 102 (factor2 -> empty .)


state 146

    (65) asignacion3 -> PUNTO ID .

    IGUAL           reduce using rule 65 (asignacion3 -> PUNTO ID .)


state 147

    (67) condicion -> IF condicion2 estatutor .

    ID              reduce using rule 67 (condicion -> IF condicion2 estatutor .)
    IF              reduce using rule 67 (condicion -> IF condicion2 estatutor .)
    WRITE           reduce using rule 67 (condicion -> IF condicion2 estatutor .)
    FOR             reduce using rule 67 (condicion -> IF condicion2 estatutor .)
    WHILE           reduce using rule 67 (condicion -> IF condicion2 estatutor .)
    WHEN            reduce using rule 67 (condicion -> IF condicion2 estatutor .)
    LLAVEDER        reduce using rule 67 (condicion -> IF condicion2 estatutor .)
    RETURN          reduce using rule 67 (condicion -> IF condicion2 estatutor .)


state 148

    (76) estatutor -> ELSE . bloque
    (71) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 203

    bloque                         shift and go to state 202

state 149

    (77) estatutor -> empty .

    ID              reduce using rule 77 (estatutor -> empty .)
    IF              reduce using rule 77 (estatutor -> empty .)
    WRITE           reduce using rule 77 (estatutor -> empty .)
    FOR             reduce using rule 77 (estatutor -> empty .)
    WHILE           reduce using rule 77 (estatutor -> empty .)
    WHEN            reduce using rule 77 (estatutor -> empty .)
    LLAVEDER        reduce using rule 77 (estatutor -> empty .)
    RETURN          reduce using rule 77 (estatutor -> empty .)


state 150

    (68) condicion2 -> PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 204


state 151

    (78) escritura -> WRITE PARIZQ esc1 . esc2 PARDER COLON
    (81) esc2 -> . COMA esc1 esc2
    (82) esc2 -> . empty
    (142) empty -> .

    COMA            shift and go to state 206
    PARDER          reduce using rule 142 (empty -> .)

    esc2                           shift and go to state 205
    empty                          shift and go to state 207

state 152

    (79) esc1 -> expresion .

    COMA            reduce using rule 79 (esc1 -> expresion .)
    PARDER          reduce using rule 79 (esc1 -> expresion .)


state 153

    (80) esc1 -> STRING .

    COMA            reduce using rule 80 (esc1 -> STRING .)
    PARDER          reduce using rule 80 (esc1 -> STRING .)


state 154

    (103) for -> FOR PARIZQ ID . IN for2 PARDER bloque

    IN              shift and go to state 208


state 155

    (110) while -> WHILE PARIZQ expresion . PARDER bloque

    PARDER          shift and go to state 209


state 156

    (111) when -> WHEN LLAVEIZQ when2 . LLAVEDER

    LLAVEDER        shift and go to state 210


state 157

    (112) when2 -> expresion . FLECHITA bloque when2

    FLECHITA        shift and go to state 211


state 158

    (113) when2 -> ELSE . FLECHITA bloque

    FLECHITA        shift and go to state 212


state 159

    (114) when2 -> empty .
    (102) factor2 -> empty .

    LLAVEDER        reduce using rule 114 (when2 -> empty .)
    ID              reduce using rule 102 (factor2 -> empty .)
    INTNUM          reduce using rule 102 (factor2 -> empty .)
    FLOATNUM        reduce using rule 102 (factor2 -> empty .)
    TRUE            reduce using rule 102 (factor2 -> empty .)
    FALSE           reduce using rule 102 (factor2 -> empty .)
    STRINGVAL       reduce using rule 102 (factor2 -> empty .)


state 160

    (122) funbody -> LLAVEIZQ opc1 . opc2 bloque2 LLAVEDER
    (125) opc2 -> . estatuto
    (126) opc2 -> . empty
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (142) empty -> .
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    RETURN          reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    opc2                           shift and go to state 213
    estatuto                       shift and go to state 214
    empty                          shift and go to state 215
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94

state 161

    (123) opc1 -> vars . multvarsdecl
    (134) multvarsdecl -> . vars
    (135) multvarsdecl -> . empty
    (40) vars -> . vars3 tipo vars2 COLON
    (41) vars -> . vars3 tipo LIST vars2 COLON
    (142) empty -> .
    (45) vars3 -> . PRIVATE
    (46) vars3 -> . empty

    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WRITE           reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    WHEN            reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    BOOL            reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    CID             reduce using rule 142 (empty -> .)
    PRIVATE         shift and go to state 21

    vars                           shift and go to state 44
    multvarsdecl                   shift and go to state 216
    empty                          shift and go to state 46
    vars3                          shift and go to state 37

state 162

    (124) opc1 -> empty .
    (46) vars3 -> empty .

    ID              reduce using rule 124 (opc1 -> empty .)
    IF              reduce using rule 124 (opc1 -> empty .)
    WRITE           reduce using rule 124 (opc1 -> empty .)
    FOR             reduce using rule 124 (opc1 -> empty .)
    WHILE           reduce using rule 124 (opc1 -> empty .)
    WHEN            reduce using rule 124 (opc1 -> empty .)
    RETURN          reduce using rule 124 (opc1 -> empty .)
    LLAVEDER        reduce using rule 124 (opc1 -> empty .)
    INT             reduce using rule 46 (vars3 -> empty .)
    FLOAT           reduce using rule 46 (vars3 -> empty .)
    BOOL            reduce using rule 46 (vars3 -> empty .)
    STRING          reduce using rule 46 (vars3 -> empty .)
    CID             reduce using rule 46 (vars3 -> empty .)


state 163

    (118) funparamr -> COMA tipo ID . funparamr
    (118) funparamr -> . COMA tipo ID funparamr
    (119) funparamr -> . empty
    (142) empty -> .

    COMA            shift and go to state 106
    PARDER          reduce using rule 142 (empty -> .)

    funparamr                      shift and go to state 217
    empty                          shift and go to state 107

state 164

    (55) asignacion -> ID asignacion3 IGUAL asignacion2 . COLON

    COLON           shift and go to state 218


state 165

    (56) asignacion2 -> expresion .

    COLON           reduce using rule 56 (asignacion2 -> expresion .)


state 166

    (57) asignacion2 -> CORCHDER . expresion asignacion2r CORCHIZQ
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    expresion                      shift and go to state 219
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 167

    (58) asignacion2 -> READ . PARIZQ assign_read PARDER

    PARIZQ          shift and go to state 220


state 168

    (59) asignacion2 -> CID . PARIZQ expresion expresionr PARDER

    PARIZQ          shift and go to state 221


state 169

    (88) factor -> PARIZQ expresion . PARDER

    PARDER          shift and go to state 222


state 170

    (138) llamada -> ID PARIZQ llamada_param PARDER . COLON

    COLON           shift and go to state 223


state 171

    (140) llamada_param -> expresion expresionr .

    PARDER          reduce using rule 140 (llamada_param -> expresion expresionr .)


state 172

    (24) expresionr -> COMA . expresion expresionr
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    expresion                      shift and go to state 224
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 173

    (25) expresionr -> empty .

    PARDER          reduce using rule 25 (expresionr -> empty .)


state 174

    (36) megaexp -> superexp megaexpr .

    COMA            reduce using rule 36 (megaexp -> superexp megaexpr .)
    PARDER          reduce using rule 36 (megaexp -> superexp megaexpr .)
    CORCHDER        reduce using rule 36 (megaexp -> superexp megaexpr .)
    FLECHITA        reduce using rule 36 (megaexp -> superexp megaexpr .)
    COLON           reduce using rule 36 (megaexp -> superexp megaexpr .)
    CORCHIZQ        reduce using rule 36 (megaexp -> superexp megaexpr .)


state 175

    (37) megaexpr -> AND . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    superexp                       shift and go to state 225
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 176

    (38) megaexpr -> OR . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    superexp                       shift and go to state 226
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 177

    (39) megaexpr -> empty .

    COMA            reduce using rule 39 (megaexpr -> empty .)
    PARDER          reduce using rule 39 (megaexpr -> empty .)
    CORCHDER        reduce using rule 39 (megaexpr -> empty .)
    FLECHITA        reduce using rule 39 (megaexpr -> empty .)
    COLON           reduce using rule 39 (megaexpr -> empty .)
    CORCHIZQ        reduce using rule 39 (megaexpr -> empty .)


state 178

    (28) superexp -> exp oplog .

    AND             reduce using rule 28 (superexp -> exp oplog .)
    OR              reduce using rule 28 (superexp -> exp oplog .)
    COMA            reduce using rule 28 (superexp -> exp oplog .)
    PARDER          reduce using rule 28 (superexp -> exp oplog .)
    CORCHDER        reduce using rule 28 (superexp -> exp oplog .)
    FLECHITA        reduce using rule 28 (superexp -> exp oplog .)
    COLON           reduce using rule 28 (superexp -> exp oplog .)
    CORCHIZQ        reduce using rule 28 (superexp -> exp oplog .)


state 179

    (29) oplog -> MAYORQUE . exp
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    exp                            shift and go to state 227
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 180

    (30) oplog -> MENORQUE . exp
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    exp                            shift and go to state 228
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 181

    (31) oplog -> DIFERENTE . exp
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    exp                            shift and go to state 229
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 182

    (32) oplog -> MAYOROIGUAL . exp
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    exp                            shift and go to state 230
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 183

    (33) oplog -> MENOROIGUAL . exp
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    exp                            shift and go to state 231
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 184

    (34) oplog -> IGUALIGUAL . exp
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    exp                            shift and go to state 232
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 185

    (35) oplog -> empty .

    AND             reduce using rule 35 (oplog -> empty .)
    OR              reduce using rule 35 (oplog -> empty .)
    COMA            reduce using rule 35 (oplog -> empty .)
    PARDER          reduce using rule 35 (oplog -> empty .)
    CORCHDER        reduce using rule 35 (oplog -> empty .)
    FLECHITA        reduce using rule 35 (oplog -> empty .)
    COLON           reduce using rule 35 (oplog -> empty .)
    CORCHIZQ        reduce using rule 35 (oplog -> empty .)


state 186

    (94) exp -> termino expr .

    MAYORQUE        reduce using rule 94 (exp -> termino expr .)
    MENORQUE        reduce using rule 94 (exp -> termino expr .)
    DIFERENTE       reduce using rule 94 (exp -> termino expr .)
    MAYOROIGUAL     reduce using rule 94 (exp -> termino expr .)
    MENOROIGUAL     reduce using rule 94 (exp -> termino expr .)
    IGUALIGUAL      reduce using rule 94 (exp -> termino expr .)
    AND             reduce using rule 94 (exp -> termino expr .)
    OR              reduce using rule 94 (exp -> termino expr .)
    COMA            reduce using rule 94 (exp -> termino expr .)
    PARDER          reduce using rule 94 (exp -> termino expr .)
    CORCHDER        reduce using rule 94 (exp -> termino expr .)
    FLECHITA        reduce using rule 94 (exp -> termino expr .)
    COLON           reduce using rule 94 (exp -> termino expr .)
    CORCHIZQ        reduce using rule 94 (exp -> termino expr .)


state 187

    (95) expr -> MAS . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    termino                        shift and go to state 233
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 188

    (96) expr -> MENOS . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    termino                        shift and go to state 234
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 189

    (97) expr -> empty .

    MAYORQUE        reduce using rule 97 (expr -> empty .)
    MENORQUE        reduce using rule 97 (expr -> empty .)
    DIFERENTE       reduce using rule 97 (expr -> empty .)
    MAYOROIGUAL     reduce using rule 97 (expr -> empty .)
    MENOROIGUAL     reduce using rule 97 (expr -> empty .)
    IGUALIGUAL      reduce using rule 97 (expr -> empty .)
    AND             reduce using rule 97 (expr -> empty .)
    OR              reduce using rule 97 (expr -> empty .)
    COMA            reduce using rule 97 (expr -> empty .)
    PARDER          reduce using rule 97 (expr -> empty .)
    CORCHDER        reduce using rule 97 (expr -> empty .)
    FLECHITA        reduce using rule 97 (expr -> empty .)
    COLON           reduce using rule 97 (expr -> empty .)
    CORCHIZQ        reduce using rule 97 (expr -> empty .)


state 190

    (93) termino -> factor terminor .

    MAS             reduce using rule 93 (termino -> factor terminor .)
    MENOS           reduce using rule 93 (termino -> factor terminor .)
    MAYORQUE        reduce using rule 93 (termino -> factor terminor .)
    MENORQUE        reduce using rule 93 (termino -> factor terminor .)
    DIFERENTE       reduce using rule 93 (termino -> factor terminor .)
    MAYOROIGUAL     reduce using rule 93 (termino -> factor terminor .)
    MENOROIGUAL     reduce using rule 93 (termino -> factor terminor .)
    IGUALIGUAL      reduce using rule 93 (termino -> factor terminor .)
    AND             reduce using rule 93 (termino -> factor terminor .)
    OR              reduce using rule 93 (termino -> factor terminor .)
    COMA            reduce using rule 93 (termino -> factor terminor .)
    PARDER          reduce using rule 93 (termino -> factor terminor .)
    CORCHDER        reduce using rule 93 (termino -> factor terminor .)
    FLECHITA        reduce using rule 93 (termino -> factor terminor .)
    COLON           reduce using rule 93 (termino -> factor terminor .)
    CORCHIZQ        reduce using rule 93 (termino -> factor terminor .)


state 191

    (90) terminor -> POR . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    factor                         shift and go to state 235
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 192

    (91) terminor -> SOBRE . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    factor                         shift and go to state 236
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 193

    (92) terminor -> empty .

    MAS             reduce using rule 92 (terminor -> empty .)
    MENOS           reduce using rule 92 (terminor -> empty .)
    MAYORQUE        reduce using rule 92 (terminor -> empty .)
    MENORQUE        reduce using rule 92 (terminor -> empty .)
    DIFERENTE       reduce using rule 92 (terminor -> empty .)
    MAYOROIGUAL     reduce using rule 92 (terminor -> empty .)
    MENOROIGUAL     reduce using rule 92 (terminor -> empty .)
    IGUALIGUAL      reduce using rule 92 (terminor -> empty .)
    AND             reduce using rule 92 (terminor -> empty .)
    OR              reduce using rule 92 (terminor -> empty .)
    COMA            reduce using rule 92 (terminor -> empty .)
    PARDER          reduce using rule 92 (terminor -> empty .)
    CORCHDER        reduce using rule 92 (terminor -> empty .)
    FLECHITA        reduce using rule 92 (terminor -> empty .)
    COLON           reduce using rule 92 (terminor -> empty .)
    CORCHIZQ        reduce using rule 92 (terminor -> empty .)


state 194

    (89) factor -> factor2 varcte .

    POR             reduce using rule 89 (factor -> factor2 varcte .)
    SOBRE           reduce using rule 89 (factor -> factor2 varcte .)
    MAS             reduce using rule 89 (factor -> factor2 varcte .)
    MENOS           reduce using rule 89 (factor -> factor2 varcte .)
    MAYORQUE        reduce using rule 89 (factor -> factor2 varcte .)
    MENORQUE        reduce using rule 89 (factor -> factor2 varcte .)
    DIFERENTE       reduce using rule 89 (factor -> factor2 varcte .)
    MAYOROIGUAL     reduce using rule 89 (factor -> factor2 varcte .)
    MENOROIGUAL     reduce using rule 89 (factor -> factor2 varcte .)
    IGUALIGUAL      reduce using rule 89 (factor -> factor2 varcte .)
    AND             reduce using rule 89 (factor -> factor2 varcte .)
    OR              reduce using rule 89 (factor -> factor2 varcte .)
    COMA            reduce using rule 89 (factor -> factor2 varcte .)
    PARDER          reduce using rule 89 (factor -> factor2 varcte .)
    CORCHDER        reduce using rule 89 (factor -> factor2 varcte .)
    FLECHITA        reduce using rule 89 (factor -> factor2 varcte .)
    COLON           reduce using rule 89 (factor -> factor2 varcte .)
    CORCHIZQ        reduce using rule 89 (factor -> factor2 varcte .)


state 195

    (14) varcte -> ID .
    (20) varcte -> ID . CORCHIZQ varcte CORCHDER
    (21) varcte -> ID . PUNTO ID
    (22) varcte -> ID . PARIZQ llamada_param PARDER

  ! shift/reduce conflict for CORCHIZQ resolved as shift
    POR             reduce using rule 14 (varcte -> ID .)
    SOBRE           reduce using rule 14 (varcte -> ID .)
    MAS             reduce using rule 14 (varcte -> ID .)
    MENOS           reduce using rule 14 (varcte -> ID .)
    MAYORQUE        reduce using rule 14 (varcte -> ID .)
    MENORQUE        reduce using rule 14 (varcte -> ID .)
    DIFERENTE       reduce using rule 14 (varcte -> ID .)
    MAYOROIGUAL     reduce using rule 14 (varcte -> ID .)
    MENOROIGUAL     reduce using rule 14 (varcte -> ID .)
    IGUALIGUAL      reduce using rule 14 (varcte -> ID .)
    AND             reduce using rule 14 (varcte -> ID .)
    OR              reduce using rule 14 (varcte -> ID .)
    COMA            reduce using rule 14 (varcte -> ID .)
    PARDER          reduce using rule 14 (varcte -> ID .)
    CORCHDER        reduce using rule 14 (varcte -> ID .)
    FLECHITA        reduce using rule 14 (varcte -> ID .)
    COLON           reduce using rule 14 (varcte -> ID .)
    CORCHIZQ        shift and go to state 237
    PUNTO           shift and go to state 238
    PARIZQ          shift and go to state 239

  ! CORCHIZQ        [ reduce using rule 14 (varcte -> ID .) ]


state 196

    (15) varcte -> INTNUM .

    POR             reduce using rule 15 (varcte -> INTNUM .)
    SOBRE           reduce using rule 15 (varcte -> INTNUM .)
    MAS             reduce using rule 15 (varcte -> INTNUM .)
    MENOS           reduce using rule 15 (varcte -> INTNUM .)
    MAYORQUE        reduce using rule 15 (varcte -> INTNUM .)
    MENORQUE        reduce using rule 15 (varcte -> INTNUM .)
    DIFERENTE       reduce using rule 15 (varcte -> INTNUM .)
    MAYOROIGUAL     reduce using rule 15 (varcte -> INTNUM .)
    MENOROIGUAL     reduce using rule 15 (varcte -> INTNUM .)
    IGUALIGUAL      reduce using rule 15 (varcte -> INTNUM .)
    AND             reduce using rule 15 (varcte -> INTNUM .)
    OR              reduce using rule 15 (varcte -> INTNUM .)
    COMA            reduce using rule 15 (varcte -> INTNUM .)
    PARDER          reduce using rule 15 (varcte -> INTNUM .)
    CORCHDER        reduce using rule 15 (varcte -> INTNUM .)
    FLECHITA        reduce using rule 15 (varcte -> INTNUM .)
    COLON           reduce using rule 15 (varcte -> INTNUM .)
    CORCHIZQ        reduce using rule 15 (varcte -> INTNUM .)


state 197

    (16) varcte -> FLOATNUM .

    POR             reduce using rule 16 (varcte -> FLOATNUM .)
    SOBRE           reduce using rule 16 (varcte -> FLOATNUM .)
    MAS             reduce using rule 16 (varcte -> FLOATNUM .)
    MENOS           reduce using rule 16 (varcte -> FLOATNUM .)
    MAYORQUE        reduce using rule 16 (varcte -> FLOATNUM .)
    MENORQUE        reduce using rule 16 (varcte -> FLOATNUM .)
    DIFERENTE       reduce using rule 16 (varcte -> FLOATNUM .)
    MAYOROIGUAL     reduce using rule 16 (varcte -> FLOATNUM .)
    MENOROIGUAL     reduce using rule 16 (varcte -> FLOATNUM .)
    IGUALIGUAL      reduce using rule 16 (varcte -> FLOATNUM .)
    AND             reduce using rule 16 (varcte -> FLOATNUM .)
    OR              reduce using rule 16 (varcte -> FLOATNUM .)
    COMA            reduce using rule 16 (varcte -> FLOATNUM .)
    PARDER          reduce using rule 16 (varcte -> FLOATNUM .)
    CORCHDER        reduce using rule 16 (varcte -> FLOATNUM .)
    FLECHITA        reduce using rule 16 (varcte -> FLOATNUM .)
    COLON           reduce using rule 16 (varcte -> FLOATNUM .)
    CORCHIZQ        reduce using rule 16 (varcte -> FLOATNUM .)


state 198

    (17) varcte -> TRUE .

    POR             reduce using rule 17 (varcte -> TRUE .)
    SOBRE           reduce using rule 17 (varcte -> TRUE .)
    MAS             reduce using rule 17 (varcte -> TRUE .)
    MENOS           reduce using rule 17 (varcte -> TRUE .)
    MAYORQUE        reduce using rule 17 (varcte -> TRUE .)
    MENORQUE        reduce using rule 17 (varcte -> TRUE .)
    DIFERENTE       reduce using rule 17 (varcte -> TRUE .)
    MAYOROIGUAL     reduce using rule 17 (varcte -> TRUE .)
    MENOROIGUAL     reduce using rule 17 (varcte -> TRUE .)
    IGUALIGUAL      reduce using rule 17 (varcte -> TRUE .)
    AND             reduce using rule 17 (varcte -> TRUE .)
    OR              reduce using rule 17 (varcte -> TRUE .)
    COMA            reduce using rule 17 (varcte -> TRUE .)
    PARDER          reduce using rule 17 (varcte -> TRUE .)
    CORCHDER        reduce using rule 17 (varcte -> TRUE .)
    FLECHITA        reduce using rule 17 (varcte -> TRUE .)
    COLON           reduce using rule 17 (varcte -> TRUE .)
    CORCHIZQ        reduce using rule 17 (varcte -> TRUE .)


state 199

    (18) varcte -> FALSE .

    POR             reduce using rule 18 (varcte -> FALSE .)
    SOBRE           reduce using rule 18 (varcte -> FALSE .)
    MAS             reduce using rule 18 (varcte -> FALSE .)
    MENOS           reduce using rule 18 (varcte -> FALSE .)
    MAYORQUE        reduce using rule 18 (varcte -> FALSE .)
    MENORQUE        reduce using rule 18 (varcte -> FALSE .)
    DIFERENTE       reduce using rule 18 (varcte -> FALSE .)
    MAYOROIGUAL     reduce using rule 18 (varcte -> FALSE .)
    MENOROIGUAL     reduce using rule 18 (varcte -> FALSE .)
    IGUALIGUAL      reduce using rule 18 (varcte -> FALSE .)
    AND             reduce using rule 18 (varcte -> FALSE .)
    OR              reduce using rule 18 (varcte -> FALSE .)
    COMA            reduce using rule 18 (varcte -> FALSE .)
    PARDER          reduce using rule 18 (varcte -> FALSE .)
    CORCHDER        reduce using rule 18 (varcte -> FALSE .)
    FLECHITA        reduce using rule 18 (varcte -> FALSE .)
    COLON           reduce using rule 18 (varcte -> FALSE .)
    CORCHIZQ        reduce using rule 18 (varcte -> FALSE .)


state 200

    (19) varcte -> STRINGVAL .

    POR             reduce using rule 19 (varcte -> STRINGVAL .)
    SOBRE           reduce using rule 19 (varcte -> STRINGVAL .)
    MAS             reduce using rule 19 (varcte -> STRINGVAL .)
    MENOS           reduce using rule 19 (varcte -> STRINGVAL .)
    MAYORQUE        reduce using rule 19 (varcte -> STRINGVAL .)
    MENORQUE        reduce using rule 19 (varcte -> STRINGVAL .)
    DIFERENTE       reduce using rule 19 (varcte -> STRINGVAL .)
    MAYOROIGUAL     reduce using rule 19 (varcte -> STRINGVAL .)
    MENOROIGUAL     reduce using rule 19 (varcte -> STRINGVAL .)
    IGUALIGUAL      reduce using rule 19 (varcte -> STRINGVAL .)
    AND             reduce using rule 19 (varcte -> STRINGVAL .)
    OR              reduce using rule 19 (varcte -> STRINGVAL .)
    COMA            reduce using rule 19 (varcte -> STRINGVAL .)
    PARDER          reduce using rule 19 (varcte -> STRINGVAL .)
    CORCHDER        reduce using rule 19 (varcte -> STRINGVAL .)
    FLECHITA        reduce using rule 19 (varcte -> STRINGVAL .)
    COLON           reduce using rule 19 (varcte -> STRINGVAL .)
    CORCHIZQ        reduce using rule 19 (varcte -> STRINGVAL .)


state 201

    (64) asignacion3 -> CORCHIZQ expresion CORCHDER .

    IGUAL           reduce using rule 64 (asignacion3 -> CORCHIZQ expresion CORCHDER .)


state 202

    (76) estatutor -> ELSE bloque .

    ID              reduce using rule 76 (estatutor -> ELSE bloque .)
    IF              reduce using rule 76 (estatutor -> ELSE bloque .)
    WRITE           reduce using rule 76 (estatutor -> ELSE bloque .)
    FOR             reduce using rule 76 (estatutor -> ELSE bloque .)
    WHILE           reduce using rule 76 (estatutor -> ELSE bloque .)
    WHEN            reduce using rule 76 (estatutor -> ELSE bloque .)
    LLAVEDER        reduce using rule 76 (estatutor -> ELSE bloque .)
    RETURN          reduce using rule 76 (estatutor -> ELSE bloque .)


state 203

    (71) bloque -> LLAVEIZQ . estatuto bloque2 LLAVEDER
    (47) estatuto -> . asignacion estatuto
    (48) estatuto -> . condicion estatuto
    (49) estatuto -> . escritura estatuto
    (50) estatuto -> . for estatuto
    (51) estatuto -> . while estatuto
    (52) estatuto -> . when estatuto
    (53) estatuto -> . llamada estatuto
    (54) estatuto -> . empty
    (55) asignacion -> . ID asignacion3 IGUAL asignacion2 COLON
    (67) condicion -> . IF condicion2 estatutor
    (78) escritura -> . WRITE PARIZQ esc1 esc2 PARDER COLON
    (103) for -> . FOR PARIZQ ID IN for2 PARDER bloque
    (110) while -> . WHILE PARIZQ expresion PARDER bloque
    (111) when -> . WHEN LLAVEIZQ when2 LLAVEDER
    (138) llamada -> . ID PARIZQ llamada_param PARDER COLON
    (139) llamada -> . empty
    (142) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
    ID              shift and go to state 96
    IF              shift and go to state 97
    WRITE           shift and go to state 98
    FOR             shift and go to state 99
    WHILE           shift and go to state 100
    WHEN            shift and go to state 101
    RETURN          reduce using rule 142 (empty -> .)
    LLAVEDER        reduce using rule 142 (empty -> .)

  ! ID              [ reduce using rule 142 (empty -> .) ]
  ! IF              [ reduce using rule 142 (empty -> .) ]
  ! WRITE           [ reduce using rule 142 (empty -> .) ]
  ! FOR             [ reduce using rule 142 (empty -> .) ]
  ! WHILE           [ reduce using rule 142 (empty -> .) ]
  ! WHEN            [ reduce using rule 142 (empty -> .) ]

    estatuto                       shift and go to state 240
    asignacion                     shift and go to state 88
    condicion                      shift and go to state 89
    escritura                      shift and go to state 90
    for                            shift and go to state 91
    while                          shift and go to state 92
    when                           shift and go to state 93
    llamada                        shift and go to state 94
    empty                          shift and go to state 95

state 204

    (68) condicion2 -> PARIZQ expresion PARDER . bloque
    (71) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 203

    bloque                         shift and go to state 241

state 205

    (78) escritura -> WRITE PARIZQ esc1 esc2 . PARDER COLON

    PARDER          shift and go to state 242


state 206

    (81) esc2 -> COMA . esc1 esc2
    (79) esc1 -> . expresion
    (80) esc1 -> . STRING
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    STRING          shift and go to state 153
    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    esc1                           shift and go to state 243
    expresion                      shift and go to state 152
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 207

    (82) esc2 -> empty .

    PARDER          reduce using rule 82 (esc2 -> empty .)


state 208

    (103) for -> FOR PARIZQ ID IN . for2 PARDER bloque
    (104) for2 -> . ID
    (105) for2 -> . range
    (106) range -> . INTNUM PUNTOSRANGO INTNUM
    (107) range -> . ID PUNTOSRANGO ID
    (108) range -> . ID PUNTOSRANGO INTNUM
    (109) range -> . INTNUM PUNTOSRANGO ID

    ID              shift and go to state 244
    INTNUM          shift and go to state 247

    for2                           shift and go to state 245
    range                          shift and go to state 246

state 209

    (110) while -> WHILE PARIZQ expresion PARDER . bloque
    (71) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 203

    bloque                         shift and go to state 248

state 210

    (111) when -> WHEN LLAVEIZQ when2 LLAVEDER .

    ID              reduce using rule 111 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    IF              reduce using rule 111 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WRITE           reduce using rule 111 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    FOR             reduce using rule 111 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHILE           reduce using rule 111 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    WHEN            reduce using rule 111 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    LLAVEDER        reduce using rule 111 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)
    RETURN          reduce using rule 111 (when -> WHEN LLAVEIZQ when2 LLAVEDER .)


state 211

    (112) when2 -> expresion FLECHITA . bloque when2
    (71) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 203

    bloque                         shift and go to state 249

state 212

    (113) when2 -> ELSE FLECHITA . bloque
    (71) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 203

    bloque                         shift and go to state 250

state 213

    (122) funbody -> LLAVEIZQ opc1 opc2 . bloque2 LLAVEDER
    (72) bloque2 -> . RETURN bloque3
    (73) bloque2 -> . empty
    (142) empty -> .

    RETURN          shift and go to state 252
    LLAVEDER        reduce using rule 142 (empty -> .)

    bloque2                        shift and go to state 251
    empty                          shift and go to state 253

state 214

    (125) opc2 -> estatuto .

    RETURN          reduce using rule 125 (opc2 -> estatuto .)
    LLAVEDER        reduce using rule 125 (opc2 -> estatuto .)


state 215

    (126) opc2 -> empty .
    (54) estatuto -> empty .
    (139) llamada -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 54 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 54 (estatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 54 (estatuto -> empty .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 54 (estatuto -> empty .)
    RETURN          reduce using rule 54 (estatuto -> empty .)
    LLAVEDER        reduce using rule 54 (estatuto -> empty .)
    ID              reduce using rule 139 (llamada -> empty .)
    IF              reduce using rule 139 (llamada -> empty .)
    WRITE           reduce using rule 139 (llamada -> empty .)
    FOR             reduce using rule 139 (llamada -> empty .)
    WHILE           reduce using rule 139 (llamada -> empty .)
    WHEN            reduce using rule 139 (llamada -> empty .)

  ! RETURN          [ reduce using rule 126 (opc2 -> empty .) ]
  ! LLAVEDER        [ reduce using rule 126 (opc2 -> empty .) ]
  ! RETURN          [ reduce using rule 139 (llamada -> empty .) ]
  ! LLAVEDER        [ reduce using rule 139 (llamada -> empty .) ]


state 216

    (123) opc1 -> vars multvarsdecl .

    ID              reduce using rule 123 (opc1 -> vars multvarsdecl .)
    IF              reduce using rule 123 (opc1 -> vars multvarsdecl .)
    WRITE           reduce using rule 123 (opc1 -> vars multvarsdecl .)
    FOR             reduce using rule 123 (opc1 -> vars multvarsdecl .)
    WHILE           reduce using rule 123 (opc1 -> vars multvarsdecl .)
    WHEN            reduce using rule 123 (opc1 -> vars multvarsdecl .)
    RETURN          reduce using rule 123 (opc1 -> vars multvarsdecl .)
    LLAVEDER        reduce using rule 123 (opc1 -> vars multvarsdecl .)


state 217

    (118) funparamr -> COMA tipo ID funparamr .

    PARDER          reduce using rule 118 (funparamr -> COMA tipo ID funparamr .)


state 218

    (55) asignacion -> ID asignacion3 IGUAL asignacion2 COLON .

    ID              reduce using rule 55 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    IF              reduce using rule 55 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WRITE           reduce using rule 55 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    FOR             reduce using rule 55 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHILE           reduce using rule 55 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    WHEN            reduce using rule 55 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    LLAVEDER        reduce using rule 55 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)
    RETURN          reduce using rule 55 (asignacion -> ID asignacion3 IGUAL asignacion2 COLON .)


state 219

    (57) asignacion2 -> CORCHDER expresion . asignacion2r CORCHIZQ
    (62) asignacion2r -> . COMA expresion asignacion2r
    (63) asignacion2r -> . empty
    (142) empty -> .

    COMA            shift and go to state 255
    CORCHIZQ        reduce using rule 142 (empty -> .)

    asignacion2r                   shift and go to state 254
    empty                          shift and go to state 256

state 220

    (58) asignacion2 -> READ PARIZQ . assign_read PARDER
    (60) assign_read -> . STRINGVAL
    (61) assign_read -> . empty
    (142) empty -> .

    STRINGVAL       shift and go to state 258
    PARDER          reduce using rule 142 (empty -> .)

    assign_read                    shift and go to state 257
    empty                          shift and go to state 259

state 221

    (59) asignacion2 -> CID PARIZQ . expresion expresionr PARDER
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    expresion                      shift and go to state 260
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 222

    (88) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    SOBRE           reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    MAYORQUE        reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    MENORQUE        reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    DIFERENTE       reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    MAYOROIGUAL     reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    MENOROIGUAL     reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    IGUALIGUAL      reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    CORCHDER        reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    FLECHITA        reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    COLON           reduce using rule 88 (factor -> PARIZQ expresion PARDER .)
    CORCHIZQ        reduce using rule 88 (factor -> PARIZQ expresion PARDER .)


state 223

    (138) llamada -> ID PARIZQ llamada_param PARDER COLON .

    ID              reduce using rule 138 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    IF              reduce using rule 138 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WRITE           reduce using rule 138 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    FOR             reduce using rule 138 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHILE           reduce using rule 138 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    WHEN            reduce using rule 138 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    LLAVEDER        reduce using rule 138 (llamada -> ID PARIZQ llamada_param PARDER COLON .)
    RETURN          reduce using rule 138 (llamada -> ID PARIZQ llamada_param PARDER COLON .)


state 224

    (24) expresionr -> COMA expresion . expresionr
    (24) expresionr -> . COMA expresion expresionr
    (25) expresionr -> . empty
    (142) empty -> .

    COMA            shift and go to state 172
    PARDER          reduce using rule 142 (empty -> .)

    expresionr                     shift and go to state 261
    empty                          shift and go to state 173

state 225

    (37) megaexpr -> AND superexp . megaexpr
    (37) megaexpr -> . AND superexp megaexpr
    (38) megaexpr -> . OR superexp megaexpr
    (39) megaexpr -> . empty
    (142) empty -> .

    AND             shift and go to state 175
    OR              shift and go to state 176
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    megaexpr                       shift and go to state 262
    empty                          shift and go to state 177

state 226

    (38) megaexpr -> OR superexp . megaexpr
    (37) megaexpr -> . AND superexp megaexpr
    (38) megaexpr -> . OR superexp megaexpr
    (39) megaexpr -> . empty
    (142) empty -> .

    AND             shift and go to state 175
    OR              shift and go to state 176
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    megaexpr                       shift and go to state 263
    empty                          shift and go to state 177

state 227

    (29) oplog -> MAYORQUE exp .

    AND             reduce using rule 29 (oplog -> MAYORQUE exp .)
    OR              reduce using rule 29 (oplog -> MAYORQUE exp .)
    COMA            reduce using rule 29 (oplog -> MAYORQUE exp .)
    PARDER          reduce using rule 29 (oplog -> MAYORQUE exp .)
    CORCHDER        reduce using rule 29 (oplog -> MAYORQUE exp .)
    FLECHITA        reduce using rule 29 (oplog -> MAYORQUE exp .)
    COLON           reduce using rule 29 (oplog -> MAYORQUE exp .)
    CORCHIZQ        reduce using rule 29 (oplog -> MAYORQUE exp .)


state 228

    (30) oplog -> MENORQUE exp .

    AND             reduce using rule 30 (oplog -> MENORQUE exp .)
    OR              reduce using rule 30 (oplog -> MENORQUE exp .)
    COMA            reduce using rule 30 (oplog -> MENORQUE exp .)
    PARDER          reduce using rule 30 (oplog -> MENORQUE exp .)
    CORCHDER        reduce using rule 30 (oplog -> MENORQUE exp .)
    FLECHITA        reduce using rule 30 (oplog -> MENORQUE exp .)
    COLON           reduce using rule 30 (oplog -> MENORQUE exp .)
    CORCHIZQ        reduce using rule 30 (oplog -> MENORQUE exp .)


state 229

    (31) oplog -> DIFERENTE exp .

    AND             reduce using rule 31 (oplog -> DIFERENTE exp .)
    OR              reduce using rule 31 (oplog -> DIFERENTE exp .)
    COMA            reduce using rule 31 (oplog -> DIFERENTE exp .)
    PARDER          reduce using rule 31 (oplog -> DIFERENTE exp .)
    CORCHDER        reduce using rule 31 (oplog -> DIFERENTE exp .)
    FLECHITA        reduce using rule 31 (oplog -> DIFERENTE exp .)
    COLON           reduce using rule 31 (oplog -> DIFERENTE exp .)
    CORCHIZQ        reduce using rule 31 (oplog -> DIFERENTE exp .)


state 230

    (32) oplog -> MAYOROIGUAL exp .

    AND             reduce using rule 32 (oplog -> MAYOROIGUAL exp .)
    OR              reduce using rule 32 (oplog -> MAYOROIGUAL exp .)
    COMA            reduce using rule 32 (oplog -> MAYOROIGUAL exp .)
    PARDER          reduce using rule 32 (oplog -> MAYOROIGUAL exp .)
    CORCHDER        reduce using rule 32 (oplog -> MAYOROIGUAL exp .)
    FLECHITA        reduce using rule 32 (oplog -> MAYOROIGUAL exp .)
    COLON           reduce using rule 32 (oplog -> MAYOROIGUAL exp .)
    CORCHIZQ        reduce using rule 32 (oplog -> MAYOROIGUAL exp .)


state 231

    (33) oplog -> MENOROIGUAL exp .

    AND             reduce using rule 33 (oplog -> MENOROIGUAL exp .)
    OR              reduce using rule 33 (oplog -> MENOROIGUAL exp .)
    COMA            reduce using rule 33 (oplog -> MENOROIGUAL exp .)
    PARDER          reduce using rule 33 (oplog -> MENOROIGUAL exp .)
    CORCHDER        reduce using rule 33 (oplog -> MENOROIGUAL exp .)
    FLECHITA        reduce using rule 33 (oplog -> MENOROIGUAL exp .)
    COLON           reduce using rule 33 (oplog -> MENOROIGUAL exp .)
    CORCHIZQ        reduce using rule 33 (oplog -> MENOROIGUAL exp .)


state 232

    (34) oplog -> IGUALIGUAL exp .

    AND             reduce using rule 34 (oplog -> IGUALIGUAL exp .)
    OR              reduce using rule 34 (oplog -> IGUALIGUAL exp .)
    COMA            reduce using rule 34 (oplog -> IGUALIGUAL exp .)
    PARDER          reduce using rule 34 (oplog -> IGUALIGUAL exp .)
    CORCHDER        reduce using rule 34 (oplog -> IGUALIGUAL exp .)
    FLECHITA        reduce using rule 34 (oplog -> IGUALIGUAL exp .)
    COLON           reduce using rule 34 (oplog -> IGUALIGUAL exp .)
    CORCHIZQ        reduce using rule 34 (oplog -> IGUALIGUAL exp .)


state 233

    (95) expr -> MAS termino . expr
    (95) expr -> . MAS termino expr
    (96) expr -> . MENOS termino expr
    (97) expr -> . empty
    (142) empty -> .

    MAS             shift and go to state 187
    MENOS           shift and go to state 188
    MAYORQUE        reduce using rule 142 (empty -> .)
    MENORQUE        reduce using rule 142 (empty -> .)
    DIFERENTE       reduce using rule 142 (empty -> .)
    MAYOROIGUAL     reduce using rule 142 (empty -> .)
    MENOROIGUAL     reduce using rule 142 (empty -> .)
    IGUALIGUAL      reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    expr                           shift and go to state 264
    empty                          shift and go to state 189

state 234

    (96) expr -> MENOS termino . expr
    (95) expr -> . MAS termino expr
    (96) expr -> . MENOS termino expr
    (97) expr -> . empty
    (142) empty -> .

    MAS             shift and go to state 187
    MENOS           shift and go to state 188
    MAYORQUE        reduce using rule 142 (empty -> .)
    MENORQUE        reduce using rule 142 (empty -> .)
    DIFERENTE       reduce using rule 142 (empty -> .)
    MAYOROIGUAL     reduce using rule 142 (empty -> .)
    MENOROIGUAL     reduce using rule 142 (empty -> .)
    IGUALIGUAL      reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    expr                           shift and go to state 265
    empty                          shift and go to state 189

state 235

    (90) terminor -> POR factor . terminor
    (90) terminor -> . POR factor terminor
    (91) terminor -> . SOBRE factor terminor
    (92) terminor -> . empty
    (142) empty -> .

    POR             shift and go to state 191
    SOBRE           shift and go to state 192
    MAS             reduce using rule 142 (empty -> .)
    MENOS           reduce using rule 142 (empty -> .)
    MAYORQUE        reduce using rule 142 (empty -> .)
    MENORQUE        reduce using rule 142 (empty -> .)
    DIFERENTE       reduce using rule 142 (empty -> .)
    MAYOROIGUAL     reduce using rule 142 (empty -> .)
    MENOROIGUAL     reduce using rule 142 (empty -> .)
    IGUALIGUAL      reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    terminor                       shift and go to state 266
    empty                          shift and go to state 193

state 236

    (91) terminor -> SOBRE factor . terminor
    (90) terminor -> . POR factor terminor
    (91) terminor -> . SOBRE factor terminor
    (92) terminor -> . empty
    (142) empty -> .

    POR             shift and go to state 191
    SOBRE           shift and go to state 192
    MAS             reduce using rule 142 (empty -> .)
    MENOS           reduce using rule 142 (empty -> .)
    MAYORQUE        reduce using rule 142 (empty -> .)
    MENORQUE        reduce using rule 142 (empty -> .)
    DIFERENTE       reduce using rule 142 (empty -> .)
    MAYOROIGUAL     reduce using rule 142 (empty -> .)
    MENOROIGUAL     reduce using rule 142 (empty -> .)
    IGUALIGUAL      reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    COMA            reduce using rule 142 (empty -> .)
    PARDER          reduce using rule 142 (empty -> .)
    CORCHDER        reduce using rule 142 (empty -> .)
    FLECHITA        reduce using rule 142 (empty -> .)
    COLON           reduce using rule 142 (empty -> .)
    CORCHIZQ        reduce using rule 142 (empty -> .)

    terminor                       shift and go to state 267
    empty                          shift and go to state 193

state 237

    (20) varcte -> ID CORCHIZQ . varcte CORCHDER
    (14) varcte -> . ID
    (15) varcte -> . INTNUM
    (16) varcte -> . FLOATNUM
    (17) varcte -> . TRUE
    (18) varcte -> . FALSE
    (19) varcte -> . STRINGVAL
    (20) varcte -> . ID CORCHIZQ varcte CORCHDER
    (21) varcte -> . ID PUNTO ID
    (22) varcte -> . ID PARIZQ llamada_param PARDER

    ID              shift and go to state 195
    INTNUM          shift and go to state 196
    FLOATNUM        shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199
    STRINGVAL       shift and go to state 200

    varcte                         shift and go to state 268

state 238

    (21) varcte -> ID PUNTO . ID

    ID              shift and go to state 269


state 239

    (22) varcte -> ID PARIZQ . llamada_param PARDER
    (140) llamada_param -> . expresion expresionr
    (141) llamada_param -> . empty
    (23) expresion -> . megaexp
    (142) empty -> .
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty

    PARDER          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)
    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143

    llamada_param                  shift and go to state 270
    expresion                      shift and go to state 134
    empty                          shift and go to state 135
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141

state 240

    (71) bloque -> LLAVEIZQ estatuto . bloque2 LLAVEDER
    (72) bloque2 -> . RETURN bloque3
    (73) bloque2 -> . empty
    (142) empty -> .

    RETURN          shift and go to state 252
    LLAVEDER        reduce using rule 142 (empty -> .)

    bloque2                        shift and go to state 271
    empty                          shift and go to state 253

state 241

    (68) condicion2 -> PARIZQ expresion PARDER bloque .

    ELSE            reduce using rule 68 (condicion2 -> PARIZQ expresion PARDER bloque .)
    ID              reduce using rule 68 (condicion2 -> PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 68 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 68 (condicion2 -> PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 68 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 68 (condicion2 -> PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 68 (condicion2 -> PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 68 (condicion2 -> PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 68 (condicion2 -> PARIZQ expresion PARDER bloque .)


state 242

    (78) escritura -> WRITE PARIZQ esc1 esc2 PARDER . COLON

    COLON           shift and go to state 272


state 243

    (81) esc2 -> COMA esc1 . esc2
    (81) esc2 -> . COMA esc1 esc2
    (82) esc2 -> . empty
    (142) empty -> .

    COMA            shift and go to state 206
    PARDER          reduce using rule 142 (empty -> .)

    esc2                           shift and go to state 273
    empty                          shift and go to state 207

state 244

    (104) for2 -> ID .
    (107) range -> ID . PUNTOSRANGO ID
    (108) range -> ID . PUNTOSRANGO INTNUM

    PARDER          reduce using rule 104 (for2 -> ID .)
    PUNTOSRANGO     shift and go to state 274


state 245

    (103) for -> FOR PARIZQ ID IN for2 . PARDER bloque

    PARDER          shift and go to state 275


state 246

    (105) for2 -> range .

    PARDER          reduce using rule 105 (for2 -> range .)


state 247

    (106) range -> INTNUM . PUNTOSRANGO INTNUM
    (109) range -> INTNUM . PUNTOSRANGO ID

    PUNTOSRANGO     shift and go to state 276


state 248

    (110) while -> WHILE PARIZQ expresion PARDER bloque .

    ID              reduce using rule 110 (while -> WHILE PARIZQ expresion PARDER bloque .)
    IF              reduce using rule 110 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WRITE           reduce using rule 110 (while -> WHILE PARIZQ expresion PARDER bloque .)
    FOR             reduce using rule 110 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHILE           reduce using rule 110 (while -> WHILE PARIZQ expresion PARDER bloque .)
    WHEN            reduce using rule 110 (while -> WHILE PARIZQ expresion PARDER bloque .)
    LLAVEDER        reduce using rule 110 (while -> WHILE PARIZQ expresion PARDER bloque .)
    RETURN          reduce using rule 110 (while -> WHILE PARIZQ expresion PARDER bloque .)


state 249

    (112) when2 -> expresion FLECHITA bloque . when2
    (112) when2 -> . expresion FLECHITA bloque when2
    (113) when2 -> . ELSE FLECHITA bloque
    (114) when2 -> . empty
    (23) expresion -> . megaexp
    (142) empty -> .
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty

    ELSE            shift and go to state 158
    LLAVEDER        reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)
    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143

    expresion                      shift and go to state 157
    when2                          shift and go to state 277
    empty                          shift and go to state 159
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141

state 250

    (113) when2 -> ELSE FLECHITA bloque .

    LLAVEDER        reduce using rule 113 (when2 -> ELSE FLECHITA bloque .)


state 251

    (122) funbody -> LLAVEIZQ opc1 opc2 bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 278


state 252

    (72) bloque2 -> RETURN . bloque3
    (74) bloque3 -> . expresion COLON
    (75) bloque3 -> . empty
    (23) expresion -> . megaexp
    (142) empty -> .
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty

    LLAVEDER        reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)
    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143

    bloque3                        shift and go to state 279
    expresion                      shift and go to state 280
    empty                          shift and go to state 281
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141

state 253

    (73) bloque2 -> empty .

    LLAVEDER        reduce using rule 73 (bloque2 -> empty .)


state 254

    (57) asignacion2 -> CORCHDER expresion asignacion2r . CORCHIZQ

    CORCHIZQ        shift and go to state 282


state 255

    (62) asignacion2r -> COMA . expresion asignacion2r
    (23) expresion -> . megaexp
    (36) megaexp -> . superexp megaexpr
    (28) superexp -> . exp oplog
    (94) exp -> . termino expr
    (93) termino -> . factor terminor
    (88) factor -> . PARIZQ expresion PARDER
    (89) factor -> . factor2 varcte
    (100) factor2 -> . MAS
    (101) factor2 -> . MENOS
    (102) factor2 -> . empty
    (142) empty -> .

    PARIZQ          shift and go to state 132
    MAS             shift and go to state 142
    MENOS           shift and go to state 143
    ID              reduce using rule 142 (empty -> .)
    INTNUM          reduce using rule 142 (empty -> .)
    FLOATNUM        reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    STRINGVAL       reduce using rule 142 (empty -> .)

    expresion                      shift and go to state 283
    megaexp                        shift and go to state 136
    superexp                       shift and go to state 137
    exp                            shift and go to state 138
    termino                        shift and go to state 139
    factor                         shift and go to state 140
    factor2                        shift and go to state 141
    empty                          shift and go to state 145

state 256

    (63) asignacion2r -> empty .

    CORCHIZQ        reduce using rule 63 (asignacion2r -> empty .)


state 257

    (58) asignacion2 -> READ PARIZQ assign_read . PARDER

    PARDER          shift and go to state 284


state 258

    (60) assign_read -> STRINGVAL .

    PARDER          reduce using rule 60 (assign_read -> STRINGVAL .)


state 259

    (61) assign_read -> empty .

    PARDER          reduce using rule 61 (assign_read -> empty .)


state 260

    (59) asignacion2 -> CID PARIZQ expresion . expresionr PARDER
    (24) expresionr -> . COMA expresion expresionr
    (25) expresionr -> . empty
    (142) empty -> .

    COMA            shift and go to state 172
    PARDER          reduce using rule 142 (empty -> .)

    expresionr                     shift and go to state 285
    empty                          shift and go to state 173

state 261

    (24) expresionr -> COMA expresion expresionr .

    PARDER          reduce using rule 24 (expresionr -> COMA expresion expresionr .)


state 262

    (37) megaexpr -> AND superexp megaexpr .

    COMA            reduce using rule 37 (megaexpr -> AND superexp megaexpr .)
    PARDER          reduce using rule 37 (megaexpr -> AND superexp megaexpr .)
    CORCHDER        reduce using rule 37 (megaexpr -> AND superexp megaexpr .)
    FLECHITA        reduce using rule 37 (megaexpr -> AND superexp megaexpr .)
    COLON           reduce using rule 37 (megaexpr -> AND superexp megaexpr .)
    CORCHIZQ        reduce using rule 37 (megaexpr -> AND superexp megaexpr .)


state 263

    (38) megaexpr -> OR superexp megaexpr .

    COMA            reduce using rule 38 (megaexpr -> OR superexp megaexpr .)
    PARDER          reduce using rule 38 (megaexpr -> OR superexp megaexpr .)
    CORCHDER        reduce using rule 38 (megaexpr -> OR superexp megaexpr .)
    FLECHITA        reduce using rule 38 (megaexpr -> OR superexp megaexpr .)
    COLON           reduce using rule 38 (megaexpr -> OR superexp megaexpr .)
    CORCHIZQ        reduce using rule 38 (megaexpr -> OR superexp megaexpr .)


state 264

    (95) expr -> MAS termino expr .

    MAYORQUE        reduce using rule 95 (expr -> MAS termino expr .)
    MENORQUE        reduce using rule 95 (expr -> MAS termino expr .)
    DIFERENTE       reduce using rule 95 (expr -> MAS termino expr .)
    MAYOROIGUAL     reduce using rule 95 (expr -> MAS termino expr .)
    MENOROIGUAL     reduce using rule 95 (expr -> MAS termino expr .)
    IGUALIGUAL      reduce using rule 95 (expr -> MAS termino expr .)
    AND             reduce using rule 95 (expr -> MAS termino expr .)
    OR              reduce using rule 95 (expr -> MAS termino expr .)
    COMA            reduce using rule 95 (expr -> MAS termino expr .)
    PARDER          reduce using rule 95 (expr -> MAS termino expr .)
    CORCHDER        reduce using rule 95 (expr -> MAS termino expr .)
    FLECHITA        reduce using rule 95 (expr -> MAS termino expr .)
    COLON           reduce using rule 95 (expr -> MAS termino expr .)
    CORCHIZQ        reduce using rule 95 (expr -> MAS termino expr .)


state 265

    (96) expr -> MENOS termino expr .

    MAYORQUE        reduce using rule 96 (expr -> MENOS termino expr .)
    MENORQUE        reduce using rule 96 (expr -> MENOS termino expr .)
    DIFERENTE       reduce using rule 96 (expr -> MENOS termino expr .)
    MAYOROIGUAL     reduce using rule 96 (expr -> MENOS termino expr .)
    MENOROIGUAL     reduce using rule 96 (expr -> MENOS termino expr .)
    IGUALIGUAL      reduce using rule 96 (expr -> MENOS termino expr .)
    AND             reduce using rule 96 (expr -> MENOS termino expr .)
    OR              reduce using rule 96 (expr -> MENOS termino expr .)
    COMA            reduce using rule 96 (expr -> MENOS termino expr .)
    PARDER          reduce using rule 96 (expr -> MENOS termino expr .)
    CORCHDER        reduce using rule 96 (expr -> MENOS termino expr .)
    FLECHITA        reduce using rule 96 (expr -> MENOS termino expr .)
    COLON           reduce using rule 96 (expr -> MENOS termino expr .)
    CORCHIZQ        reduce using rule 96 (expr -> MENOS termino expr .)


state 266

    (90) terminor -> POR factor terminor .

    MAS             reduce using rule 90 (terminor -> POR factor terminor .)
    MENOS           reduce using rule 90 (terminor -> POR factor terminor .)
    MAYORQUE        reduce using rule 90 (terminor -> POR factor terminor .)
    MENORQUE        reduce using rule 90 (terminor -> POR factor terminor .)
    DIFERENTE       reduce using rule 90 (terminor -> POR factor terminor .)
    MAYOROIGUAL     reduce using rule 90 (terminor -> POR factor terminor .)
    MENOROIGUAL     reduce using rule 90 (terminor -> POR factor terminor .)
    IGUALIGUAL      reduce using rule 90 (terminor -> POR factor terminor .)
    AND             reduce using rule 90 (terminor -> POR factor terminor .)
    OR              reduce using rule 90 (terminor -> POR factor terminor .)
    COMA            reduce using rule 90 (terminor -> POR factor terminor .)
    PARDER          reduce using rule 90 (terminor -> POR factor terminor .)
    CORCHDER        reduce using rule 90 (terminor -> POR factor terminor .)
    FLECHITA        reduce using rule 90 (terminor -> POR factor terminor .)
    COLON           reduce using rule 90 (terminor -> POR factor terminor .)
    CORCHIZQ        reduce using rule 90 (terminor -> POR factor terminor .)


state 267

    (91) terminor -> SOBRE factor terminor .

    MAS             reduce using rule 91 (terminor -> SOBRE factor terminor .)
    MENOS           reduce using rule 91 (terminor -> SOBRE factor terminor .)
    MAYORQUE        reduce using rule 91 (terminor -> SOBRE factor terminor .)
    MENORQUE        reduce using rule 91 (terminor -> SOBRE factor terminor .)
    DIFERENTE       reduce using rule 91 (terminor -> SOBRE factor terminor .)
    MAYOROIGUAL     reduce using rule 91 (terminor -> SOBRE factor terminor .)
    MENOROIGUAL     reduce using rule 91 (terminor -> SOBRE factor terminor .)
    IGUALIGUAL      reduce using rule 91 (terminor -> SOBRE factor terminor .)
    AND             reduce using rule 91 (terminor -> SOBRE factor terminor .)
    OR              reduce using rule 91 (terminor -> SOBRE factor terminor .)
    COMA            reduce using rule 91 (terminor -> SOBRE factor terminor .)
    PARDER          reduce using rule 91 (terminor -> SOBRE factor terminor .)
    CORCHDER        reduce using rule 91 (terminor -> SOBRE factor terminor .)
    FLECHITA        reduce using rule 91 (terminor -> SOBRE factor terminor .)
    COLON           reduce using rule 91 (terminor -> SOBRE factor terminor .)
    CORCHIZQ        reduce using rule 91 (terminor -> SOBRE factor terminor .)


state 268

    (20) varcte -> ID CORCHIZQ varcte . CORCHDER

    CORCHDER        shift and go to state 286


state 269

    (21) varcte -> ID PUNTO ID .

    POR             reduce using rule 21 (varcte -> ID PUNTO ID .)
    SOBRE           reduce using rule 21 (varcte -> ID PUNTO ID .)
    MAS             reduce using rule 21 (varcte -> ID PUNTO ID .)
    MENOS           reduce using rule 21 (varcte -> ID PUNTO ID .)
    MAYORQUE        reduce using rule 21 (varcte -> ID PUNTO ID .)
    MENORQUE        reduce using rule 21 (varcte -> ID PUNTO ID .)
    DIFERENTE       reduce using rule 21 (varcte -> ID PUNTO ID .)
    MAYOROIGUAL     reduce using rule 21 (varcte -> ID PUNTO ID .)
    MENOROIGUAL     reduce using rule 21 (varcte -> ID PUNTO ID .)
    IGUALIGUAL      reduce using rule 21 (varcte -> ID PUNTO ID .)
    AND             reduce using rule 21 (varcte -> ID PUNTO ID .)
    OR              reduce using rule 21 (varcte -> ID PUNTO ID .)
    COMA            reduce using rule 21 (varcte -> ID PUNTO ID .)
    PARDER          reduce using rule 21 (varcte -> ID PUNTO ID .)
    CORCHDER        reduce using rule 21 (varcte -> ID PUNTO ID .)
    FLECHITA        reduce using rule 21 (varcte -> ID PUNTO ID .)
    COLON           reduce using rule 21 (varcte -> ID PUNTO ID .)
    CORCHIZQ        reduce using rule 21 (varcte -> ID PUNTO ID .)


state 270

    (22) varcte -> ID PARIZQ llamada_param . PARDER

    PARDER          shift and go to state 287


state 271

    (71) bloque -> LLAVEIZQ estatuto bloque2 . LLAVEDER

    LLAVEDER        shift and go to state 288


state 272

    (78) escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .

    ID              reduce using rule 78 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    IF              reduce using rule 78 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WRITE           reduce using rule 78 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    FOR             reduce using rule 78 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHILE           reduce using rule 78 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    WHEN            reduce using rule 78 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    LLAVEDER        reduce using rule 78 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)
    RETURN          reduce using rule 78 (escritura -> WRITE PARIZQ esc1 esc2 PARDER COLON .)


state 273

    (81) esc2 -> COMA esc1 esc2 .

    PARDER          reduce using rule 81 (esc2 -> COMA esc1 esc2 .)


state 274

    (107) range -> ID PUNTOSRANGO . ID
    (108) range -> ID PUNTOSRANGO . INTNUM

    ID              shift and go to state 289
    INTNUM          shift and go to state 290


state 275

    (103) for -> FOR PARIZQ ID IN for2 PARDER . bloque
    (71) bloque -> . LLAVEIZQ estatuto bloque2 LLAVEDER

    LLAVEIZQ        shift and go to state 203

    bloque                         shift and go to state 291

state 276

    (106) range -> INTNUM PUNTOSRANGO . INTNUM
    (109) range -> INTNUM PUNTOSRANGO . ID

    INTNUM          shift and go to state 292
    ID              shift and go to state 293


state 277

    (112) when2 -> expresion FLECHITA bloque when2 .

    LLAVEDER        reduce using rule 112 (when2 -> expresion FLECHITA bloque when2 .)


state 278

    (122) funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .

    PRIVATE         reduce using rule 122 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    FUN             reduce using rule 122 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    MAIN            reduce using rule 122 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 122 (funbody -> LLAVEIZQ opc1 opc2 bloque2 LLAVEDER .)


state 279

    (72) bloque2 -> RETURN bloque3 .

    LLAVEDER        reduce using rule 72 (bloque2 -> RETURN bloque3 .)


state 280

    (74) bloque3 -> expresion . COLON

    COLON           shift and go to state 294


state 281

    (75) bloque3 -> empty .
    (102) factor2 -> empty .

    LLAVEDER        reduce using rule 75 (bloque3 -> empty .)
    ID              reduce using rule 102 (factor2 -> empty .)
    INTNUM          reduce using rule 102 (factor2 -> empty .)
    FLOATNUM        reduce using rule 102 (factor2 -> empty .)
    TRUE            reduce using rule 102 (factor2 -> empty .)
    FALSE           reduce using rule 102 (factor2 -> empty .)
    STRINGVAL       reduce using rule 102 (factor2 -> empty .)


state 282

    (57) asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .

    COLON           reduce using rule 57 (asignacion2 -> CORCHDER expresion asignacion2r CORCHIZQ .)


state 283

    (62) asignacion2r -> COMA expresion . asignacion2r
    (62) asignacion2r -> . COMA expresion asignacion2r
    (63) asignacion2r -> . empty
    (142) empty -> .

    COMA            shift and go to state 255
    CORCHIZQ        reduce using rule 142 (empty -> .)

    asignacion2r                   shift and go to state 295
    empty                          shift and go to state 256

state 284

    (58) asignacion2 -> READ PARIZQ assign_read PARDER .

    COLON           reduce using rule 58 (asignacion2 -> READ PARIZQ assign_read PARDER .)


state 285

    (59) asignacion2 -> CID PARIZQ expresion expresionr . PARDER

    PARDER          shift and go to state 296


state 286

    (20) varcte -> ID CORCHIZQ varcte CORCHDER .

    POR             reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    SOBRE           reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAS             reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOS           reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYORQUE        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENORQUE        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    DIFERENTE       reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MAYOROIGUAL     reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    MENOROIGUAL     reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    IGUALIGUAL      reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    AND             reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    OR              reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COMA            reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    PARDER          reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHDER        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    FLECHITA        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    COLON           reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)
    CORCHIZQ        reduce using rule 20 (varcte -> ID CORCHIZQ varcte CORCHDER .)


state 287

    (22) varcte -> ID PARIZQ llamada_param PARDER .

    POR             reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    SOBRE           reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAS             reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOS           reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYORQUE        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENORQUE        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    DIFERENTE       reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MAYOROIGUAL     reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    MENOROIGUAL     reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    IGUALIGUAL      reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    AND             reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    OR              reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    COMA            reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    PARDER          reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHDER        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    FLECHITA        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    COLON           reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)
    CORCHIZQ        reduce using rule 22 (varcte -> ID PARIZQ llamada_param PARDER .)


state 288

    (71) bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .

    ID              reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    IF              reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WRITE           reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FOR             reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHILE           reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    WHEN            reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    LLAVEDER        reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    RETURN          reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    ELSE            reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    PARIZQ          reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MAS             reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    MENOS           reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    INTNUM          reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FLOATNUM        reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    TRUE            reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    FALSE           reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)
    STRINGVAL       reduce using rule 71 (bloque -> LLAVEIZQ estatuto bloque2 LLAVEDER .)


state 289

    (107) range -> ID PUNTOSRANGO ID .

    PARDER          reduce using rule 107 (range -> ID PUNTOSRANGO ID .)


state 290

    (108) range -> ID PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 108 (range -> ID PUNTOSRANGO INTNUM .)


state 291

    (103) for -> FOR PARIZQ ID IN for2 PARDER bloque .

    ID              reduce using rule 103 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    IF              reduce using rule 103 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WRITE           reduce using rule 103 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    FOR             reduce using rule 103 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHILE           reduce using rule 103 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    WHEN            reduce using rule 103 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    LLAVEDER        reduce using rule 103 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)
    RETURN          reduce using rule 103 (for -> FOR PARIZQ ID IN for2 PARDER bloque .)


state 292

    (106) range -> INTNUM PUNTOSRANGO INTNUM .

    PARDER          reduce using rule 106 (range -> INTNUM PUNTOSRANGO INTNUM .)


state 293

    (109) range -> INTNUM PUNTOSRANGO ID .

    PARDER          reduce using rule 109 (range -> INTNUM PUNTOSRANGO ID .)


state 294

    (74) bloque3 -> expresion COLON .

    LLAVEDER        reduce using rule 74 (bloque3 -> expresion COLON .)


state 295

    (62) asignacion2r -> COMA expresion asignacion2r .

    CORCHIZQ        reduce using rule 62 (asignacion2r -> COMA expresion asignacion2r .)


state 296

    (59) asignacion2 -> CID PARIZQ expresion expresionr PARDER .

    COLON           reduce using rule 59 (asignacion2 -> CID PARIZQ expresion expresionr PARDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 24 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 35 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for IF in state 91 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 91 resolved as shift
WARNING: shift/reduce conflict for FOR in state 91 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 91 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 92 resolved as shift
WARNING: shift/reduce conflict for FOR in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 92 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for IF in state 94 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 94 resolved as shift
WARNING: shift/reduce conflict for FOR in state 94 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 94 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for IF in state 160 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 160 resolved as shift
WARNING: shift/reduce conflict for FOR in state 160 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 160 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 160 resolved as shift
WARNING: shift/reduce conflict for CORCHIZQ in state 195 resolved as shift
WARNING: shift/reduce conflict for ID in state 203 resolved as shift
WARNING: shift/reduce conflict for IF in state 203 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 203 resolved as shift
WARNING: shift/reduce conflict for FOR in state 203 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 203 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 203 resolved as shift
WARNING: reduce/reduce conflict in state 95 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 95
WARNING: reduce/reduce conflict in state 215 resolved using rule (estatuto -> empty)
WARNING: rejected rule (opc2 -> empty) in state 215
WARNING: reduce/reduce conflict in state 215 resolved using rule (estatuto -> empty)
WARNING: rejected rule (llamada -> empty) in state 215
WARNING: Rule (opc2 -> empty) is never reduced
